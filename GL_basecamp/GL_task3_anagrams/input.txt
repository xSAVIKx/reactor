pool, loop, polo.
Жара
Налетело зноящее лето,
Налило праздной негою  тело,
От ленивого вечного гена
Разливается жаркая нега.
Золотится горячая нива,
И не пьются хорошие вина.
Быстроногая девушка Геба
Утомилась от вечного бега
И тихонько избавясь от топа,
Вытирает им капельки пота.
Солнце, выскочив на небо лихо,
Припекает сегодня не хило.
Лишь еловая влажная лапа
Укрывает от знойного пала
Пятна тени, как райские  меты,
Разукрасили летние темы...
Впрочем я по красотам не дока
И на том - стихотворная кода.
Як фотограф, Карл-Йозеф любив темряву не менше від світла. 
Але тепер він набув безліч нових можливостей: бачити, знати, відчувати. А також - проникати наскрізь, адже його структура відтепер була тоншою за найтонші структури матерії. Тож він без зусилля вийшов назовні - через стелю і дах колишньої гауптвахти. Він піднявся трохи вище над її дахом і тепер зміг охопити її всю, включно з двома вартовими мєнтами, що давили на масу в караульній прибудові (розкидані там і сям казенні шмотки, увімкнутий і до білого розжарений електронагрівач типу казьол, заставлений гранчаками, недоспорожненими пляшками, недоїдками й недокурками столик, касетний магнітофон "Весна", два заряджені і приперті до стіни калашніки, два спітнілі від сну мєнти на одному тапчані в самих лише калісонах - ні, не гомики, а двоюрідні брати, родина, Микуляк Іван і Дракуляк Штефан). Вони мали охороняти цей труп до завтрашнього ранку. Вони й охороняли його. 
Карл-Йозеф уперше відчув щось на кшталт дивної болісної полегкості, коли йому вдалося - знову ж таки без жодних зусиль - рушити вгору й досягнути так званої висоти пташиного польоту. Він опинився в самому потоці місячного світла, щільного і якогось аж навіть намацального. Місяць на небі ще здавався повним, від чого трохи зловісним, хоч насправді мить його повняви настала ще в середу, а зараз він уже йшов на спад, і про це було достеменно відомо всім церковним астрономам. Карлові-Йозефові теж. Він по-риб'ячому крутнувся у світляному струмені й на невизначену хвилину (час для нього вже був чимось іншим) завмер. І жодних окулярів, подумалось йому, жодних біноклів, лінз, додаткових діоптріїв. Він бачив тепер наскрізь і до глибин - на всьому відкритому його Окові просторі.
Семінарське заняття № 1.
Теоретичні аспекти культури
1.	Феномен культури та культурологічні парадигми
2.	Головні поняття культурології, основні функції культури
3.	Культура і людина в контексті соціально-економічного розвитку суспільства. Культура і цивілізація
4.	Світові концепції в культурології та філософії культури
5.	Культурологічні теорії України та Росії

Література:
1.	Культурология: Учеб. Пособие.для студентов/ред.А.И.Шаповалов.- М.: Гуманит.изд. центр ВЛАДОС, 2003- 320с.
2.	Культурология: Учеб. Пособие.для студентов (изд третье).- Ростов н/Д:Фенікс, 2002.- 608с.
3.	Культурология: Учеб. Пособие./ Составитель и ответств ред. А.А.Радугін. – М.: Центр,2001.- 304с.
4.	Полікарпов В.С. Лекції з історії світової культури. :Навч.посіб.5вид.- К.: Знання, КОО, 2002.- 359с.
5.	Культурологія: Навч. Посіб. К.:МАУП, 2000.- 136с. 
6.	Історія і теорія світової і вітчизняної культури.- К. Либідь, 1993. 

ТЕРМІНОЛОГІЧНИЙ СЛОВНИК.
КУЛЬТУРА-від лат. Cuitura – оброблення, виховання, розвиток, освіта), відображає історичний розвиток суспільства, та створені ним матеріальні та духовні цінності.
ФЕНОМЕН – (грець. Phainoumenon - існуюче) поняття, що означає явище, яке набувається нами практикою і може бути зрозумілим за допомогою почуттів. Феномен від ноумена тим, що ноумен залишається за межами нашого досвіду і є неприступним людському спогляданню.
РЕЛІГІЯ – (лат. Religio)- благочестя, набожність, святиня, предмети культу. Релігія є важливим елементом культури народу. Відповідно до заповідей Божих намагались жити, бо людині буде справедливе воздаяння за всі страждання або скоєні злочини. 
РЕАЛЬНІСТЬ –(об’єктивно існуюча дійсність), бо на характер людини накладає відбиток національність, певна культурно-історична епоха.
ТВОРЧІСТЬ – (діяльність людини)
ЦИВІЛІЗАЦІЯ- від лат.civitas – громадянство, міське населення, спільнота. Спочатку використовується, у значенні гідний громадянин, вихований, чемний. Пізніше з середини  XVIII ст. - це характеристика особливостей етапу в культурно-історичному процесі, що є свідченням зрілості суспільства.
ВСТУПНЕ СЛОВО

Слово «культура» останнім часом набуло широкого поширення. Всі ви чули заклики про відродження духовності і національної культури, про культурну кризу у суспільстві. Проте «культура» не тільки широко вживане слово, а й важливе наукове поняття, без якого не може обійтися жодна сфера теоретичного знання про суспільство, тим більше зараз, коли об'єктивні процеси суспільного розвитку висувають проблематику культури на передній план, надаючи їй надзвичайної гостроти.
Що ж таке культура? Є понад 500 визначень цього поняття. З'ясовуючи зміст цього поняття, варто врахувати два моменти: динаміку становлення і розвитку поглядів на культуру в історії філософсько-культурологічної думки і складність змісту культури як феномена суспільного життя.
От як розкриває поняття «культура» «Словник іншомовних слів»:
Термін “культура”(від лат. Cultura – оброблення, догляд, виховання, розвиток, освіта), відображає історичний розвиток суспільства, та створені ним матеріальні та духовні цінності.
У продовж історичного часу культурний процес невпинно розвивався, збагачувався та ускладнювався. Спочатку поняття “культура” стосувалось тільки обробітку землі, бо вона була годувальницею. З часом при формуванні суспільства і суспільної думки значення поняття “культура” охоплювало також виховання та освіту, у цей же час поняття “культура” набуває ще одне значення – вшанування, повага, відправлення культу.
Структура і функції культури.
Структура складається з функцій, а функції обумовлюють структуру.
Структурні елементи і зв’язки між ним створюють структуру системи. Кожен елемент культури виконує свої специфічні функції, які працюють на загально-системні функції. Структура характеризує систему культури у статисиці, функції у динаміці. Між ними існує певна залежність.
Культура
Матеріальна культура                                   Духовна культура(духовні цінності)
Виробничі споруди, знаряддя праці     мистецтво, освіта, наука,  виховання, філософія, етика, естетика, релігія
Система культури включає у себе повсякденний шар та спеціалізовані сфери – мистецтво, наука, філософія, релігія, політична і правова галузі.
Повсякденний шар культури пов ‘язан з повсякденним життям: приватне життя, шлюбні й неформальні групові стосунки, мораль, практичні знання, побутова етика тощо.
Процеси соціального порядку, та життєзабезпечення і взаємодії висвітлюють економічна, політична і правова галузі культури.
Поведінку людей їхню творчість, вдосконалення особистості, знання, гуманізацію суспільних відносин висвітлюють: філософія, наука, мистецтво, релігія. 
Ще одне визначення поняття” культура “- це спосіб діяльності людини, засобами якого по історичній вертикалі створюються духовні та матеріальні цінності.
Матеріальні цінності – все, що відноситься до взаємостосунків людини з довкіллям, для задоволення її потреб, забезпечення технологічної сторни життя.
Духовні цінності – суб’єктивні аспекти життя, ідеї, установки, цінності і способи поведінки.
Культура виконує чітко визначені функції:
естетична – передбачає формування високих естетичних рівнів і спадковості щодо їх сприйняття суспільством;
інформативна – надає інформацію про культурні досягнення людства, народу, нації, держави, регіону протягом історичного часу і виробляє моделі використання досягнень
оберігаюча – передбачає збереження, консервацію і функціональність пам’яток історії та культури в соціумі, їх трансформацію в сучасні культурні процеси;
виховна – покликана пропагувати взірці для наслідування з метою розвитку кращого, що залишили попередники.

Види і форми культури. Протягом соціальної історії люди освоїли, зробили своєю домівкою всю земну кулю, вийшли у космос, винайшли неймовірне за кількістю і якістю число способів діяльності. Якщо спробувати їх згрупувати за прикладними сферами, то можна виділити такі основні форми культури, як матеріальна, духовна і фізична.
Матеріальна культура - перетворення природних матеріалів і енергії відповідно до людських цілей, створення штучного середовища проживання. Сюди включається також необхідний і достатній набір технологій для збереження і розвитку цього середовища. Матеріальна культура створює і задає рівень життя суспільства, формує матеріальні запити людей і пропонує засоби їх задоволення.
Матеріальна культура включає в себе такі елементи, як породи тварин і сорти рослин, грунти і природні речовини (ресурси), які зазнали обробки. У матеріальну культуру входять також: 1) будівлі і споруди, 2) інструменти та обладнання для будь-яких видів діяльності, 3) шляхи повідомлення і засоби транспорту, 4) зв'язок і засоби зв'язку, 5) технології.
Духовна культура - продукти духовної діяльності людини, які існують переважно в ідеальному вигляді: поняття, уявлення, вірування, почуття і переживання, доступні свідомості і розумінню всіх людей. Духовна культура створює особливий світ цінностей, формує і задовольняє наші інтелектуальні та емоційні потреби. Духовна культура - це продукт суспільного розвитку, її основне призначення полягає у продукуванні свідомості.
Завдяки закріпленню в знаках, символах, організаційних формах, комп'ютерній техніці, духовна культура стає відносно самостійною від свого творця, людини. У ній об'єктивуються і виділяються особливі сфери духовної творчості. Духовне і духовно-практичне освоєння всієї реальності оформлюється в філософії, мистецтві, різноманітних науках. Духовно-практичне освоєння (включаючи регулювання) суспільного життя здійснюється в політиці, праві, моралі. Універсальні духовні функції, як світоглядні, так і нормативно-регулятивні, виконують міф і релігія. У майбутньому, можливо, відбудуться революційні зміни духовної культури у зв'язку з розвитком екологічної свідомості і освоєнням космосу. 
Фізична культура - перетворення природного начала в самій людині; формування соціально необхідних навичок, умінь і якостей людського тіла. 
В основі фізичної культури лежить домашня фізична підготовка, що включає розвиток координації рухів всього тіла дитини (формування макро-дій) і артикуляційного апарату (мікро-рухи щелепно-лицевих м'язів, органів дихання і травлення). Інакше кажучи, це вирішення такого відповідального завдання, як навчання мови, прямоходінню, переміщенню предметів, гігієнічним правилам, культивування відмінностей у поведінці за статевими або віковими ознаками.
На цьому фундаменті надбудовуються всі подальші, більш складні або спеціалізовані, фізичні навички і координовані рухи, на зразок балетного танцю, рухів рук хірурга або фокусника. Щоб усьому цьому навчитися, необхідні не стільки відповідні фізичні дані, скільки багаті культурні традиції і вихована в людині здібність до вдосконалення у відповідності до тих або інших професійних завдань. 
Види культури. Крім основних форм культури виділяють також різні її види. Серед безлічі класифікацій можна зупинитися на тій, яка спирається на поняття суб'єкта-носія культури, як найбільш узагальненої і універсальної. Застосовуючи все, що ми вже знаємо про це поняття, отримуємо такий розподіл видів культури: культура суспільства, культура колективу (організації), культура особистості. 
Жоден з видів культури не зводиться до двох інших ані в сумі, ані по окремості. Так, культура суспільства - це об'єктивна цілісність культурної творчості, структура і закономірності якої не залежать від діяльності окремих колективів або особистостей, первинних по відношенню до них. Культура колективу складається як результат накопичення досвіду, традицій спільної діяльності групи людей, об'єднаної однією метою. Культура особистості визначається не тільки мірою засвоєння суспільної і колективної культури, але і суб'єктивністю, унікальним характером кожного конкретного “Я”. 
Потрібно зазначити, що будь-яка класифікація форм і видів культури, певною мірою, відносна, і в реальній діяльності вони переплітаються, взаємопов'язані між собою. Складність соціокультурної реальності обумовлюється також історичною мінливістю (варіативністю) всіх її істотних характеристик. Тому теоретичні поняття суб'єкта, видів і форм культури потребують подальшого тлумачення за допомогою конкретного історичного матеріалу. 
2. Динаміка культури
Знайомство з історією культури показує, що її явища не є незмінними. Тому виникають питання про те, як і чому, під впливом яких чинників змінюється культура. Відповіді на ці питання прагне дати вчення про динаміку культури. Сам термін "динаміка" буквально означає “сила”, тобто вчення про сили і рухи, які ними викликані. Культурна динаміка досліджує соціокультурні зміни з позицій розрізнення типів культурного впливу і характеру культурних змін.
Коли мова йде про соціодинаміку, маються на увазі зміни, які відбуваються в культурі і людині під впливом зовнішніх і внутрішніх сил. Зміни - невід'ємна властивість культури. Поняття "зміна" включає в себе як внутрішню трансформацію культурних явищ (нетотожність самим собі у часі) так і зовнішні зміни (взаємодія між собою, пересування в просторі і т.п.).
Типи культурної динаміки. В культурології культурна динаміка описується трьома основними типами взаємодії: фазовою або етапною; циклічною і інверсійною. Найбільш проста концепція культурного розвитку - традиційна теорія лінійного прогресу, тобто цілеспрямованого поступального руху культурних форм, який розуміється в дусі еволюціонізму як удосконалення людського роду, суспільства, окремої людини, а також результатів її матеріальної і духовної діяльності. Цей тип культурної динаміки отримав назву фазового, або етапного. Для його вивчення використовується метод історичної періодизації, провідним критерієм якого є домінантний тип суспільних відносин, тобто соціальність як така. Ядром її виступають класові інтереси в одному з своїх провідних різновидів - майнових переваг, а складається вона під впливом чинників найрізноманітнішого рівня. Тип соціальності складається на основі переважання міжособистісних відносин в доіндустріальному суспільстві, товарно-грошових чинників в індустріальному або ж чинників, які формують масове суспільство у постіндустріальному суспільстві. 
В рамках історичного матеріалізму концепція формаційного розвитку культури утверджувала основним чинником зміни у способі виробництва. Відповідно до цих змін виділялися і основні періоди лінійного розвитку світової культури, які породжували відповідні типи культури: первісну, рабовласницьку, феодальну, буржуазну і соціалістичну. Як передбачалося, зміна характеру виробництва тягне за собою і зміну суспільного устрою, а разом з ним і культури. 
Якщо змінити масштаб і ввести стадіальний критерій універсального рівня, то культурна динаміка людського суспільства проявиться як загальносвітовий процес зміни всесвітньо-історичних епох: Первісність, Старовина, Середньовіччя, Новий і Новітній час. Динаміка оцінюється в цьому випадку як комплексне поступальне сходження людського співтовариства сходинками історичного прогресу.
Фундамент фазового типу культурної динаміки - соціокультурне перетворення. Воно має місце коли новий стан виникає внаслідок зміни колишнього стану під впливом інтенсивних процесів суспільного оновлення. Розрізнюють три основних види перетворень: реформу, трансформацію і революцію.
Реформою називається зміна, перевлаштування певної частини соціокультурного життя, яка не знищує основ існуючого порядку. У суспільній теорії і практиці до реформ зараховують більш або менш прогресивні перетворення, певний крок до покращення. 
Під трансформацією розуміють сукупність явищ і процесів, які поступово і ненасильницьким чином приводять соціокультурну систему до принципово нової якості відносин.
Революцію визначають як глибоку якісну зміну у розвитку. Стосовно ж соціокультурного середовища говорять про докорінну, як правило, насильницьку зміну найголовніших традиційних цінностей і стереотипів (поведінки, свідомості, мислення), зміну ідеології, крутий поворот державної політики в області культури, кардинальне перетворення соціального складу інтелігенції.
Циклічний тип культурної динаміки виходить з уявлення про те, що зміни у світі підпорядковані закону повторюваності, оборотності. Кожна культура проходить певний життєвий цикл від народження до смерті, рухаючись по замкненому колу до початкового стану хаосу. Подібні погляди були поширені у V-IV ст. до н.е. у грецькій (Арістотель, Полібій) і давньокитайській (Сима Цянь) філософії.
Ідея циклічності протистояла ідеї прогресивного поступального розвитку людської культури і у ХIX-XX ст., знайшовши своє відображення в теорії культурно-історичних типів М.Я.Данилевського, в понятті "культурних організмів" концепції О.Шпенглера, кругообігу "локальних цивілізацій" А. Тойнбі.
Зміни в рамках циклу виявляються повторюваними, суспільства рухаються за подібними траєкторіями протягом багатьох поколінь. Сприйняття часу в них також циклічне, тобто таке, яке періодично повертається до початкової точки. Тому минуле поетизується в легендах про "золоту" добу, яка уявляється найкращою, гідною наслідування і відтворення.
Ще одним типом соціокультурної динаміки називають інверсію, яку іноді розглядають як окремий випадок циклічних змін. Однак це не зовсім правильно, бо інверсія описує зміни, які рухаються не по колу, а здійснюють маятникові рухи - від одного полюса культурних значень до іншого і назад. Такий тип динаміки виникає у суспільствах, де не склалося стійке культурне ядро, "золота середина" або міцна структура. Тому ослаблення жорсткої нормативності і обмежень може приводити до розпущеності звичаїв, повна покірність існуючим порядкам і їх носіям може змінюватися "безглуздим і нещадним бунтом", розгул пристрастей і чуттєвості може поступитися місцем крайньому аскетизму і розсудливому раціоналізму. Чим менше ступінь стабільності суспільства і чим слабкіше налагоджені відносини між його різними компонентами, тим більшого розмаху набувають повороти в його духовному і політичному житті.
Інверсійна хвиля може охоплювати найрізноманітніші періоди - від декількох років до декількох століть. Інверсійний характер мали зміни культури в різні часи і в різних суспільствах. У вітчизняній історії на певному етапі такий характер мав перехід від язичництва до монотеїзму, що супроводжувався знищенням попередніх культів, від релігії до атеїзму, що призвів до руйнування колишніх святинь, огульної критики релігії і розправ зі священиками, від культурної ізоляції до інтенсивного наслідування західних зразків, від державно-партійного тоталітаризму до плюралізму як прямо протилежних моделей політичного і культурного життя.
Характер культурних змін. Коли говорять про характер культурних змін, мають на увазі напрям їх впливу на суспільство. З цієї точки зору розрізняють: зміни, які ведуть до збагачення і диференціації культури; зміни, які ведуть до ослаблення диференціації і занепаду культури; і зміни, які можуть ніяк не виявляти себе протягом тривалого часу, прирікаючи культуру на застій.
Збагачення культури прийнято розглядати як процес поглиблення диференціації її структури при збереженні стійкості фундаментальних частин системи, тобто духовно-етичної спадщини. Позитивні зміни завжди пов'язані з формуванням нових жанрів, напрямів, стилів мистецтва, впровадженням нових технологій, появою нових культурних центрів, народженням геніїв і т.д. Нове не завжди може служити синонімом прогресу, а лише в тому випадку, коли воно сприяє духовно-етичному вдосконаленню людини, допомагаючи їй розширювати зону свободи без шкоди для всього живого.
Культурний занепад частіше за все пов'язаний з ослабленням значущості високих сфер культури, її примітивізацією, зростанням прагматичної спрямованості суспільної свідомості, тобто з набором чинників, викликаних стандартизацією життя в умовах масового суспільства. Занепад також може виражати себе або як втома, реакція розслаблення на попередній бурхливий період розвитку культури, або як незадоволення його результатами.
Культурна криза супроводжується різким ослабленням традиційних зв'язків між найважливішими елементами і інститутами культури. Внаслідок цього система зазнає розпаду. Криза може бути остаточною, але може також дати початок формуванню інших, більш актуальних елементів та їх зв'язків, ставши зародком нової культури.
Про культурний застій кажуть, коли зміни не відбуваються протягом тривалого часу. Суспільство виявляє прихильність до традицій, орієнтується на повторюваність норм, цінностей, смислів, знань, розповсюджує заборону на нововведення. У таких соціокультурних середовищах переважає циклічний тип динаміки, випрямити який у лінію поступального прогресивного розвитку не в змозі навіть великі відкриття.
Той або інший варіант культурних змін, як правило, не охоплює культуру загалом. Навпаки, відмінною особливістю будь-якої культури є її багатошаровий характер, внаслідок чого в ній можуть відбуватися одночасно зміни, направлені в різні сторони і з різною швидкістю. Рух до оновлення, як правило, викликає накопичення тенденцій до стабілізації, що приводить рано або пізно до відкочування і зміни орієнтацій.
Культурна парадигма – сукупність ціннісних уявлень (орієнтацій, ідеалів) та відповідних зразків поведінки, це еталонний зразок, основна модель світосприйняття, орієнтуючись на яку, люди усвідомлюють себе, суспільство, світ.
Крім того, різні компоненти культури змінюються з різною швидкістю. Найбільш стійкою є міфологія, здатна в тій або іншій формі зберігати свої образи протягом багатьох віків. Великий запас консервативності містить в собі і релігія, яка несе функцію інтеграції суспільства. Більш мобільною є художня культура, яка гнучко реагує на зміну духовного стану суспільства або його окремих верств. Але найвищу здатність до змін має наука, яка подвоює свої основні параметри за 10-12 років.
3. Соціальні функції культури
Культура, як спосіб організації суспільного, групового та індивідуального життя, припускає можливість найрізноманітніших вирішень людських проблем, пристосування до умов соціального часу і простору. Які ж функції повинна виконувати культура, щоб забезпечити, з одного боку, стабільність суспільного буття людей, а з іншого - нові підходи до мінливого світу? 
У зв'язку з структурною складністю культури її соціальні функції численні і системно взаємопов'язані. Провідними серед них є функції комунікації, трансляції і трансмутації. Інші завдання культури підпорядковані цим функціям або доповнюють і конкретизують їх. 
Комунікативна функція культури. Суть цієї функції полягає в тому, що поруч з біологічними формами спілкування, а потім замість них або перебудовуючи їх, люди створюють все нові й нові способи обміну даними, думками, почуттями. Передача культурної інформації не забезпечується автоматично, на відміну, скажімо, від генетичної організації в природі. Спілкування як процес повинно постійно підтримуватися творчими зусиллями його учасників по оформленню змісту власної свідомості та розумінню інших людей. Найвеличніший продукт культури, який забезпечує комунікацію, - Слово. Мова, усна і письмова, є древній і вічно молодий працюючий винахід культури. І нехай поет сказав колись, що “думка проречена є неправдою”, потенціал словесно-знакового способу спілкування людство ще не вичерпало. Значною мірою воно підпорядкувало собі і перетворило наочно-образну комунікацію (показ, передачу образів та почуттів через навіювання, співпереживання і т.ін.).
Трансляційна функція культури. Це, по суті, та ж комунікація, але розгорнута в соціально-історичному часі і просторі. Під трансляцією потрібно розуміти передусім функцію передачі соціального досвіду від одного покоління людей до іншого, від епохи до епохи. Культура забезпечує спадкоємність людського існування для багатьох поколінь, створюючи більш або менш надійний захист від екологічних законів регулювання життя. Це пояснює, зокрема, постійне зростання населення Землі, серйозний вплив на яке може мати тільки культурний чинник.
Трансляція культури надзвичайно багатопланова. Частіше за все в ній виділяють духовний і матеріальний компоненти. Духовна, або суб'єктна трансляція іноді називається людинотворчою функцією культури, бо вона спрямована на формування особистості в діапазоні, прийнятному для даного суспільства. На цю сторону трансляції працюють всі соціальні інститути і відносини, які ми звикли називати системою виховання і освіти. 
Матеріальна, або предметна сторона культурної трансляції виражається в тому, що ми успадковуємо і приймаємо як такий світ штучно створених предметів, споруд, механізмів. Середовище існування людини все більшою мірою завдяки механізмам культурної спадкоємності перетворюється на техносферу. Особливе значення для культурного виживання людства мають механізми успадкування технологічних знань. Саме передача “мозаїки технологій” від покоління до покоління сформувала потребу не просто у словах, а в поняттях про предмети і процеси, залучені до людської діяльності. 
Функція трансляції, разом з тим, має свої особливості у передачі інформації. Очевидно, що об'єм соціокультурної пам'яті постійно зростає, але і він не безмежний. Виходячи за рамки комунікації, ця функція передбачає обов'язковий вибір та відбір матеріалу, який передається. А оскільки життєві цілі і потреби людей мінливі, накопичений культурний багаж постійно зазнає переоцінки, переусвідомлення. Не можна заперечувати і можливість втрати культурної інформації. 
Функція трансмутації може бути визначена як творча функція культури. Мутацією називають реорганізацію структур відтворення інформації, перебудову самого апарату носіїв інформації. Щоб життя людей в суспільстві було стійким, необхідна різноманітність форм культурної спадкоємності. Збереження соціальної системи через посилення різноманітності елементів і зв'язків між ними - таке основне призначення даної функції культури. Наприклад, у примітивних суспільствах ім'я людини або предмета ніколи не було випадковим, оскільки в них втілювалася передбачувана “програма” поведінки, дій. Однак відомості, які нагромаджуються, у зв'язку з їх значущістю для людського співтовариства, не могли залишатися надбанням лише індивідуального досвіду. Тому виникли нові, надіндивідуальні канали передачі культурної інформації, зокрема міф, а значно пізніше - наука.
Додатково можна вказати такі функції культури, як нормативно-регулятивна, сигніфікативна, ігрова, рекреативна, стилеформуюча. Деякі дослідники вважають, що культура виконує також “репресивну” функцію - через придушення біологічної агресивності людини соціальними засобами або перетворення її у соціально прийнятні форми.
Крім цього, серед інших слід назвати пізнавальну (гносеологічну, мислетворчу), експресивну (яка дає можливість “побачити” внутрішній світ індивіда), етичну, ідентифікативну та консолідаційну функцію культури.
Діяльнісннй підхід 
Діяльнісннй підхід виступає методологічно важливим витоком будь-якого культурологічного дослід¬ження. Насамперед він дозволяє зробити акцент на визначенні культури як соціального явища. Заслуговує на увагу ще одне важливе питання. Йдеться про те, що культура протилежна природі, і є продуктом людської діяльності. Про людську діяльність, яка на відповідному етапі свого розвитку стає культурною.
Культурна діяльність — це діяльність людська і тому вона характеризується передусім доцільністю. Ставлячи перед собою ціль, людина керується не тільки особистими потребами, а й інтересами, які є вираженням залежності задоволення потреб від соціальних умов буття. Ціль діяльності безпосередньо залежить, таким чином, від рівня соціального розвитку людського суспільства. Від даного рівня зале¬жить і щабель розвитку культури. У цьому плані можна вважати, що розвиток культури має соціальні засади.
Діяльнісний підхід до сутності культури є певною підставою для досліджень як локальних культур, так і типів культури, котрі історично склалися. Виділення сутності культури першого та другого порядків є дещо абстрактним для подібного дослідження, а от світоглядна сутність культури може виступати ключем для вивчення цих питань.
Справді, будь-який тип  культури, оскільки  він уже е культурою, має, звичайно, діяльну сутність і спрямований на формування та розвиток людських сутнісних сил, тобто культура п будь-якому випадку завжди постає діяльністю, що має ціннісну орієнтацію. Водночас сама ієрархія цінностей не лишається сталою та незмінною протягом людської історії (субординація цінностей залежить від пануючого типу світогляду). Якщо людина виступає як абсолютна культурна цінність, то і розуміння людини буде різним V різних типах культури. Скажімо, п умовах первісної, мі-фологічної культури поняття «людина» ототожнюється з поняттям «рід», яке означало не «людство» в сучасному його розумінні, а тільки початкову форму єднання, елементи якого зумовлені суспільними відносинами.
. Історичний підхід до вивчення історії культури.
італ. філософ Джамбаттіста Віко (1668 - 1754) намагався реалізувати принцип філософсько-історичного аналізу світового процесу історії. Розглядав історію, як продукт діяльності людей. Кожне суспільство у розвитку проходе три етапи. У напрямку від нижчого до вищого. Циклічність історії – загальний закон розвитку усіх народів.
Французький історик та соціолог Жан Антуан Кондорсе (1743 - 1794) в праці “Ескіз історичної картини прогресу людського розуму” пише, що історія продукт людського розуму. Поділив історію на десять епох. Десята епоха –епоха майбутнього, епоха розуму на Землі. Його вагомість праці полягає в систематичній розробці теорії суспільного прогресу і застосування принципу історизму.
У добу пізнього палеоліту виникли давні форми релігійних вірувань: магія, анімізм, тотемізм, фетишизм. Ми вважаємо, що перетворення тварини в людину, зумовило і появу наступна сходинки еволюції, на значно вищому рівні, що стала творцем першооснов духовної культури - магічного світогляду. Це підтверджує теорія Є.Тайлора, яку ще називають “анімістична теорія походження релігії”. Він відзначав, що віра в нематеріальні душі найдавніша форма релігійних уявлень. 
Інший культуролог Д.Фрезер відзначав, що релігійні погляди людей формувалися у три етапи: магічний, релігійний, науковий. Ми можемо частково погодитися з його теорією, стосовно зв’язку магічного і релігійного етапів (взаємовідношення природних сил і людини),  стає зрозумілим виникнення родових, а пізніше і національних та всесвітніх релігій. Які виникли у процесах еволюції різноманітної культової практики (обрядів, ритуалів, свят) та її взаємодії з духовною культурою (побутом, традиціями, звичаями), в наслідок цього релігія стає культурним надбанням усього етносу або народу. Це підтверджують історіософські концепції формування та розвитку українського етносу.
Співвідношення понять культура і цивілізація.

Цивілізація- від лат.civitas – громадянство, міське населення, спільнота. Спочатку використовується, у значенні гідний громадянин, вихований, чемний. Пізніше з середини  XVIII ст. - це характеристика особливостей етапу в культурно-історичному процесі, що є свідченням зрілості суспільства.
Будь яка форма існування живих істот наділених розумом; сукупність матеріальних і духовних досягнень суспільства, етап суспільного розвитку, який приходить на зміну дикунству і варварству.
Цивілізація –синонім культури,
-Рівень, ступень суспільного розвитку мат. і дух . культур
епоха деградації, занепаду.
Одне з дивовижних відкриттів сучасної науки полягає в тому, що давні люди знали значно більше від нас. Картина світобудови, що формується нині, віднаходить риси у стародавніх культурах Сходу.
Виникнення давніх цивілізацій відбулося у епоху неоліту (новокам’яну добу) відбулася неолітична революція у господарстві людина переходить від привласнюю чого господарства до виробничого. Вібуваєься розділ праці: землероби, скотоводи, з’являються вожді, жерці, воїни. Характерні риси: одомашнення тварин, стаціонарні поселення. У цей час становлення  мови і виникнення писемності. Знайдені неолітичні цивілізації Ієрихон (тер.Іорданії), Чатал- Хююк (Турція) – поселення міського типу, суспільний лад сусідська спільнота, формування племенних об’єднань, але це ще неписьменні цивілізації.
У добу енеоліту(перехід від кам’яної доби до бронзового віку ) перехід до орошає мого землеробства. Було три раньоземлеробських центри : Іордано-Паестинський, У Малої Азії, північна Месопотамія і західний Іран. Крім того відомі цивілізації у Греції, Болгарії, Молдові, на Кавказі.
Цивілізації - так прийнято називати давні класові суспільства на вели-кому терені Азії та Африки. Тут починалася людська цивілізація, виникла державність. Не лише античність, а й Се¬редньовіччя та Новий час успадкували від давньосхідних цивілізацій багато відкриттів у астрономії, математиці, ме¬ханіці та географії, блискучих досягнень у медицині та ар-хітектурі.
Характерною рисою культур Сходу, монументального мистецтва Вавилону, Єгипту, Ассирії був теоцентризм, прославлення божественності необмеженої влади царів і фараонів, грізної могутності богів, підлеглість особистості державі, монументальність, символічність, декоративність. В цьому районі жили народи різного походження. Вони воювали між собою, причому переможці, як правило, руй¬нували храми, фортеці та міста переможених. Так загинуло багато великих творінь мистецтва.
Історія Стародавнього Сходу бере початок від виникнення найдавніших цивілізацій у Месопотамії та Єгипті (І\/-ІП тис. до н.е.), в Індії (Ш-ІІ тис. до н.е.) та Китаї (II тис. до н.е.). За даними сучасної науки перші цивілізації виникли у Месопотамії та Єгипті. Яка з них з'явилась раніше ще остаточно не встановлено, але різниця в їх зародженні не дуже велика. Взагалі найсприятливіші умови для розвитку аг¬рарної культури були в долинах річок. Не випадково всі центри стародавньої землеробської культури розташовувалися в долинах Тигру і Євфрату, Нілу в Африці. Інду і Гангу в Індії. Хуанхе та Янцзи в Китаї.
Людина у світі культури
Тріада “культура - суспільство – особистість” являє собою соціально-філософську і культурологічну проблему, яка включає в себе безліч аспектів. Наприклад, питання про те, яку роль відіграє особистість в культурі того або іншого історично конкретного суспільства, як узгоджуються інтереси особистості і суспільства, яке існувало ставлення до людини протягом даної епохи, яка роль особистості в культурному прогресі тощо.
Маленька дитина не відразу приходить до усвідомлення своєї особистості. Так і людство пройшло довгий шлях, відокремивши себе спочатку від природи, а потім проголосивши повагу до чужої індивідуальності, утверджуючи творчий діалог несхожих, окремих людей. Античність, Середні віки, Відродження, Просвітництво, ХIХ-ХХ ст. - такі етапи дозрілості людства.
Кожна культурно-історична епоха по-своєму розглядає людину та її місце у світі. Світогляд античності був космогонічним, тобто людина уявлялася частиною світу (космосу), ланкою загальної гармонії. Світогляд Середньовіччя був теоцентричним, вважалося, що в центрі світу і над світом знаходиться Бог (теос). Людина тут - раб Божий. Культура Середньовіччя передусім є культом, а людина – служителем цього культу. Гуманісти Відродження вперше в історії західної культури проголошують антропоцентризм (антропос – людина), ставлять у центр світу особистість, яка об'єднує у собі почуттєве, інтелектуальне і творче начала. Новим етапом у самопізнанні людства є епоха Просвітництва. Для Гердера, Канта, Гегеля людина цікава передусім як суб'єкт культури. Особистість - втілення творчої спрямованості людини, а культура - це звільнення людини через творчість. Представники романтичного напряму в філософії ХІХ ст. (Йоган Фіхте, Фрідріх Шеллінг, Фрідріх Шлегель та ін.) проголошують культ особистості, яка розуміється як рідкісна та вийняткова істота, яка має творчу інтуїцію. Трагічним гуманізмом, відчуттям болю людської особистості, самотності людини в світі просякнуті ідеї філософів екзистенціалістів Ф.Кафки, Л.Шестова, М.О.Бердяєва, Ж-П.Сартра, А.Камю.
Сьогодні поняття “людина” і “особистість”, “індивід” і “індивідуальність” розмежовуються. Необхідно їх конкретизувати і встановити співвідношення між ними.
Людина - вищий рівень у розвитку живих організмів на Землі, суб'єкт суспільно-історичної діяльності і культури, тобто, з одного боку, це - біологічна істота, з іншого - творець специфічного світу, який є результатом творчої діяльності всього людства.
Дитина, яка тільки-но народилася, належачи до людей, ще не являє собою особистості; їй необхідно стати особистістю, сформувати в собі особистісні якості. Для цього потрібні певні біологічні, природні якості людини, без яких процес формування особистісних якостей не може обійтися. Так, наприклад, розумово відсталі хворі, належачи до роду людського, особистостями стати не можуть.
Особистість - це стійка система соціально-значущих рис, які характеризують індивіда, вона є продуктом суспільного розвитку і включення індивідів в систему соціальних відносин шляхом предметної діяльності.
Пояснюючи поняття “особистість” через поняття “людина”, можна сказати, що особистість є людина зі сформованим світоглядом (системою поглядів на світ), самосвідомістю і здатністю до творчої самореалізації через діяльність. Самосвідомість являє собою свідомість і оцінку людиною самої себе як суб'єкта практичної, пізнавальної, культурної діяльності, як особистості. На шляху самоусвідомлення як особистості людина обов'язково стикається з визначенням своєї самості, окремості, індивідуальності (що розуміється як одиничність, неповторність, винятковість) і спільності, подібності до інших.
Індивід - поняття, яке вказує на приналежність даної конкретної людської істоти до людського роду. Поняття “індивід” несе в собі як ознаку цілості суб'єкта, так і наявність у нього особливих (індивідуальних) властивостей. Але, вживаючи слово “індивід”, ми робимо акцент на родових ознаках, а не на особистісних властивостях.
Отже, існують певні якості, які характеризують особистість людини, культуру особистості, міру її особистості. Людина формується у конкретному історичному часі. Він, в свою чергу, включає в себе все “тіло культури”, тобто весь попередній досвід, культурну традицію, загальнокультурну атмосферу.
До культурно-історичних якостей особистості належить здатність судження як основа інтелектуальної культури, моральна рефлексія і совість як обов'язкові складові етичної культури особистості, смак як специфічна здатність, що лежить в основі естетичної культури особистості і суспільства, пам'ять і традиції як умова і потреба міжособистісного спілкування, моральність і право як регулятиви поведінки людей і гаранти забезпечення їх безпеки.
Будучи приналежністю, частиною особистостей, що спілкуються одна з одною, ці якості впливають на створення певних соціальних інститутів і стають рушієм та барометром їх розвитку. Так, моральність, совість, моральна рефлексія лежать у основі правового устрою суспільства, здатність судження забезпечує розвиток наук, смак впливає на розвиток мистецтва.
Здатність судження можна визначити як здатність людини до розумового акту, який виражає його ставлення до певного об'єкта, коли людина при оцінці об'єкта підключає свої знання, сумніви, досвід, впевненість або віру. Здатність судження лежить в основі моральної рефлексії і формування смаку.
Моральна рефлексія - якісна характеристика особистості, здатної осмислити і оцінити власні вчинки. Моральна рефлексія є характерною рисою високорозвиненої особистості, оскільки вона є вираженням потреби людини у самооцінці (в тому числі, і у вигляді самопокарання). Другою складовою моральної рефлексії (крім здатності судження) є совість: здатність особистості здійснювати етичний самоконтроль. Совість стає вирішальною особистісною якістю, коли людина потрапляє в ситуацію вибору.
Характеризуючи людину, оточуючі майже завжди дають оцінку її смакам: “поганий смак”, “добрий смак”, “несмак”. Смак являє собою здатність людини до сприйняття і оцінки естетичних якостей явищ та предметів і розмежування прекрасного від потворного.
Формуючись як особистість, людина відчуває на собі безліч культурних впливів. Це і досвід загальнолюдської культури, і конкретно-історичний час, в якому вона живе, і національна культурна атмосфера, як її безпосереднє культурне оточення і середовище, в якому відбувається пробудження людини до культурного життя. 
Проблема визначення національного характеру, розшифрування культурного генофонду народів порушується Просвітництвом і продовжує бути актуальною, багатоаспектною і невирішеною досьогодні.
Кожний народ має систему цінностей, яка визначає і характеризує саме його спосіб життя, формує типові для представників даної нації особливості поведінки і мислення, які лежать в основі творчості цього народу.
Поняття “національний характер” включає в себе і психічні особливості, які відрізняють представників даної нації від іншого людства, і особливий склад мислення, який “прочитується” в культурі даного народу. Так, “Фауст” Гете був відображенням, з одного боку, духу епохи, з іншого боку - німецького духу.
Існує поняття етнокультурного стереотипу як узагальненого уявлення про типові риси, що характеризують який-небудь народ. Це або автостереотипи (те, що думають люди про свій народ), або гетеростереотипи (те, що люди думають про інші народи). Іноді вони співпадають, іноді сперечаються один з одним. “Англійська манірність”, “французька галантність”, “німецька мрійність”, “німецький педантизм”, “російське “авось”, “африканський темперамент”, “китайські церемонії”, “українська господарність” - всі ці і безліч інших уявлень складають поле етнокультурних стереотипів європейців, американців, китайців, українців, японців, росіян.
Історія розвитку культурологічної думки
Становлення культурологічної думки почалося у стародавньому світі, її розвиток мав свої особливості у Середні віки і Новий час.
У давнину для людини реальне життя не було чимось відмінним від міфологічного світу. Древні релігії були політеїстичними (політеїзм - віра у багатьох богів). Люди спілкувалися з богами так само, як один з одним. Міфологічне мислення як форма колективної свідомості складає величезний пласт культури, є культурною реальністю і, одночасно, містить уявлення про культуру у древніх. У цьому випадку сприйняття культури включало в себе поклоніння, шанування, культ. 
Давньогрецькі філософи Платон, Протагор, Полібій і китайський філософ Сима Цянь вважали культуру частиною божественної природи і її виявом. Подібно будь-якій живій істоті, культура народжується, живе і вмирає, а етапи її розвитку нагадують зміну пори року. Традицію такого розуміння культури пізніше збережуть деякі арабські вчені. Так, історик і філософ Ібн-Халдун стверджував, що повний цикл розвитку культури відбувається протягом 120 років, після чого стара культура буває “переможеною” іншою, більш сильною культурою (частіше за все - культурою кочовиків). Цей напрямок отримав назву “культурного натуралізму”. Для нього характерні: перенесення рис природи на культуру, обожнювання культури у всіх її виявах, в тому числі у формі державної влади, ідея циклічності розвитку культури.
Відчуваючи світобудову як вищу гармонію, давні греки прагнули створити фрагмент досконалості на землі. Живим втіленням їх уявлень про гармонію, культурним зразком був поліс - місто-держава, яка формує людину культури. Так, Арістотель розробляв ідею культурної людини як зразкового громадянина. Тобто, в цілому розуміння культури носило гуманістичний характер.
У середньовічній Європі утверджується християнство - монотеїстична релігія (монотеїзм - віра в одного бога). Воно об'єднало у собі і світогляд, і філософію, і етику, і правові норми, підпорядкувало собі науку, освіту, мистецтво. Відповідно проблеми культури висвітлювалися у працях філософів-богословів. Для Августина Блаженного “без віри немає знання, немає істини”. Світова історія за Августином Блаженним є результатом божественного визначення. “Гріховному” світському граду він протиставляє “град божий”, утверджуючи, таким чином, пріоритет церкви.
Спробу поєднати арістотелізм і християнство здійснить знаменитий католицький богослов Фома Аквінський. Основний принцип його філософії - гармонія віри і розуму, оскільки розум здатний раціонально довести існування Бога і розбити заперечення проти істин віри. У розробленій ним системі сполучилися, не змішуючись, філософія і теологія, держава і церква, громадянська і християнська доброчесність.
Епоха Відродження утверджує гуманістичний ідеал. Культура уявляється мислителям Відродження результатом вільної творчої діяльності людини. Свобода і творчість як принципи людського співжиття протиставляються середньовічній ієрархії, підлеглості церкві. Дж. Манетті пише трактат “Про гідність і довершеність людини”, спрямований проти Папи Іннокентія III, Джованні Піко делла Мірандола створює “Промову про гідність людини”. Вільна творчість і гідна поведінка стають обов'язковим змістом морально-етичних міркувань і концепцій епохи.
Принципово по-новому культурний досвід минулого і сучасності, причини виникнення і шляхи розвитку культури переосмислюються у XVIII ст. Просвітництвом. Епоха прагне до цілісного сприйняття культури людства, розуміючи її як продукт діяльності людського розуму. У ряді праць поняття “культура” і “природа” протиставляються. Так, Жан-Жак Руссо вважає природу продуктом довершеного божественного розуму, а культуру – недосконалого людського розуму, негативно ставиться до культурного прогресу. Усуненню опозиції “культура”-“природа”, пошуку шляхів їх гармонічного поєднання присвячені роботи Іммануїла Канта (1724-1804). За Кантом причиною виникнення культури є суспільна сутність людини. Філософ виділяє дві реальності: світ природи (тваринного начала, зла, жорстокості) і світ свободи (людини, культури, моралі). Перетинаються і примирюються два протилежних начала в уявленнях про прекрасне й у творенні прекрасного, що власне і є метою культурної діяльності. В етиці Кант вводить категоричний імператив, тобто обов'язкове і безумовне моральне правило, всезагальний закон поведінки, який долає і виключає будь-яке зло.
До другої половини XVIII ст. належить діяльність німецького філософа й історика І.Г.Гердера. Для Гердера культура є наслідком здатності людини до творчої і розумової діяльності, яка знаходить вираз у мові, науці, ремеслі, мистецтві, державі, релігії, сім'ї. Гердер вперше визначив культуру як необхідну і невід'ємну реальність людського суспільства, стверджуючи, що некультурних народів взагалі не існує. Є більш культурні і менш культурні народи. Рівень культури філософ пов'язує з прогресом освіти. У роботі “Про походження мови” (1772 р.) Гердер пов'язує появу мови з фізіологічно закладеною в людині здібністю до мислення, у розвитку мови вбачає прогрес культури. Він одним з перших зацікавився вивченням національних культур як форм існування світової. Гердер виділив етапи, через які проходить національне відродження: I - вивчення історії, етнографії, II - формування національної літературної мови, III - виникнення національних політичних організацій, боротьба за незалежність.
Остаточно опозиція “природи” і “культури” знімається в філософії Георга Фрідріха Вільгельма Гегеля, (1770-1831), для якого “культура є… звільнення і робота вищого звільнення”, що розуміється як поетапний рух від природної безпосередності до вищої духовності. Історія людства за Гегелем є сходи вгору, по яким людина, звільнюючись, підіймається шляхом пізнання абсолютного духу. Гегель зводить культуру до духовного розвитку людства, розуміючи творчість як діалектичне сходження духу.
У першій половині XIX ст. з'явилися роботи російського вченого М.Я.Данилевського. У книзі “Росія і Європа” він висунув концепцію “замкненого (локального) розвитку культур”. Кожний народ, за Данилевським, створює специфічну систему цінностей. Вироблена ним культура слабко контактує з іншими культурами, протидіючи проникненню в її “тіло” чужорідних елементів. Данилевський створив “систему типів” людства. Він писав, що є народи, віддані ідеї державності, а є такі, яким вона чужа. Є люди, які сповідують ідеали лицарства, честі, а є їх антиподи - хитрі обманщики, безпринципні торгаші. Народи Сходу створили вишукану, але малорухому, споглядальну культуру, яка з покоління в покоління відтворює саму себе. На Заході була створена динамічна, утилітарно-практична культура, спрямована на перетворення природи і суспільства. Ідеї Данилевського згодом сильно вплинули на культурологію ХХ ст.
Виникнення української культурологічної думки пов'язане з діяльністю Кирило-Мефодієвського братства. У Статуті Братства, у відозвах “До братів українців”, “До братів росіян”, “До братів поляків”, в творах його фундаторів - М. Костомарова (“Думки про історію Малоросії””, “Дві руські народності”), П. Куліша (“Повість про український народ”) - відстоюються ідеї культурної самобутності слов'янських народів, їх права на вільний розвиток, гарантований вільним федеративним союзом слов'янських республік. Значний внесок в розвиток культурологічної думки зробив М. Драгоманов (1841-1895 рр.). З позицій порівняльно-історичної методології М. Драгоманов виступав проти хуторянського етнографізму, висував ідеї вільного розвитку народної культури у національну культуру, просякнуту загальнолюдськими цінностями. Цілісну концепцію історії української культури висунув М. Грушевський (1866-1934 рр.). Вона базувалася на тезах самобутності і самостійності української культури. Одним з перших він піддав сумніву і критиці теорію єдиної монолітної культури Київської Руси, доводив існування різних етноплемен ще за епохи трипільської культури. Не протиставляючи українську і російську культури, він все ж вважав першу більш близькою до європейської культури.
Сучасні культурологічні теорії
Аналіз сучасних культурологічних концепцій переслідує дуже важливу мету: дати уявлення про основні тенденції і напрями культурології ХХ ст, показати, як вони оцінюють стан і перспективи сучасної культури.
Для теорії культури ХХ ст. характерний відхід від загальних концептуальних підходів, які базуються на еволюціоністському розумінні культурного розвитку. Концепція німецького філософа та історика О.Шпенглера належить до досліджень, які формують сучасну культурологічну традицію. Вона передбачає розгляд не тільки певних культурних констант, завдяки яким можлива розмова про культуру в цілому, але і аналіз різноманіття культур. Такі циклічні теорії культурного розвитку розглядають кожну культуру як цінність в собі незалежно від міри її цивілізованості, в загальному потоці соціокультурної динаміки. У знаменитій роботі “Згасання Європи” О.Шпенглер розкриває свою концепцію розвитку культури як організму, який народжується, досягає розквіту і, виснажуючись, приходить до свого природного кінця. Весь цикл, з його точки зору, триває близько тисячі років. Цивілізацію Шпенглер вважає симптомом і вираженням відмирання цілого культурного світу, згасання творчого духу культури. Звідси і назва його книги. Ідея культурно-історичного кругообігу, за Шпенглером, знаходить своє підтвердження в різних культурах, кожна з яких унікальна. Його концепція розглядає вісім рівноцінних за досягнутою зрілістю культур: єгипетську, індійську, вавілонську, китайську, античну, візантійсько-арабську, західноєвропейську і південноамериканську (майя). Якщо еволюціоністи концентрували свою увагу на логіці розвитку культури, то Шпенглер віддавав перевагу поняттю “душа культури”. Виділяючи три типи душі (“аполонічний”, “магічний” і “фаустовський”), дослідник вважав, що вони лежать в основі відповідно античної, візантійсько-арабської і західноєвропейської культур. Культура жива остільки, оскільки вона зберігає глибокий, нерозривний зв'язок з людською душею. Душа культури живе в душах людей, які сприймають символи, смисли і цінності даної культури. Коли ж цивілізація придушує і поглинає людину так, що “вогонь душі згасає”, вона приречена на загибель. М.О.Бердяєв відзначав трагічне світовідчуття Шпенглера: “У ньому немає… цивілізаторського самозадоволення, немає цієї віри в абсолютну перевагу своєї епохи над попередніми поколіннями”.
Концепцію локальних цивілізацій розвивав британський культуролог А.Тойнбі у своїй 12-томній праці “Дослідження історії”. Різноманіття форм соціокультурної організації людства, за Тойнбі, базується на своєрідності систем цінностей, навколо яких складається повсякденне життя - від найгрубіших його виявів до найвищих зльотів творчості. Кожна локальна цивілізація проходить у своєму розвитку чотири стадії: виникнення, зростання, надлому і розпаду. Визначальним елементом ціннісної системи А.Тойнбі вважав релігію, а економічна і політична сфери життя цивілізації, на його думку, підкоряються “духовному началу”. Загалом Тойнбі нараховував 13 розвинених цивілізацій, хоча в його ранній творчості фігурувала 21 цивілізація. Непересічне значення його концепції полягає у розкритті діалогічної суті розвитку культури як серії “Викликів”, які кидаються природою і суспільством, і “Відповідей”, які знаходить людська творча духовність.
Інтегральна концепція одного з фундаторів російської і американської соціології П.О.Сорокіна, викладена ним в роботі “Соціальна і культурна динаміка”, також базується на чергуванні декількох типів культур (суперсистем): 2-х основних (почуттєвого і ідеаціонального) і проміжних (ідеалістичного). Фундаментальним принципом кожного культурного типу П.О.Сорокін вважає спосіб пізнання, оснований на почуттєвому, раціональному або інтуїтивному сприйнятті. Сучасна почуттєва культура з її матеріалістичним забарвленням, на думку вченого, переживає глибоку кризу, вихід з якої можливий завдяки поверненню до абсолютних цінностей альтруїзму, добра і віри, внаслідок чого станеться заміна цього культурного типу наступним (ідеаціональним). На відміну від концепції О.Шпенглера теорія П.Сорокіна віддзеркалює тенденцію пошуку загальної культурної основи людства, реальних шляхів і механізмів виходу з культурної кризи.
З усвідомленням кризи культури як розпаду її внутрішньої єдності, протиставлення її спершу спільних ідей і цінностей пов'язане виникнення культурологічного напряму в філософії неокантіанства. Значний внесок у розвиток теорії культури зробили В.Віндельбанд, М.Вебер, Г. Ріккерт, Е.Кассірер. М.Вебер зафіксував драматичне положення західної людини між “небом” ідеалів і “землею” емпіричної реальності. Е.Кассірер в своїй “Філософії символічних форм” розкриває різноманіття автономних і самодостатніх, на його думку, символічних форм (наприклад, мова, міф, наука і т.п.).
Глибокої уваги заслуговують феноменологічні культурологічні концепції. Е.Гуссерль розглядає культурологічну проблематику з точки зору “телоса” європейської культури, що розкривається в її історичному розвитку. "Телос" - це певний духовний образ культури, поєднане духовними зв'язками життя людей і народів в рамках однієї культури. Подолання кризи європейської науки і культури Е.Гуссерль вбачає у поверненні до джерел європейської духовності - раціоналізму і обов'язкового співвідношення його з “життєвим світом” людини, відновленням втраченого зв'язку науки з людиною. 
На початку і в середині ХХ ст. відбувається поворот в українській культурологічній думці. Після розвитку в руслі культурології Просвітництва і раннього Романтизму, вона починає відчувати вплив ірраціоналізму і волюнтаризму (Шопенгауера, Ніцше). Найбільш яскраво цей вплив втілився в творчості Д. Донцова (1883-1973 рр.), яка стала теоретичною основою інтегрального націоналізму.
Яскравим відображенням кризи людської суб'єктивності і гуманізму в сучасній культурі стала концепція М.Хайдеггера. Центральною темою в ній стає тема мови як засобу комунікації: “Думка дає буттю слово: в оселі мови мешкає людина”. Вихід з культурної кризи, що створилася, бачиться Хайдеггеру у новому досвіді мислення, яке спирається на давньогрецькі першоджерела, на твердження Протагора, що людина є мірою всіх речей.
Іншим напрямом у культурології є психоаналіз, який ставить перед західною культурою проблему несвідомого. Його засновником був австрійський психіатр З.Фрейд. Він висунув гіпотезу про існування несвідомого як особливого рівня людської психіки, де зосереджені несвідомі бажання і витіснені з свідомості ідеї. “Воно” (як називає З.Фрейд несвідоме начало) активно втручається в людське життя, керує ним. Наша свідомість (“Я”) - лише іграшка в руках могутньої психічної сили первинних бажань людини, які базуються на прагненні до творення і продовження роду або руйнування (Ероса-любові і Танатоса-смерті). Роль культури в житті людини, за Фрейдом, полягає в здатності сублімувати (замінювати) примітивні потяги. Завдяки культурі вони набувають форми прагнення до творчості, пізнання та іншої діяльності, яка етично схвалюється. Культура (“Над-Я”) виконує роль внутрішнього цензора, завдяки якому людина здатна жити як соціальна і культурна істота. К.Г.Юнг розвинув концепцію психоаналізу, використовуючи поняття “архетипів” - психічних структур колективного несвідомого. Завдяки ним формуються образи, думки і почуття людей, зберігається колективний історичний досвід, міфи і символи культури.
Екзистенційні концепції культури К.Ясперса, Ж.-П. Сартра, А.Камю привертали увагу до проблем сучасної культури, які виникають внаслідок відчуження людини від соціуму. Люди будуть дбайливіше ставитися до свого життя, якщо усвідомлять абсурдність людського існування, - вважають екзистенціалісти. Усвідомлення абсурду буття призводить до бунту, а цей останній - до свободи, заради якої людина готова піти на все, оскільки в свободі вона знаходить сенс свого життя.
Помітне місце в сучасній культурології займають концепції структуралізму, розроблені К.Леві-Строссом, Р.Бартом, М.Фуко, Ж.Деррідою. Структуралісти поставили завдання подолати описовість і дослідити культуру за допомогою суто наукової методології природничих наук, що включає формалізацію, комп'ютеризацію, математичне моделювання. Структурування здійснюється в різних галузях культури: мові і літературі, соціальних уявленнях та ідеології, мистецтві і масовій культурі. К.Леві-Стросс стверджує, що всі культурні уявлення (міфи, ритуали, правила) є певного роду знаковими системами, які передають інформацію і здійснюють культурний обмін всередині структури. Гармонію почуттєвого і раціонального начал (надраціоналізм), до якої необхідно прагнути сучасному людству, культуролог вбачає у феномені первісного мислення. Метою структурного аналізу є пошук системоутворюючого чинника, сукупності правил, за якими можна формувати культурні об'єкти.
Однією з найпоширеніших в сучасній культурології є ігрова концепція культури. Найбільш яскравими її представниками стали Й.Хейзінга, Х.Ортега-і-Гассет, М.Бахтін. У роботі “Homo ludens” (“Людина, яка грає”) Й.Хейзінга досліджує гру як загальний принцип становлення і життєдіяльності людської культури. Її культуротворча роль полягає у дотриманні добровільно встановлених правил, в приборканні стихії пристрастей при відсутності гніту “серйозності”. Роботи Й.Хейзінги містять критику масової культури, яка перегукується з підходом Х.Ортеги-і-Гассета. Найвидатніший іспанський філософ займає особливе місце серед сучасних мислителів, тому що поєднує в своїй теорії традиції “філософії життя”, неокантіанців, екзистенціалізму. У роботі “Повстання маси”, яка набрала широкого розголосу, він аналізує стан сучасної культури і людини в ній. Оперуючи образами “еліти” і “людини-маси”, мислитель попереджає про небезпеку загального нівелювання, деперсоналізації людини, влади “сучасного варвара”, руйнівника культури. Подолання культурної кризи Ортега-і-Гассет вбачає не у докорінному перетворенні суспільства, а у поверненні до ієрархії більшості і елітарної меншості, яка створює основи культури внаслідок внутрішньої потреби. Суть культури, на думку Х.Ортеги-і-Гассета, складають спонтанність і відсутність прагматизму.
В кінці ХХ ст. сформувався постмодерністський напрям в культурології. Постмодернізм зазнав впливу багатьох сучасних інтелектуальних течій. Постмодерністське сприйняття дійсності проявляється у прагненні до реконструкції (руйнування, розділення), децентралізації, відмові від авторитетів будь-якого рангу, у запереченні норм і традицій раціоналізму. У роботах Ж.-Ф. Ліотара, Ж.Делеза, Р.Рорті та ін. відстоюються цінності свободи у всьому, спонтанній діяльності людини, ігровому началі. Підвищується інтерес до ірраціонального і суб'єктивного, невизначеного, неясних форм. Постмодернізм, плюралістичний за своєю суттю, не боїться руйнування єдності існуючої культури, обґрунтовуючи неминучість трансформації культури у якісно нову форму. Різноманітність сучасних культурологічних, напрямів і концепцій дає уявлення про широту людського світогляду та світорозуміння і є узагальненням історико-культурного досвіду.
 

ЗАКЛЮЧНЕ СЛОВО



 	Харьковский    национальный
университет   радиоэлектроники
Кафедра  ЭВМ
ТОРБА
Александр Алексеевич
Кандидат технических наук,  доцент	Украина, 61166, г.Харьков,
пр. Ленина 14, ауд. 221
		Раб.тел:    (8-057) 702-13-54
Email: august@kture.kharkov.ua







КОНСПЕКТ  ЛЕКЦИЙ


по  курсу

«АРХИТЕКТУРА КОМПЬЮТЕРОВ»



2009 
 
ВВЕДЕНИЕ
Развитие микроэлектроники началось на рубеже 50-х ÷ 60-х годов с производства малых интегральных схем (МИС), содержащих на одном кристалле 10-20 элементов. Это были простейшие логические схемы, вы-полняющие логические функции: «И», «ИЛИ», «И-НЕ», «ИЛИ-НЕ» и др. Даже при небольшой номенклатуре логических МИС можно было реализовать любые узлы вычислительных систем: счетчики, сумматоры, дешифраторы, регистры и др.
Совершенствование технологии изготовления интегральных схем (ИС) позволило размещать на одном кристалле более сотни элементов, реализующих функциональные узлы цифровых устройств: триггеры, счетчики, сумматоры, мультиплексоры, дешифраторы, регистры, АЛУ и др. Однако, при этом резко сократилась универсальность применения этих интегральных схем средней степени интеграции (СИС). И, как следствие, значительно расширяется номенклатура (функциональный состав) серий ИС.
Появление больших интегральных схем (БИС), содержащих на одном кристалле более 1000 элементов еще резче сузило область применения разрабатываемых ИС. Например, БИС микрокалькулятора может выполнять 5-10 операций над двумя числами и не более того. Для нового калькулятора с дополнительными функциями или другого устройства необходимо разрабатывать новую БИС.
Дорогостоящий процесс проектирования и подготовки производства БИС может быть экономически оправдан только при изготовлении и продаже большого числа БИС. Но, учитывая их узкую функциональную специализацию, рынок сбыта БИС обычно ограничен.
Одним из путей преодоления этого противоречия является разработка универсальной микросхемы, которая после небольшой доводки самим пользователем может выполнять разнообразные функции. Такие микросхемы будут иметь большой рынок сбыта (вследствие их универсальности) и оправдают первоначальные затраты на их разработку.
Одним из первых шагов в этом направлении является разработка Программируемых Логических Матриц (ПЛМ) или Программируемых Логических Интегральных Схем (ПЛИС). Эти универсальные ПЛИС после программирования могут выполнять функции, например, счетчика, дешифратора, мультиплексора, параллельного или последовательного регистра и др. Для выполнения какой-нибудь системы понадобится несколько таких микросхем, запрограммированных на выполнение необходимых функций.
Лучшим решением является применение одной универсальной микросхемы, выполняющей перечисленные функции последовательно во времени. При этом необходимо поочередно подавать управляющие сигналы для «перепрограммирования» этой микросхемы на последовательное выполнение заданных функций. 
Последовательность управляющих сигналов располагается в запо-минающем устройстве (ЗУ) и называется ПРОГРАММОЙ.
Таким образом, мы вплотную подошли к идее программно-управляемых универсальных БИС - к МИКРОПРОЦЕССОРАМ (МП). Один и тот же микропроцессор под управлением разных программ может выполнять различные функции, что обеспечивает его высокую универсальность и, как следствие, большие рынки сбыта.
На рис. 1.1 приведена упрощенная структурная схема микропроцессорной системы (МПС).
Арифметическо-Логическое Устройство (АЛУ) выполняет арифме-тические или логические операции над одним или двумя числами (операндами).
В Памяти (или Запомина-ющем Устройстве - ЗУ) хранятся числа (операнды), над которыми выполняются арифметические и логические операции, а также перечень этих операций (команд).
Устройство Ввода-Вывода (УВВ) осуществляет связь микропроцессорной системы с внешним миром. Через УВВ вводятся в память исходные данные (операнды) и перечень команд. Через УВВ также выводятся результаты вычислений. Наиболее удобные УВВ - дисплей с клавиатурой. Возможны устройства ввода-вывода с магнитных носителей (диски, ленты), принтер и др.
Устройство Управления (УУ) организует работу всех составляющих частей микропроцессорной системы по программе, хранящейся в памяти.

1   КЛАССИФИКАЦИЯ  МИКРОПРОЦЕССОРОВ
	ПО РАЗРЯДНОСТИ
История микропроцессоров началась в 1971 году, когда фирма INTEL выпустила первый микропроцессор i4004. Он имел разрядность 4 бита, способность адресовать 640 байт памяти, тактовую частоту 108 кГц и производительность 0,06 MIPS. Такой МП уже мог работать в качестве вычислительного ядра калькулятора. Он содержал 2300 транзисторов и выполнялся по технологии с разрешением 10 мкм.
4 разряда позволяют кодировать любую десятичную цифру. Для многоразрядных десятичных чисел обработка осуществляется последовательно для каждого десятичного разряда, начиная с младшего (как на счетах). Это приводит к увеличению времени вычислений. Поэтому 4-х разрядные МП применяются только в микрокалькуляторах.
В 1974 году появился 8-ми разрядный МП i8080. Он уже имел частоту 2 МГц и адресовал 64 кБайта памяти, 6000 транзисторов по технологии 6 мкм. Процессор требовал трех источников питания (+5,  +12, -5В) и двухтактной синхронизации. Эти МП оперируют с байтами информации и поэтому применяются не только как вычислительные средства, но и как информационно-справочные структуры. На этих МП строились разнообразные терминалы, контроллеры и первые ПК (ALTAIR и др.)
Следующим этапом стал микропроцессор i8085 (5 МГц, 0,37 MIPS, 6500 транзисторов, 3-х мкм технология). Он программно совместим с i8080, но в него добавили порт последовательного интерфейса, контроллер прерываний, тактовый синхрогенератор, оставили только одно питающее напряжение +5 В.
Вершиной 8-ми разрядных процессоров стал МП Z80 фирмы ZILOG с тактовыми частотами от 2,5 до 8 МГц. Сохранив программную совместимость с i8080, в него ввели дополнительные регистры и большое количество новых команд, что позволило значительно повысить быстродействие. Популярные компьютеры SINCLAR, построенные на Z80, демонстрировали на играх графику, не уступающую IBM РС на 16-ти разрядном МП i80286.

Стремление повысить скорость вычислений приводит к повышению тактовой частоты и увеличению разрядности МП. Разрядность повышается кратно 2n (табл. 1.1). Поэтому все фирмы, выпускавшие 8-ми разрядные МП, перешли на выпуск 16-ти разрядных (см. табл. 1.1).

Таблица 1.1 – Повышение разрядности МП
Разрядн.	INTEL	MOTOROLA	ZILOG	DEC
8	I8080
I8085	M6800	Z80	
16	I8086/8088
I80186/80188
I80286	MC68000	Z8001	PDP
32	I80386
I486
PENTIUM	MC68020
MC68030	Z80000	VAX
64	PENTIUM-D, CORE,
ITANIUM	POWER G5 POWER G6		ALFA

На основе 16-ти разрядных МП началось производство принципиально новых ЭВМ - ПЭВМ : IBM PC XT/AT, APEL-MAKINTOSH и др. В нашей стране выпускались IBM-совместимые ПЭВМ:  ЕС1840, ИСКРА-1030, НЕЙРОН, ПОИСК. А также микро-ЭВМ с системой команд PDP: «Электроника-60», ДВК, «Электроника-585», бытовой компьютер «Электроника-БК-010» и др.
Появление 32-х разрядных микропроцессоров поставило ПЭВМ на их основе вне конкуренции с «большими ЭВМ». Соответствующей величины достигли: размер адресуемой памяти, разрядность обрабатываемых данных, производительность. Это позволило перевести  такие ПЭВМ под управление многозадачных операционных систем (ОС).
Повышение быстродействия ПЭВМ достигается увеличением тактовой частоты МП до сотен и тысяч МГц и параллельной обработкой данных внутри МП (процессоры PENTIUM).

	ПО АРХИТЕКТУРЕ памяти различают процессоры с :
-	ПРИНСТОНСКОЙ (ФОН-НЕЙМАНОВСКОЙ) АРХИТЕКТУРОЙ – совмещенная память команд и данных (операндов);
-	ГАРВАРДСКОЙ АРХИТЕКТУРОЙ – адресное пространство памяти разделено – отдельная память команд и отдельная память данных, потенциально эта архитектура более быстродействующая, потому что позволяет одновременно обращаться к двум независимым модулям памяти для выборки команд и данных;
Современные процессоры PENTIUM имеют классическую фон-Неймановскую архитектуру внешней памяти, но внутренняя кэш-память реализована (для повышения быстродействия) в соответствии с Гарвардской архитектурой.

	ПО СИСТЕМЕ КОМАНД И АРХИТЕКТУРЕ РАЗЛИЧАЮТ процессоры   CISC,   RISC   и   VLIW.
	CISC – Complete Instruction Set Computer – процессоры (компьютеры) с полным набором команд (инструкций), к которым относится семейство х86. Состав и назначение их регистров существенно неоднороден, широкий набор команд (с числом байтов в каждой команде от 1 до 15) усложняет декодирование инструкций, на что расходуются аппаратные ресурсы. Возрастает и число тактов, необходимое для выполнения инструкций (команд).
	RISC – Reduced (Restricter) Instruction Set Computer – процессоры (компьютеры) с сокращенной системой команд. Эти процессоры обычно имеют набор однородных регистров универсального назначения и их система команд отличается относительной простотой. Эти инструкции выполняются за минимальное (в пределе 1) число тактов синхронизации. Большинство процессоров (фирм MOTOROLA, DEC, Hewlett-Packard и др.) имеют RISC архитектуру.
В процессорах семейства х86, начиная с i486, применяется комбинированная архитектура  –  CISC-процессор имеет  RISC-ядро.
	VLIW – Very Long Instruction Word – процессоры с очень длинным словом команды (типичное значение длины командного слова – 128 бит) – основное направление развития современных RISC-процессоров (ALFA, ITANIUM). В одном слове команды может быть закодировано несколько инструкций, выполняемых одновременно (параллельно). Это объясняет название технологии – EPIC – Explicity Parallel Instruction Computing (вычисления с явным распараллеливанием инструкций).

	ЭЛЕМЕНТНАЯ БАЗА МП – определяет быстродействие, потребляемую мощность и экономические показатели.
	n-МОП структуры имеют единственное преимущество : логический элемент занимает минимальное место на кристалле. Поэтому возможно создание на одном кристалле СБИС с количеством элементов от сотен тысяч до сотен миллионов. Наиболее дешевая технология, потребляемая мощность и быстродействие – средние.
	ТТЛШ – быстродействие выше на порядок, потребляемая мощность также больше. В основном - это секционированные МП серий К589, К1804 и др.
	ЭСЛ – быстродействие еще на порядок больше, максимальная по-требляемая мощность. Поэтому используется для создания секционированных МП (серия - К1800).
	КМОП – обладает минимальным энергопотреблением, возможность работы от автономных источников питания с напряжением от 1 до 10 Вольт. Современные субмикронные технологии позволяют повысить быстродействие до 3000 МГц и более. С ростом тактовой частоты  пропорционально увеличивается потребляемая мощность. Практически все современных МП выполняются по технологии КМОП.

1.1  ОСНОВНЫЕ  СВЕДЕНИЯ  О  МИКРОПРОЦЕССОРАХ
На рис. 1.2 приведена обобщенная структурная схема микро-процессорной системы (МПС) с открытой архитектурой.
Собственно Микропроцессор (на рис. 1.2 обведен пунктиром) со-держит :
АРИФМЕТИЧЕСКО-ЛОГИЧЕСКОЕ УСТРОЙСТВО (АЛУ) выполняет арифметические и логические операции над одним или двумя операндами. Разрядность АЛУ (т.е. разрядность обрабатываемых операндов) определяет разрядность микропроцессора.
РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ (РОН) предназначены для временного хранения операндов, поскольку все действия над операндами АЛУ выполняет только тогда, когда они помещены в РОНы. В РОНы заносятся также результаты вычислений. Хранение операндов в РОНах повышает быстродействие, потому что не требуется циклов обращения к памяти.
БУФЕР ДАННЫХ (БД) – через него операнды из памяти  пересылаются в РОНы или выводятся из РОНов в память. БД организует двунаправленную ШИНУ ДАННЫХ (ШД).  Разрядность Шины Данных обычно совпадает с разрядностью АЛУ. В некоторых МП Шина Данных имеет разрядность в два раза меньшую, чем разрядность АЛУ. При этом операнды вводятся в МП и выводятся из него за два Цикла Шины, что снижает быстродействие всей системы.

По Шине Данных МП принимает также и коды команд из памяти, эти коды поступают в Устройство Управления  (УУ).
УСТРОЙСТВО УПРАВЛЕНИЯ (УУ) расшифровывает коды команд, считываемых из последовательных ячеек ОЗУ или ПЗУ, и формирует управляющие сигналы, которые определяют порядок работы всей Микропроцессорной Системы (МПС). Однако, порядок вычислений может быть изменен по результатам, получаемым в АЛУ, или по запросам внешних устройств.
Однонаправленный БУФЕР АДРЕСА  (БА) выставляет на ШИНУ АДРЕСА  (ША) код, соответствующий адресу ячейки памяти (или порта), к которой обращается МП. Код адреса формируется в одном из РОНов.
ГЕНЕРАТОР ТАКТОВЫХ ИМПУЛЬСОВ (ГТИ) – задает опорную частоту синхронизации МПС.
В ПОСТОЯННОМ ЗАПОМИНАЮЩЕМ УСТРОЙСТВЕ (ПЗУ) и ОПЕРАТИВНОМ ЗАПОМИНАЮЩЕМ УСТРОЙСТВЕ (ОЗУ) хранятся как числа (операнды), над которыми выполняются арифметические, логические и др. операции, так и коды самих операций (команды).
ПЗУ хранит и выдает постоянно хранимую информацию, содержание которой, как правило, не изменяется во время работы МПС. Это – стартовые программы, программы тестирования, стандартные подпрограммы, табличные значения различных функций, константы и др.
ОЗУ выполняет запись, хранение и считывание произвольной информации, обеспечивает хранение программ текущей обработки информации и массивов обрабатываемых данных. После выключения питания информация в ОЗУ, как правило, разрушается.
ТАЙМЕР формирует временные интервалы или стабильные после-довательности импульсов. Параметры этих интервалов или последовательностей импульсов задаются программно. Таймер необходим для синхронизации всех узлов МПС, включая внешние устройства. Таймер организует работу МПС в «реальном масштабе времени».
Через ПОРТЫ осуществляется связь МПС с внешним миром. МП обращается к регистрам портов как к ячейкам памяти, указывая адрес регистра порта и операцию, которую МП будет выполнять: запись операнда в порт или чтение данных из порта.
Открытая архитектура МПС (рис. 1.2) позволяет подключать к трем шинам (ШД, ШУ, ША) дополнительные порты или микросхемы интерфейса.

1.2  ОСОБЕННОСТИ  АРХИТЕКТУРЫ  МИКРОПРОЦЕССОРА I8086/88
Описание компонентов МП и их взаимодействие называют: АРХИТЕКТУРОЙ МИКРОПРО-ЦЕССОРА. В понятие архитектуры входят число регистров и их функции, объем подключаемой памяти, способы ее адресации и средства ввода-вывода.
Новым элементом архитектуры МП I8086/88, по сравнению со схе-мой на рис. 1.2, является Очередь Команд (ОК), которая представляет собой набор байтовых регистров и выполняет роль регистра команд. Коды команд, выбираемые из памяти через Буфер Данных, записываются в Очередь Команд, длиной 6 байт, что соответствует максимально длинному формату команды.
Наличие Очереди Команд позволяет совместить во времени выполнение команды в АЛУ и выборку следующей команды из памяти. Выборка команд приостанавливается в случаях, когда очередь команд заполнена или МП обменивается данными с памятью (или портами). Таким образом, достигается высокая плотность загрузки шины и повышение скорости выполнения программы.
 
Таблица 1.2  -  МИКРОПРОЦЕССОРЫ  СЕМЕЙСТВА  х86  ФИРМЫ  INTEL
Параметр	8086/
80С86	8088/
80С88	80186/
80С186	80188	80286	80386
DX	80386
SX	80386
SL	486DX	486SX
Год начала производства	1978	1979	1981	1981	1982	1985	1988	1990	1989	1991
Количество транзисторов	29 000	29 000			134 000	275 000		855 000	1,2 млн	
Технология	n-MOS
CMOS
3 мкм	n-MOS
CMOS
3 мкм	n-MOS
CMOS
	n-MOS
CMOS
	n-MOS
CMOS
1,5 мкм	CMOS

1,5 мкм	CMOS
	CMOS
	CMOS

1 мкм	CMOS

1 мкм
Шины, бит  - данные
                  - адрес	16
20	8
20	16
20	8
20	16
24	32
32	16
24	16
24	32
32	32
32
Разрядность АЛУ, бит	16	16	16	16	16	32	32	32	32	32
Частота синхрониз., МГц	5,    8
10	5,    8	8,    10
12.5	8,    10	10,    12
16	20,    25
33	20,    25	20,    25	25,   33
50	25,   33
Пропускная способность шины (макс.),    МБайт/с	5	2	6.25	3.12	12.5	50	16	16	160	80
Среднее кол-во тактов
 на одну операцию	12	12	10	10	4.5	4.5	4.5	4.5	2	2
Адресуемая память, МБ	1	1	1	1	16	4  ГБ	16	16	4  ГБ	4  ГБ
Виртуальная память и защита	нет	нет	нет	нет	1  ГБ
да	64  ТБ
да	64  ТБ
да	64  ТБ
да	64  ТБ
да	64  ТБ
да
Контроллер прерываний	8259А	8259А	Внутр.	Внутр.	8259А	8259А	82370	82370	μPLD	ΜPLD
Таймер-Счетчик	8253/
8254	8253/
8254	Внутр.	Внутр.	8253/
8254	8253/
8254	8253/
8254	8253/
8254	μPLD	μPLD
Контроллер кэш-памяти первого уровня						82385/
82395DX	82385SX
82395DX	Внутр.	Внутр.	Внутр.
Корпус    -  контактов
      -   тип	40
DIP	40
DIP	68
LCC/
PGA	68
LCC/
PGA	68
LCC/
PGA	132
PGA	100
FQFP	196/227
PQFP/
PGA	168
PGA	168
PGA/
PQFP
 
1.2.1  СТРУКТУРА  ПАМЯТИ  МП  I8086/88
Память для процессоров I8086/8088 представляется в виде ли-нейной последовательности из 220 байт (1 МБайт). Каждому БАЙТУ назначен уникальный адрес (беззнаковое число) в диапазоне от 0 до 220 (от 00000h до FFFFFh в шестнадцатеричной системе счисления) (см. рис. 1.4).
Любые два смежных (или соседних) байта в памяти образуют СЛОВО. У каждого из двух байт в СЛОВЕ есть свой адрес, и младший из них принимается за адрес СЛОВА.
СЛОВО состоит из 16 бит. Байт с меньшим адресом содержит младшие (Low) 8 бит слова, а байт с большим адресом – старшие (High) 8 бит.
ДВОЙНОЕ СЛОВО (4 байта) обычно используется для хранения логического адреса, и в нем располагается сначала слово смещения (в порядке L,H), а затем слово сегмента (в том же порядке L,H).
Сегментация памяти и порядок L,H – являются характерной чертой процессоров х86 фирмы INTEL.
Для экономии времени выполнения программы целесообразно размещать СЛОВА данных в памяти по четным адресам, т.к. МП передает такие слова за один цикл шины. Слово с четным адресом называется выровненным на границе слов. Слова с нечетными адресами (не выровненные) также допустимы, но для их передачи требуется два цикла шины, что снижает производительность МП.
Особенно важно иметь выровненные слова для операций со стеком, т.к. в них участвуют только слова. Следовательно, Указатель Стека (SP) необходимо всегда инициализировать на четный адрес.
Команды всегда выбираются СЛОВАМИ по четным адресам, за исключением первой выборки команды после передачи управления по нечетному адресу, когда выбирается один байт. Поток команд разделяется на байты при заполнении очереди команд внутри МП, так что выравнивание команд не влияет на производительность и поэтому не используется.

1.2.2  СЕГМЕНТАЦИЯ  ПАМЯТИ  И  ВЫЧИСЛЕНИЕ  АДРЕСОВ
Для выборки ячейки памяти в адресном пространстве 1 Мбайт необходимо формировать 20-ти битовые адреса. Однако МП оперирует с 16-ти битовыми числами и поэтому может обратиться к блоку памяти, размером не более 216 = 64 КБайт. Такой «блок» называется СЕГМЕНТОМ ПАМЯТИ. Сегменты могут располагаться в любом месте памяти. Для указания начального адреса любого сегмента используются 16-ти битовые СЕГМЕНТНЫЕ РЕГИСТРЫ. Поэтому полный 20-ти разрядный адрес начала сегмента всегда имеет еще и четыре младших нулевых бита. Из этого следует, что сегменты начинаются по адресам, кратным 16.
В любой момент времени программа может обращаться к четырем сегментам, которые называются:
	текущий Сегмент Кода (команды);
	текущий Сегмент Данных;
	текущий Сегмент Стека;
	текущий Дополнительный Сегмент.
Каждый текущий сегмент идентифицируется путем записи старших 16 бит адреса его первого байта в одном из четырех специальных СЕГМЕНТНЫХ РЕГИСТРОВ. Отметим, что сегменты в памяти могут быть соседними (смежными), не перекрывающимися, частично или полностью перекрывающимися. Физическая ячейка памяти может принадлежать одному или нескольким сегментам.
ФИЗИЧЕСКИЙ АДРЕС ячейки памяти представляет 20-ти битовое число, которое однозначно определяет положение каждого байта в про-странстве памяти 1 МБайт. В начале каждого цикла шины, связанного с обращением к памяти, физический адрес выдается на Шину Адреса.
ЛОГИЧЕСКИЙ АДРЕС ячейки памяти состоит из двух 16-ти бито-вых беззнаковых чисел:
	НАЧАЛЬНОГО АДРЕСА СЕГМЕНТА и
	ВНУТРИСЕГМЕНТНОГО СМЕЩЕНИЯ, которое определяет расстояние от начала сегмента до этой ячейки.
Для вычисления ФИЗИЧЕСКОГО АДРЕСА начальный адрес сег-мента умножается на 16 (сдвигается влево на 4 бита) и суммируется со смещением. Перенос из старшего бита, который может возникнуть при суммировании, игнорируется. Это приводит к так называемой кольцевой организации памяти, при которой за ячейкой с максимальным адресом FFFFF следует ячейка с нулевым адресом. Аналогичную кольцевую организацию имеет и каждый сегмент.
Сегментная структура памяти обеспечивает возможность создания позиционно независимых или динамически перемещаемых программ, что необходимо в мультипрограммной среде для эффективного использования оперативной памяти. Это позволяет произвольно перемещать программу в адресном пространстве памяти, изменяя только содержимое сегментных регистров.
1.2.3  СТРУКТУРА  ВВОДА-ВЫВОДА
Система на базе МП I8086/88 взаимодействует с внешним миром через, так называемые, ПОРТЫ. Через них МП может получать информацию о внешних событиях, считывая байт или слово из регистра ПОРТА, и записывать в регистры ПОРТА операнды, управляющие другими внешними событиями.
МП может обращаться к 216 (64К) 8-ми битовым портам или к 32К 16-ти битовым портам примерно так же, как и к ячейкам памяти. Любые два смежных 8-ми битовых порта можно считать 16-ти битовым портом аналогично слову памяти.
По команде IN номер порта выдается на адресную шину. Байт (или слово) из выбранного порта поступает через шину данных в аккумулятор AL (или AX). По команде OUT номер порта выдается на адресную шину, а данные из регистра AL (или AX) поступают на шину данных. МП командами IN и OUT только инициирует передачу данных, а внешнее (периферийное) устройство само должно распознавать обращение к нему.
Внешние порты могут адресоваться двумя методами (способами):
	адрес порта можно задать абсолютной однобайтовой величиной (в этом случае число адресуемых портов будет 256);
	в поле операнда можно указать регистр DX, при этом содержимое двухбайтового регистра DX используется для адресации порта и, та-ким образом, возможно обращение к 64К портам.
В любом случае при выводе аккумулятор является источником, а при вводе – приемником информации. Если указан регистр AX, то обмен идет словами, если регистр AL - байтами.
Если адрес порта четный, – то передача младшего байта идет по младшим разрядам шины данных (D0D7), а старший байт (при обмене словами) – по старшим разрядам шины данных (D8D15).
Если адрес порта нечетный, младший байт передается по старшим разрядам шины данных (D8D15), а старший байт передается во втором цикле шины по младшим разрядам (D0D7). Поэтому для уменьшения времени обмена пословными операндами адреса портов необходимо выбирать четными.

1.2.4  ПРОГРАММНАЯ  МОДЕЛЬ  МП  I8086/88
МП имеет 14 регистров (по 16 бит), которые условно разделены на 4 набора (рис. 1.5).
	РЕГИСТРЫ ОБШЕГО НАЗНАЧЕНИЯ (РОН) – AX, BX, CX, DX – служат, в основном, для хранения операндов арифметических и логических операций. Младшую и старшую половины каждого РОНа можно использовать либо отдельно (как два 8-ми битовых РОНа), либо совместно (как 16-ти битовый РОН). В связи с этим каждой половине РОНа дано свое название: младшие (Low), половины называются – AL, BL, CL, DL; а старшие (High) – AH, BH, CH, DH. Двойственный характер РОНов позволяет одинаково легко оперировать БАЙТАМИ или СЛОВАМИ.


	УКАЗАТЕЛЬНЫЕ и ИНДЕКСНЫЕ РЕГИСТРЫ – содержат внутрисегментное 16-ти битовое смещение адресов операндов:
SP (Stack Pointer) – указатель стека;
BP (Base Pointer) – базовый регистр;
SI (Source Index) – индекс источника;
DI (Destination Index) – индекс назначения.
Регистры в командах могут адресоваться явно, но использование ряда регистров неявно подразумевается в некоторых командах:
AX – умножение, деление, ввод и вывод слова;
AL – умножение, деление, ввод и вывод байта; десятичная арифметика, трансляция (XLAT);
AH – умножение и деление байта;
ВХ – базовый адрес, трансляция;
СХ – счетчик циклов и указатель длины строковых операций;
CL – сдвиги с указанием переменной;
DX – умножение и деление слова, ввод и вывод с косвенной адресацией;
SP – операции со стеком;
SI, DI – цепочечные (строковые) команды.
	СЕГМЕНТНЫЕ РЕГИСТРЫ – CS, DS, SS, ES – это 16-ти битовые регистры, задающие начальные адреса конкретных сегментов:
CS – (Code Segment) – текущий Сегмент Кода команды;
DS – (Data Segment) – текущий Сегмент Данных;
SS – (Stack Segment) – текущий Сегмент Стека;
ES – (Extra Segment) – текущий Дополнительный Сегмент (данных).
Выборки всех команд осуществляются из текущего Сегмента Кода Команды (CS). Внутрисегментное смещение адреса команды формируется в УКАЗАТЕЛЕ (СЧЕТЧИКЕ) КОМАНДЫ – IP – (Instruction Pointer).
Использование СЕГМЕНТНЫХ РЕГИСТРОВ для различных типов обращения к памяти приведено в табл. 1.3.
Стековые команды всегда обращаются к текущему Сегменту Стека по логическому адресу SS:SP. Если при вычислении адреса ЕА используется регистр ВР, то обращение производится также к Стековому Сегменту. В последнем случае принцип стека «первый пришел - последний вышел» игнорируется и ячейки Стекового Сегмента рассматриваются как ОЗУ с произвольной выборкой.
Операнды, как правило, размещаются в текущем Сегменте Данных по адресу DS:EA. Однако программист может заставить МП обратиться к переменной, находящейся в другом сегменте. В мнемонических обозначениях команд смена сегмента указывается следующим образом:
MOV   AX, CS:[BX] ;  пересылка в AX слова из кодового сегмента со  смещением из BX.

По умолчанию цепочка-источник находится в текущем Сегменте Данных (DS), а ее смещение задается регистром SI. Цепочка-получатель обязательно располагается в текущем Дополнительном Сегменте (ES), а смещение берется из регистра DI.

Таблица 1.3 – Использование сегментных регистров
Тип обращения к памя-ти	Сегмент по умолчанию	Вариант	Смещение
Выборка команды
Стековая операция
Переменная
Цепочка-источник
Цепочка-приемник
BP как базовый регистр	CS
SS
DS
DS
ES
ES	Нет
Нет
CS, SS, ES
CS, SS, ES
Нет
CS, SS, DS	IP
SP
EA *
SI
DI
EA *
Примечание: * – EA – эффективный адрес, вычисляемый в соответствии с заданным методом адресации.

	В РЕГИСТРЕ ФЛАГОВ – FLAGS – формируются 9 флагов (признаков), которые применяются для регистрации состояния (флаги состояния) и управления действиями процессора (флаги управления). 
Флаги состояния обычно устанавливаются после выполнения арифметических или логических команд, отражая определенные свойства их результатов. К ним относятся:
•	CF – (Carry Flag) – флаг переноса, показывающий перенос (заем) из старшего бита при арифметических операциях, а также значение вы-двигаемого бита при сдвиге операнда;
•	AF – (Auxiliary Flag) – флаг вспомогательного переноса (заема) в младшей тетраде для десятичной арифметики;
•	OF – (Overflow Flag) – флаг арифметического переполнения, опреде-ляющий (при OF=1) выход знакового результата за границы диапазона;
•	ZF – (Zero Flag) – флаг нуля, показывающий (при ZF=1) нулевой ре-зультат команды;
•	SF – (Sign Flag) – флаг знака, дублирует значение старшего бита результата, который при использовании дополнительного кода соответствует знаку числа;
•	PF – (Parity Flag) – флаг паритета (четности), фиксирующий (при PF=1) наличие в младшем байте результата четного числа единичных бит.
К флагам управления относятся:
•	DF – (Direction Flag) – флаг направления, показывающий направление прохождения цепочек в цепочечных командах: от меньших адресов (при DF=0) или - от больших (при DF=1);
•	IF – (Interrupt-enable Flag) – флаг разрешения прерываний – разрешает (IF=1) или запрещает (IF=0) выполнение прерываний по запросам на входе INTR; значение флага IF не влияет на восприятие внешних прерываний по входу NMI, а также внутренних (программных) прерываний, выполняемых по команде INT;
•	TF – (Trap Flag) – флаг трассировки – переводит МП в пошаговый режим (при TF=1) для отладки программы.
1.3  ПРОЦЕССОР  I80286
До появления IBM PC в 1981 году все микрокомпьютеры имели закрытую архитектуру. Это означало, что любая их модификация требовала достаточно высокой специальной подготовки в области электроники. Совершенствование микрокомпьютера оставалось уделом профессионалов-разработчиков, а пользователям приходилось довольствоваться тем, что они приобретали. С того момента, когда на корпусе микрокомпьютера при его сборке был, завернут последний винт, система была обречена на необратимое старение.
Фирма IВМ произвела в этой области настоящий переворот, перенеся модульный принцип конструирования в структуру персональных компьютеров. Именно в этом смысле их ОТКРЫТАЯ АРХИТЕКТУРА допускает замену дополнительных устройств на новые при старении прежних. Это качество поддерживается строго соблюдаемым правилом, выработанным производителями аппаратных и программных средств: ВСЕ НОВЫЕ УСТРОЙСТВА И ПРОГРАММЫ ДОЛЖНЫ БЫТЬ СОВМЕСТИМЫМИ ПО ПРИНЦИПУ «СВЕРХУ-ВНИЗ», т.е. последующие версии должны обслуживать все ранее существующие.
Поэтому пользователь имеет возможность заменять один или не-сколько компонентов, не изменяя всей системы. Например, при появлении новых видеомониторов или новых дисковых накопителей - возможно обновление «по частям». Совершенствование РС становится уделом самого пользователя, который лучше представляет, что требуется от системы. Ремонт компьютера сводится к замене одного крупного модуля, что доступно неквалифицированному в области электроники пользователю.
Именно вследствие удачного конструктивного решения через короткий срок началось лавинообразное нарастание производства РС, полностью совместимых с оригинальной моделью. Эти семейства микрокомпьютеров различных фирм получили название «клона» IВМ РС.
Фирма IВМ инициирует разработку очередного РС, а затем другие производители всесторонне совершенствуют каждую из моделей. Поэтому некоторые модели «клона» IВМ РС оказывались в конечном итоге лучше своего прототипа (по быстродействию, дизайну и т.д.).
Процессор I80286 (рис. 1.6), выпущенный в 1982 году, представляет второе поколение 16-ти разрядных процессоров. Процессор имеет расширенную систему команд, которая включает все команды i8086/88 и несколько новых команд общего назначения, а также команды управления защитой. I80286 имеет специальные средства для работы в многопользовательских и многозадачных системах. Самым существенным отличием от I8086/88 является механизм управления виртуальной адресацией памяти, который обеспечивает 4-х уровневую систему защиты.
Процессор I80286 может работать в двух режимах:
	REAL ADDRESS MODE – режим реальной адресации (или просто реальный режим – REAL MODE) полностью совместимый с I8086. В этом режиме возможна адресация до 1 Мбайта физической памяти (на самом деле, за счет «удачной» ошибки, почти на 64 Кбайта больше).
	PROTECTED VIRTUAL ADDRESS MODE – защищенный режим виртуальной адресации (или просто – защищенный режим – PROTECTED MODE). В этом режиме процессор позволяет адресовать до 16 Мбайт физической памяти, через которые могут отображаться до 1 Гбайта виртуальной памяти каждой задачи. Система команд в этом режиме также включает набор команд 8086, расширенный для аппаратной реализации функций супервизора многозадачной ОС и виртуальной памяти.

Переключение в защищенный режим осуществляется одной коман-дой достаточно быстро. Обратное переключение в реальный режим воз-можно только через аппаратный сброс процессора, что требует значительных затрат времени.
По составу и назначению В РЕАЛЬНОМ РЕЖИМЕ регистры I80286 в основном совпадают с регистрами I8086/88. Изменения касаются назначения бит регистра флагов и использования сегментных регистров в защищенном режиме. Как и I8086, процессор I80286 имеет 16-ти битовую шину данных и очередь команд 6 байт. За счет улучшения архитектуры сокращено среднее количество тактов выполнения операций.
Под управлением MS DOS процессор I80286 обычно используется в реальном режиме работы. Защищенный режим используют многозадачные ОС типа XENIX, UNIX, OS/2, NET-WARE-286, MS WINDOS.

1.3.1  РЕГИСТРЫ  ПРОЦЕССОРА  I80286.
По набору программно доступных регистров I80286 повторяет процессор I8086/88 (см. рис.1.4), но имеет дополнительные биты в РЕГИСТРЕ ФЛАГОВ (FLAGS) и РЕГИСТР СОСТОЯНИЯ МАШИНЫ (MSW – MACHINE STATE WORD) (рис. 1.7).
Биты 0 – 11 регистра флагов совпадают с флагами МП  I8086/88. Дополнительные биты, необходимы для защищенного режима виртуальной адресации:
	IOPL – (Input/Output Privilege Level) – уровень привилегий ввода-вывода;
	NT – (Nested Task Flag) – флаг вложенной задачи.


Регистр MSW управляет режимом процессора и использует биты:
	PE – (Protection Enable) – разрешение защиты. Установка этого флага переводит процессор в защищенный режим. Возврат в реальный режим (сброс флага) возможен только по сигналу RESET.
	MP – (Monitor Processor Extension) – мониторинг сопроцессора, позволяет вызывать исключение 7 по каждой команде WAIT.
	EM – (Processor Extension Emulated) – эмуляция сопроцессора. Уста-новка этого флага вызывает появление исключения 7 при каждой ко-манде, относящейся к сопроцессору, что позволяет прозрачно осу-ществлять его программную эмуляцию.
	TS – (Task Switch) – переключение задач. При установке этого флага следующая команда, относящаяся к сопроцессору, вызовет исклю-чение 7, что позволяет программно определить, относится ли контекст сопроцессора к текущей задаче.
Сочетание: MP=0, EM=0, TS=0, устанавливаемое по аппаратному сбросу, обеспечивает полную совместимость с I8086/88 (исключение 7 не вырабатывается). Сочетание: MP=1, EM=0 используется при наличии сопроцессора I80287, а MP=0, EM=1 – его программной эмуляции.


1.3.2  ОРГАНИЗАЦИЯ  ПАМЯТИ  I80286
Шина адреса – разрядностью 24 бита – позволяет адресовать 224 = 16 Мбайт физической памяти, но в реальном режиме доступен только 1 Мбайт, начинающийся с младших адресов. С программной точки зрения память также организуется в виде сегментов, но управление сегментацией имеет существенные раз-личия для реального и защищенного режимов.
В РЕАЛЬНОМ РЕЖИМЕ по адресации памяти декларируется полная совместимость с процессором I8086, который своей 20-ти битовой адресной шиной охватывает пространство физической памяти в 1 Мбайт. На самом деле I80286 имеет ошибку, «узаконенную» и в следующих поколениях процессоров. При вычислении физического адреса возможно возникновение переполнения, которое с 20-ти битовой шиной адреса просто игнорируется. Однако у процессора I880286 на выводе А20 в этом случае установится единичное значение, что соответствует адресу из второго Мегабайта физической памяти. Для обеспечения полной программной совместимости с I8086 в схему компьютера (на материнской плате) был введен специальный вентиль GATE A20, принудительно обнуляющий бит А20 системной шины адреса.
В отличии от I8086 процессор I80286 имеет средства контроля за переходом через границу сегмента, работающие и в реальном режиме. При попытке адресации к слову, у которого старший байт выходит за границы сегмента, процессор вырабатывает прерывание – исключение 13 (0Dh) – Segment Overrun Exceotion. При попытке выполнить инструкцию ESCAPE (команды сопроцессора) с операндом памяти, не умещающимся в сегменте, вырабатывается исключение 9 - Procesor Extension Segment Ovrrun Interrupt.
В ЗАЩИЩЕННОМ РЕЖИМЕ работают все режимы адресации, допустимые для I8086 и реального режима I80286. Отличия касаются определения сегментов:
	сегментные регистры – CS, DS, SS, ES – хранят не сами базовые адреса сегментов, а СЕЛЕКТОРЫ, по которым из таблицы дескрипторов, хранящейся в ОЗУ, извлекаются ДЕСКРИПТОРЫ СЕГМЕНТОВ;
	дескриптор описывает базовый адрес, размер сегмента (1 ÷ 64 Кбайта) и его атрибуты;
	базовый адрес сегмента имеет разрядность 24 бита, что и обеспечивает адресацию 16 Мбайт физической памяти.











2   МИКРОПРОЦЕССОР  I80386
Основные цели разработки I80386 – пропорциональное улучшение всех технических характеристик при сохранении программной совместимости в объектных кодах с МП   I8086/186/286.
Основные преимущества:
	полная 32-х разрядная архитектура;
	возможность параллельной работы нескольких программ, работающих под управлением любой комбинации операционных систем PC-DOS, MS-DOS, UNIX и XENIX;
	совместимость снизу-вверх по архитектуре с МП 8086, 186, 286.
Основные технические характеристики.
	Разрядность обрабатываемых данных – 1; 8; 16; 32 бит.
	Максимальный объем прямо адресуемой памяти – 4 Гбайт (232).
	Максимальный объем виртуальной памяти – 64 Тбайт (246).
	Производительность – 34 млн. команд/с (средняя) при 16 МГц.
	Тактовая частота – 16 МГц; 25 МГц; 33 МГц
	Максимальный размер сегмента – 4 Гбайт.
	Размер страницы – 4 Кбайт.
	Количество уровней привилегированности – 4.
	Количество выводов корпуса – 132.
	Степень интеграции – 275 тыс. транзист.
	Технология – CHMOS III (1,5мкм).
	Размер кристалла – 9,75*10,4 мм.

2.1  АРХИТЕКТУРА  32-х РАЗРЯДНЫХ  МИКРОПРОЦЕССОРОВ  386+
Базовая архитектура 32-х разрядных процессоров (обозначаемых: 386+) является общей для процессоров фирмы INTEL – 386, 486, PENTIUM и его модификаций.
МП состоит из 3 основных частей:		устройства обработки;
		устройства управления ЗУ;
		интерфейсного блока.
УСТРОЙСТВО ОБРАБОТКИ состоит из исполнительного устрой-ства (операционной части) и блока команд (управляющей части). Содер-жит 8 32-х разрядных РОН, 64-х битовый циклический сдвигатель. Умножение и деление осуществляется на 1 бит за цикл. Алгоритм умножения такой, что процесс прекращается, когда наиболее значащий бит, умножается на все нули. Типичное время умножения 32-х разрядных чисел около 1 мкс (для процессора I80386).
УСТРОЙСТВО УПРАВЛЕНИЯ ЗУ состоит из сегментного и стра-ничного блоков. Сегментный блок позволяет работать с логическими адресами со всеми вытекающими отсюда преимуществами. Страничная организация используется внутри сегмента и управляет физическими адресами. Каждая задача может иметь до 16381 (214) сегмента до 4 Гбайт каждый (232), т.е. виртуальная память может быть размером 64 Тбайт (246).
ИНТЕРФЕЙСНЫЙ БЛОК обеспечивает взаимодействие с внешними устройствами, включая автоматическое управление разрядностью шины, и формирование сигналов активности байтов.
МП 386+ могут функционировать в трех режимах:
	REAL ADDRESS MODE – режим реальной адресации (РРА) – характеризуется тем, что МП работает как очень быстрый 8086 с 32-битовым расширением; в этом режиме возможна адресация 1 Мбайта физической памяти (на самом деле,  как у I80286, – почти на 64 Кбайта больше);
	PROTECTED ADDRESS MODE – режим защищенной виртуальной адресации (РВА) – реализует все достоинства МП (режим параллельного выполнения нескольких задач несколькими 8086 – по одному на задачу). На одном процессоре в таком режиме могут одновременно исполняться несколько задач с изолированными друг от друга реальными ресурсами. При этом использование физического адресного пространства памяти управляется механизмами сегментации и трансляции страниц. Попытки выполнения недопустимых команд, выхода за рамки отведенного пространства памяти и разрешенной области ввода-вывода контролируются системой защиты.
	VIRTUAL 8086 MODE – режим виртуального процессора 8086 (со-кращенно – V86). Прикладная программа, которая выполняется в этом режиме, полагает, что она работает на процессоре 8086. Однако, некоторые команды, в основном связанные с управлением вводом-выводом, программе выполнять запрещается, поэтому при нарушении защиты генерируется прерывание и управление передается операционной системе.
В архитектуру процессора введены средства отладки и тестирования.


2.1.1   ПРОГРАММНАЯ  МОДЕЛЬ  32-х  РАЗРЯДНЫХ  
ПРОЦЕССОРОВ  (386+)
МП  386+  имеет 31 регистр (у  PENTIUM+  – 32 регистра), разбитые на следующие группы:
	регистры общего назначения;
	сегментные регистры;
	указатель команд и регистр флагов (признаков);
	управляющие регистры;
	регистры системных адресов;
	отладочные регистры;
	тестовые регистры.
Набор РЕГИСТРОВ ОБЩЕГО НАЗНАЧЕНИЯ (рис. 2.1) вклю-чает соответствующие регистры процессоров I8086 и I80286. Все эти регистры, кроме сегментных, имеют разрядность 32 бита и к прежнему обозначению их имен добавилась приставка E (Extended – расширен-ный). Отсутствие приставки Е в имени означает ссылку на младшие 16 бит расширенных регистров. Обратиться к старшим 16-ти битам расширенных регистров ни одна команда не может. Как и в I8086, возможно независимое обращение к младшему и старшему байтам регистров AX, BX, CX, DX.
Архитектура МП 386+ позволяет непосредственно обращаться к 6 сегментам (размером до 232 = 4 Гбайт каждый) при помощи специальных селекторов, которые загружаются в сегментные регистры программно. Содержимое РОНов, селекторов, указателя команд и регистра флагов (признаков) зависит от выполняемой задачи и перегружаются программно операционной системой при переключении задач.
Остальные регистры МП используются, главным образом, для упрощения проектирования и отладки операционной системы.
Регистры общего назначения (РОН) – используются для хранения операндов и адресов. Могут работать с операндами, имеющими длину 1, 8, 16, 32 и 64 бита или с битовыми полями длиной от 1 до 32 бит.
УКАЗАТЕЛЬ КОМАНД – EIP – хранит смещение, которое всегда складывается со значением кодового сегментного регистра (CS) и определяет адрес следующей команды. При 16-ти битовой адресации используются только младшие 16 бит (IP).
РЕГИСТР ФЛАГОВ (признаков) – EFLAGS (рис. 2.2) – отражает состояние МП. При использовании только 16-ти младших разрядов - регистр флагов совместим с предыдущими моделями МП (см. рис. 1.5 и рис. 1.7).
На рис. 2.2 обозначены символами:
x – системный флаг;
s – флаг состояния;
c – управляющий флаг.



0	0	0	0	0	0	0	0	0	0	ID	VI
P	VI
F	AC	VM	RF	0	NT	IO  PL	OF	DF	I
F	TF	SF	ZF	0	AF	0	PF	1	CF
										x	x	x	x	x	x		x	x	x	x	c	x	x	s	s		s		s		s


НАЗНАЧЕНИЕ БИТ РЕГИСТРА ФЛАГОВ (ПРИЗНАКОВ).
ID – (Id Flag) – флаг доступности команды идентификации CPUID (PENTIUM+ и некоторые 486+).
VIP – (Virtual Intterruptt Pending) – виртуальный запрос прерывания (PENTIUM+).
VIF – (Virtual Interrupt Flag) – виртуальная версия флага IF (разрешения прерывания) для многозадачных систем (PENTIUM+).
AC – (Alignment Check) – флаг контроля выравнивания. При исполнении программ на уровне привилегий 3 в случае обращения к операнду, не выровненному по соответствующей границе (2,4,8 байт), и при установленном флаге АС произойдет исключение-отказ 17 с нулевым кодом ошибки. На уровнях привилегий 0,1,2 контроль выравнивания не производится (486+).
VM – (Virtual 8086 Mode) – обеспечивает режим виртуального 8086 внутри режима виртуальной адресации. При VM = 1 МП будет переключен в режим виртуального I8086, при этом управление перезагрузкой сегментов будет осуществляться подобно I8086, но с исключением 13 недействительных привилегированных команд. VM может быть установлен в РВА командой IRET (если уровень приоритета = 0) и задача переключается на более низший уровень. Команда POPF не влияет на VM.  Команда PUSHF всегда сбрасывает VM в 0, если она выполняется в режиме виртуального 8086. Содержимое регистра признаков будет копироваться при прерываниях или сохраняться при переключении задачи, если прерывание будет выполняться в режиме виртуального 8086 (386+).
RF – (Resume Flag) – флаг возобновления – используется совместно с отладочными регистрами контрольных точек (прерываний) или пошагового режима. С его помощью проверяется ход выполнения команд в отладочном режиме (процесс отладки). Если установлен RF = 1, то это позволяет игнорировать ошибки, возникающие при отладке до следующей команды. RF автоматически сбрасывается в 0 при успешном выполнении команды (ошибки не обнаружены), за исключением команд IRET и POPF, а также JMP, CALL и INT при переключении задач. Эти команды устанавливают RF в состояние, определяемое состоянием памяти. Например, в конце выполнения подпрограммы обслуживания контрольной точки команда IRET может установить RF в состояние, соответствующее значению регистра признаков, хранимого в стеке без повторной установки RF в 1 (386+).
Остальные флаги соответствуют флагам МП I80286:
NT – (Nested Task Flag) – флаг вложенной задачи (гнездования) ис-пользуется только в режиме виртуального адреса (РВА). NT=1 указывает, что текущая задача является вложенной по отношению к другой задаче. Этот бит устанавливается и сбрасывается при вызове других задач. NT проверяется командой IRET для определения внутри заданного или внешнего по отношению к данной задаче возврата. Команды POPF и IRET будут устанавливать NT в соответствии с тем, что хранится в стеке для любого уровня привилегированности (286+).
IOPL – (Input/Output Privilege Level) – используется только в РВА. IOPL указывает максимальную величину текущего приоритета, обеспечивающую выполнение команд ввода-вывода (В – В) без реакции на 13 ошибку. Этот признак также обеспечивает выбор IF, когда новое значение выталкивается из стека в регистр признаков. POPF и IRET могут изменять IOPL поле, когда IOPL = 0 (CPL=0). При переключении задач IOPL может изменяться всегда при переписи TSS (286+).

МП 386+ содержат 6 16-ти битовых СЕГМЕНТНЫХ РЕГИСТРОВ (у предыдущих поколений – только 4 сегментных регистра), хранящих значение селектора и определяющих значения начальных (базовых) адресов сегментов. В РВА каждый сегмент может изменяться в диапазоне от одного байта до максимального значения физического адресного пространства 4 Гбайта. В РРА размеры сегмента ограничены размером 64 Кбайт.
ДЕСКРИПТОРНЫЕ РЕГИСТРЫ СЕГМЕНТОВ программно не видимы, но они неразрывно связаны с соответствующими сегментными регистрами (рис. 2.3). Каждый дескрипторный регистр хранит 32-х битовый базовый адрес сегмента, 20-ти битовый размер сегмента и другие необходимые атрибуты сегмента.


Когда значение селектора загружается в сегментный регистр, в ре-жиме виртуальной адресации (РВА) соответствующий дескрипторный регистр аппаратными средствами процессора автоматически загружается информацией из дескрипторной таблицы.
В РВА базовый адрес, размер и атрибуты сегментного дескриптора определяется селектором. 32-х битовый БАЗОВЫЙ АДРЕС сегмента становится компонентом формирования исполнительного адреса, 20-ти битовый РАЗМЕР СЕГМЕНТА используется для проверки границ рабочей области, а АТРИБУТЫ проверяются на соответствие типу запрашиваемой памяти (типу обращения).
В РРА непосредственно используется только базовый адрес (со сдвигом на 4 разряда влево), а размеры сегмента и атрибуты постоянны (фиксированы для РРА).

2.2  ТИПЫ  ДАННЫХ  32-х  БИТОВЫХ  ПРОЦЕССОРОВ  386+
32-х разрядные процессоры фирмы INTEL (386+) работают с целыми двоичными числами длиной 8, 16 или 32 бита и двоично-кодированными десятичными числами (BCD-числами) длиной 8 бит. Двоичные числа допускают интерпретацию как целых без знака и целых со знаком, а десятичные (BCD) – знака не имеют.
В ДВОИЧНЫХ ЦЕЛЫХ ЧИСЛАХ БЕЗ ЗНАКА все разряды считаются значащими (см. рис. 2.4). ДВОИЧНЫЕ ЦЕЛЫЕ ЧИСЛА СО ЗНАКОМ представляются в дополнительном коде. Старший бит является знаковым (рис. 2.4): S = 0 – число положительное, S = 1 – число отрицательное.
Отметим, что команды умножения знаковых и беззнаковых 32-х битовых целых чисел образуют 64-х битовое произведение, а ко-манды деления рассчитаны на 64-х битовое делимое. 
ДЕСЯТИЧНЫЕ ЧИСЛА представляются в упакованном и неупакованном форматах. Упакованный формат предполагает, что байт содержит две десятичные цифры в коде с весами 8421, занимающих младшую и старшую тетрады. Диапазон представимых BCD-чисел – 099 (рис. 2.4). В неупакованном формате байт содержит одну десятичную цифру, которая обычно изображается в символьном коде ASCII.
Новые команды процессоров 386+ поддерживают БИТОВЫЕ ДАННЫЕ:
•	БИТ – одиночный двоичный разряд.
•	БИТОВОЕ ПОЛЕ – группа до 32-х битов.
•	ЦЕПОЧКА БИТОВ (СТРОКА) – набор последовательных битов, длиной до 4 Гбит.
Процессор может легко оперировать с цепочками бит, байт, слов и двойных слов. Под ЦЕПОЧКОЙ (string) понимается последовательность практически любой длины отдельных, но взаимосвязанных элементов данных, ХРАНЯЩИХСЯ ПО СОСЕДНИМ АДДРЕСАМ.
УКАЗАТЕЛИ применяются для обращения к некоторым объектам в памяти, например, адресам подпрограмм. Близкие (NEAR) или внутрисегментный указатель (см. рис. 2.4) – это 16-ти битовое или 32-х битовое смещение внутри текущего сегмента. Далекий (FAR) или межсегментный указатель применяется в тех случаях, когда программа осуществляет передачу управления в другой сегмент. Такой указатель определяет новый сегмент (с помощью селектора) и 16-ти или 32-х битовое смещение внутри этого сегмента.


При размещении операндов в памяти необходимо учитывать, что процессоры 386+ не накладывают ограничения на размещение данных. Однако производительность процессора повышается, если слова размещены по четным адресам, а двойные слова – по адресам, кратным четырем. Такой принцип называется ВЫРАВНИВАНИЕ АДРЕСОВ по границам слов или двойных слов. Выравнивание особенно важно для стека, который работает только со словами или двойными словами.

2.3  СИСТЕМА  КОМАНД  ПРОЦЕССОРОВ  386+
Система команд включает 9 групп команд:
1.	передачи данных;
2.	арифметические и логические;
3.	сдвига;
4.	обработки строк;
5.	манипуляции битами;
6.	передачи управления;
7.	поддержки языков высокого уровня;
8.	поддержки операционной системы;
9.	управления процессором.

Команды могут содержать от 0 до 3 операндов, размещенных в регистрах, памяти или непосредственно в команде. Большинство без-операндных команд – однобайтовые. Однооперандные команды обычно – двухбайтовые. Средняя длина команды – 3,2  байта. Это позволяет хранить в среднем 5 команд в 16-ти байтовой ОЧЕРЕДИ КОМАНД БЛОКА ОПЕРЕЖАЮЩЕЙ ВЫБОРКИ. При использовании двух операндов возможны следующие типы взаимодействия:
•	регистр → регистр;
•	память → регистр;
•	регистр → память;
•	непосредственный операнд → регистр;
•	непосредственный операнд → память;
•	память → память.

Операнды могут быть 8, 16 или 32-х разрядными. Когда выполняются команды, написанные для 386+, операнды имеют длину 8 или 32 бита, когда – для 80286 и 8086 – операнды 8 или 16 бит. Ко всем инструкциям могут добавляться префиксы, которые изменяют длину операндов (т.е. позволяют использовать 32-х битовые операнды в 16-ти битовых командах или 16-ти битовые операнды в 32-х битовых командах).

2.3.1  РЕЖИМЫ  (МЕТОДЫ)  АДРЕСАЦИИ
Процессоры 386+ обеспечивает 13 режимов адресации, которые рассчитаны на эффективное выполнение программ, написанных на языках высокого уровня (ЯВУ) типа:  С++,  Фортран  и  др..

НЕЯВНАЯ АДРЕСАЦИЯ. Операнд адресуется неявно, если в ко-манде нет специальных полей для его определения, т.е. операнд задается полем команды. В ассемблерных кодах с неявной адресацией поле операнда пустое. Примеры команд с неявной адресацией:
AAA		; Коррекция регистра AL после сложения
CMC		; Инверсия флага переноса
STD		; Установить в 1 флаг направления.

РЕЖИМ  РЕГИСТРОВОЙ  АДРЕСАЦИИ   и
РЕЖИМ НЕПОСРЕДСТВЕННОЙ АДРЕСАЦИИ – предназна-чены, соответственно, для адресации одного из регистров регистрового блока или непосредственного операнда в команде с разрядностью  8, 16 или  32 бита :
INC		esi		; Инкремент регистра ESI
SUB		ECX, ECX	; Сбросить регистр ECX
MOV		EAX, CR0	; Передать в EAX содержимое CR0.
MOV		EAX, 0F0F0F0F0h	; Загрузить константу в EAX
AND		AL, 0FH	; Выделить младшую тетраду регистра AL
BT		EDI, 3	; Передать во флаг CF третий бит
; регистра EDI

Имеется 10 режимов АДРЕСАЦИИ ПАМЯТИ. Исполнительный адрес включает в себя два компонента адреса ячейки памяти – сегмент и эффективный адрес (внутрисегментное смещение). ЭФФЕКТИВНЫЙ АДРЕС  (ЕА)  вычисляется суммированием следующих элементов :
•	СМЕЩЕНИЕ (отклонение) – целая  8-ми или  32-х битовая величина со знаком, непосредственно задаваемая в команде (16-ти битовые отклонения могут использоваться при помощи префикса);
•	БАЗА – содержимое любых РОНов. Базовые регистры обычно ис-пользуются компиляторами в качестве точки отсчета локальной области памяти (начальный адрес таблицы и др.);
•	ИНДЕКС – содержимое любых РОНов, исключая ESP. Индексные регистры используются для доступа к элементам строк или массивов.
•	МНОЖИТЕЛЬ f – указывает шаг (1, 2, 4 или 8) для индексного регистра. ШАГ ИНДЕКСАЦИИ позволяет успешно адресовать массивы или структуры, содержащие многобайтовые операнды.

EA  =  БАЗА  +  ИНДЕКС * (ШАГ  ИНДЕКСАЦИИ)  +  ОТКЛОНЕНИЕ.

Вычисление эффективного адреса (ЕА) практически не ухудшает производительность процессора из-за использования конвейерного режима.

РЕЖИМЫ  АДРЕСАЦИИ  ПАМЯТИ :
ПРЯМАЯ АДРЕСАЦИЯ – смещение (отклонение) адреса операнда содержится в 8, 16 или 32 разрядах команды :
MOV		AL, [2000h]			; Передать байт в регистр AL
INC		dword prt [123456h]	; Инкремент двойного слова
; в памяти.

РЕГИСТРОВЫЙ КОСВЕННЫЙ МЕТОД АДРЕСАЦИИ – базо-вый или индексный регистр содержат адрес операнда :
MOV		AL, [ECX]		; Передать в AL байт по адресу из ECX
DEC		word prt [ESI]	; Декремент слова по адресу из ESI.

БАЗОВАЯ АДРЕСАЦИЯ – базовый регистр суммируется с откло-нением:
MOV		EAX, [EBX+4]	; Передать двойное слово из памяти
ADD		[ECX+10h], DX	; Прибавить к слову в памяти.

ИНДЕКСНАЯ АДРЕСАЦИЯ – индексный регистр (любой РОН кроме ESP) суммируется с отклонением :
SUB		array[ESI], 2	; Вычесть 2 из элемента массива
IMUL		vector[ECX]	; Умножить EAX на элемент мас-сива.
ИНДЕКСНАЯ АДРЕСАЦИЯ С ШАГОМ – содержимое индекс-ного регистра умножается на шаг «f» и суммируется с отклонением :
MOV		EAX, vec[ECX*4]		; Переслать в EAX двойное слово
; из массива.

БАЗОВО-ИНДЕКСНАЯ АДРЕСАЦИЯ. – ЕА = БАЗА + ИНДЕКС :
ADD	EAX, [EBX][ESI]		; Прибавить к EAX двойное
; слово  из памяти.

БАЗОВО-ИНДЕКСНАЯ АДРЕСАЦИЯ С ШАГОМ. –
ЕА = БАЗА + ИНДЕКС * ШАГ:
INC		word prt [EDX][EDI*4]	; Инкремент ячейки памяти.

БАЗОВО-ИНДЕКСНАЯ АДРЕСАЦИЯ С ОТКЛОНЕНИЕМ. –
ЕА = БАЗА + ИНДЕКС + ОТКЛОНЕНИЕ:
MOV		AX, [ECX][ESI+20h]	; Переслать слово из памяти

БАЗОВО-ИНДЕКСНАЯ АДРЕСАЦИЯ С ОТКЛОНЕНИЕМ И С ШАГОМ. –          ЕА = БАЗА + ИНДЕКС * ШАГ + ОТКЛОНЕНИЕ:
ADD		AX, [EDX][EDI*4+10h]	; Сложить AX с ячейкой памяти.

СТЕКОВАЯ АДРЕСАЦИЯ (можно рассматривать как вариант регистровой косвенной адресации) – в указателе стека ESP (SP) формируется 32-х битовое (16-ти битовое) внутрисегментное смещение для операнда в стековом сегменте :
PUSH		ECX		; Включить в стек содержимое регистра
PUSHFD			; Включить в стек содержимое EFLAGS
PUSH		4000h		; Включить в стек константу
POP		EDX		; Извлечь из стека в регистр
POPFD			; Извлечь из стека в регистр EFLAGS
POP		[ESI]		; Извлечь из стека в ячейку памяти

В таблице 2.1 показана разница в использовании базовых и индексных регистров для 16-ти и 32-х битовых адресов.
Для обеспечения совместимости  ПО  процессоров необходимо программы (с 16-ти битовыми командами МП 86 и 286) выполнять на МП 386+ в реальном или защищенном режимах. Процессор определяет размерность адреса, анализируя бит D (Default) в дескрипторе сегмента. Если D=0, то все длины операндов и эффективных адресов составляют 16 бит. Если D=1, – 32 бита.  В реальном режиме – 16 бит.
Изменение размерности адреса и данных, задаваемых битом  D, обеспечивают два префикса, выбираемые перед командами:
•	ПРЕФИКС РАЗМЕРНОСТИ ОПЕРАНДА  (OperandSize),
•	ПРЕФИКС ДЛИНЫ АДРЕСА  (AddressSize).
Наличие префикса коммутирует (переключает) размер операнда или размер эффективного адреса на значение, противоположное принима-емому по умолчанию (по биту D).
Префиксы могут использоваться совместно с любой инструкцией и в любом режиме – реальном, виртуальном и V86. Префикс длины адреса не обеспечивает размерность адреса более 64 Кбайт в режиме реальной адресации.  Адрес свыше 0FFFFh будет рассматриваться как ошибка.

Таблица 2.1 – Базовые и индексные регистры 
для  16-ти  и  32-х  битовых адресов
	16-ти битовый адрес	32-х битовый адрес
Базовый регистр	BX, BP	Любой 32-х битовый РОН
Индексный регистр	SI, DI	Любой 32-х битовый РОН, исключая ESP
Шаг индексации «f»	нет	1, 2, 4, 8
Смещение	0, 8, 16 бит	0, 8, 32 бит

2.3.2  ИСПОЛЬЗОВАНИЕ  СЕГМЕНТНЫХ  РЕГИСТРОВ
Основная структура в организации памяти – СЕГМЕНТ.
СЕГМЕНТЫ  –  блоки памяти  переменной длины  (от 1 байта до 4 Гбайт), имеющие определенные атрибуты. Три основных типа сегментов – СТЕК,  КОМАНДЫ,  ДАННЫЕ.
Для компактного кодирования команд и повышения производи-тельности МП – команды не содержат явного указания на используемый сегментный регистр. Определение сегментного регистра (по умолчанию) производится автоматически в соответствии с табл. 2.2. Сегментные регистры FS и GS – не выбираются по умолчанию ни в одной команде и могут быть выбраны только префиксом замены сегмента.
Обычно название сегментного регистра указывает на тип информации, для адресации которой он используется. Применение префикса переадресации позволяет явно определять используемый сегментный регистр (см. название регистров в скобках во второй колонке табл. 2.2), в том числе FS и GS.
Таблица 2.2 – Выбор сегментных регистров
 и внутрисегментного смещения
Тип обращения к памяти	Сегментный регистр	Смещение
Выборка команды	CS	EIP (IP)
Обращение к стеку	SS	ESP (SP)
Адресация операнда	DS (CS,SS,ES,FS,GS)	EA
Элемент цепочки-источника	DS (CS,SS,ES,FS,GS)	ESI (SI)
Элемент цепочки-приемника	ES	EDI (DI)
Операнд с использованием в качестве базового регистра
 EBP (BP)  или  ESP (SP)	DS (CS,SS,ES,FS,GS)	EA

2.3.3  ФОРМАТЫ  КОМАНД
При разработке системы команд процессоров 386+ пришлось решать следующие основные проблемы :
•	обеспечить совместимость по объектному коду с предшествующими процессорами, но вместе с тем ввести в команды  32-х битовые опе-ранды и адреса;
•	расширить диапазон использования регистров общего назначения в адресных вычислениях, в частности, привлечь для этого регистры EAX, ECX и EDX, 16-ти битовые аналоги которых AX, CX и DX для адресации не применялись;
•	по возможности ввести новые команды, которые упрощают решение часто встречающихся программных задач, например, битовые команды, команды двойного сдвига и др.
Общий формат команд процессоров  386+  приведен в табл. 2.3. 

Таблица 2.3 – Число байт в командах процессоров  386+
Префиксы	Число байт		Поля  команды	Число байт
1. Повторения	0 или 1		1. Код операции	1 или 2
2. Размер адреса	0 или 1		2. mod , r/m	0 или 1
3. Размер операнда	0 или 1		3. s i b	0 или 1
4. Замена сегмента	0 или 1		4. Смещение	0, 1, 2, или 4
5. Блокировки шины	0 или 1		5. Непосредственный  операнд	0, 1, 2, или 4
Команды состоят: 
•	из необязательных ПРЕФИКСОВ,
•	одного или двух байт (главного)  КОДА  ОПЕРАЦИИ,
•	СПЕЦИФИКАТОРА  АДРЕСА,  представленного  байтами:   mod,r/m  и  sib ;
•	СМЕЩЕНИЯ  В  КОМАНДЕ  (displacement)  (отклонения)   и
•	НЕПОСРЕДСТВЕЕНЫХ  ДАННЫХ.
Из всех полей команды обязательными являются только один или два байта КОДА ОПЕРАЦИИ.
ПРЕФИКС – это байт со специальным кодированием, который модифицирует операцию одной находящейся за ним команды :
•	ПОВТОРЕНИЯ (REPeate) – применяется в цепочечных (строковых) командах для автоматической обработки всех элементов цепочки;
•	РАЗМЕРА ОПЕРАНДА (OperandSize) – переключает 16-ти и  32-х битовые операнды;
•	РАЗМЕРА АДРЕСА (AddressSize) – коммутирует формирование 16-ти и 32-х битовых адресов;
•	ЗАМЕНЫ СЕГМЕНТА (Segment override) – явно определяет сегментный регистр для конкретной команды вместо сегментного регистра, применяемого по умолчанию.
•	Перед некоторыми командами обращения к памяти разрешается также указывать префикс LOCK – БЛОКИРОВКИ ШИНЫ. Наличие этого префикса заставляет процессор сформировать активный выходной сигнал LOCK#, который через арбитр шины запрещает другим процессорам в мультипроцессорной системе доступ к памяти на время выполнения команды с блокировкой шины.
Один или два байта КОДА ОПЕРАЦИИ определяют то действие, выполнение которого инициализирует команда. Двухбайтовые коды операций введены в процессорах  386+  для новых команд, например, PUSH FS, условных переходов со смещением длиной в слово или двойное слово и др. Для таких команд ПЕРВЫЙ БАЙТ КОДА ОПЕРАЦИИ всегда содержит 0Fh. Внутри байтов кода операции определяются некоторые поля, которые содержат информацию о направлении операции, размере смещения в команде, кодировании регистров и расширении со знаком (рис. 2.5) :
•	d – в двухоперандных командах определяет направление передачи данных: из регистра – в регистр/память (d = 0) или из регистра/памяти – в регистр (d = 1);
•	w – определяет размер операнда: в байт (при  w = 0) или в полный размер – 16 или 32 бита (при  w = 1).

7	6	5	4	3	2	1	0	7	6	5	4	3	2	1	0	7	6	5	4	3	2	1	0	7	6	5	4	3	2	1	0
																															
Код операции	d	w	Код операции	mod	reg	r/m	ss	index	base
																															
Рис. 2.5 – Формат команды процессоров 386+
ПОЛЕ  «reg»  – определяет операнд в одном из регистров общего назначения. Поле «reg» может находится в байте КОДА ОПЕРАЦИИ и в байте  «mod, r/m».  Кодирование этого поля зависит от того, имеется ли в команде поле  «w»,  а при его наличии еще и от размера операнда (см. табл. 2.4).

Таблица 2.4 – Кодирование поля  «reg»
Поле «reg»	Поля «w» 
в команде нет	Поле «w» в команде имеется
		16-ти бит. операнд	32-х бит.операнд
	16  бит	32  бит	w = 0	w = 1	w = 0	w = 1
000	AX	EAX	AL	AX	AL	EAX
001	CX	ECX	CL	CX	CL	ECX
010	DX	EDX	DL	DX	DL	EDX
011	BX	EBX	BL	BX	BL	EBX
100	SP	ESP	AH	SP	AH	ESP
101	BP	EBP	CH	BP	CH	EBP
110	SI	ESI	DH	SI	DH	ESI
111	DI	EDI	BH	DI	BH	EDI

2.3.4  КОДИРОВАНИЕ  РЕЖИМОВ  АДРЕСАЦИИ
За исключением команд с неявной адресацией, в которых операнд идентифицируется кодом операции, РЕЖИМ АДРЕСАЦИИ определяют один или два байта адресации, которые находятся после байта (или двух байтов) кода операции (см. рис. 2.5). Первым из них является байт «mod, r/m»,  а вторым  – байт  «sib»  (масштаб, индекс, база). Байт «sib» может присутствовать только в командах с 32-х битовой адресацией, когда байт  «mod, r/m»  содержит  r/m = 100B  и значение в поле  «mod»  не равно 11В.

16-ТИ БИТОВАЯ АДРЕСАЦИЯ применяется в режимах  РРА и  V86 и различие между ними заключается в том, что в режиме  V86  допускается страничное преобразование адреса. При 16-ти битовой адресации памяти на первом этапе эффективный адрес  (ЕА)  вычисляется как сумма до трех 16-ти битовых компонент : БАЗЫ, ИНДЕКСА И СМЕЩЕНИЯ В КОМАНДЕ (отклонения).
Во многих командах местонахождения операндов определяет байт «mod, r/m». Одним из операндов (источником или получателем) является содержимое регистра общего назначения (РОНа), выбираемого трехбитовым полем «reg» в соотвествии с таблицей 2.4. Второй операнд может находится в регистре общего назначения (двухбитовое поле mod = 11B) или ячейке памяти. Если второй операнд находится в РОНе,  то трехбитовое поле «r/m» определяет регистр в соответствии с табл. 2.4.
Если поле «mod» показывает местонахождение второго операнда в памяти (поле «mod» не равно 11В), то оба поля «mod» и «r/m» совместно задают режим адресации (см. табл. 2.5). В этой таблице d8 и d16 обозначают 8-ми или 16-ти битовое смещение в команде (отклонение), задаваемое в следующих байтах команды. Предполагается, что сегментным регистром по умолчанию является регистр DS.
Отметим, что при 16-ти битовой адресации применяются только регистры  BX,  SI,  DI  и  BP (в стековых операциях неявно привлекается регистр  SP).
Таблица 2.5 – Формирование эффективного адреса (ЕА) памяти
при 16-ти битовой адресации
Поле «r/m»	Адрес  памяти  второго  операнда
	mod = 00	mod = 01	mod = 10
000	BX + SI	BX + SI + d8	BX + SI + d16
001	BX + DI	BX + DI + d8	BX + DI + d16
010	SS : [BP + SI]	SS : [BP+SI + d8]	SS : [BP+SI + d16]
011	SS : [BP + DI]	SS : [BP+DI + d8]	SS : [BP+DI + d16]
100	SI	SI + d8	SI + d16
101	DI	DI + d8	DI + d16
110	d16	SS : [BP + d8]	SS : [BP + d16]
111	BX	BX + d8	BX + d16

32-ТИ БИТОВАЯ АДРЕСАЦИЯ применяется при выполнении 32-ти битового кода в режиме виртуальной адресации (РВА). Для адресации памяти можно использовать любой регистр общего назначения, а индекс разрешается масштабировать (умножать) на 1, 2, 4 или 8.
Отметим появление в адресных вычислениях блока контроля: про-цессор при каждом обращении к памяти проверяет, разрешает ли это обращение механизм защиты. Когда процессор обнаруживает несанкцио-нированное обращение, он генерирует особый случай защиты и отказывается от обращения к памяти.
32-х битовые режимы адресации кодируются с помощью двух байт «mod, reg» и «sib». Когда в команде фигурирует только смещение (отклонение) или база и смещение, достаточно одного байта «mod, reg». Когда же в команде определяются базовый и индексный регистры, приходится привлекать байт «sib».
Одним из операндов (источником или получателем) является содержимое регистра общего назначения, задаваемого полем «reg» в соответствии с табл. 2.4.
Второй операнд может находиться в РОНе (при этом поле mod = 11В), а сам регистр выбирается полем «r/m» в соответствии с табл. 2.4.
Когда поле «mod» определяет режимы адресации второго операнда в памяти (поле «mod» не равно 11В), выбор ячейки памяти осуществляется полями «mod» и «r/m» (см. табл. 2.6) или дополнительно еще и байтом «sib» (если в байте «mod, r/m» поле «r/m» = 100). 

Таблица 2.6 – Формирование эффективного адреса памяти
при 32-х битовой адресации (r/m не равно 100В)
Поле «r/m»	Адрес  памяти  второго  операнда
	mod = 00	mod = 01	mod = 10
000	EAX	EAX + d8	EAX + d32
001	ECX	ECX + d8	ECX + d32
010	EDX	EDX + d8	EDX + d32
011	EBX	EBX + d8	EBX + d32
100	Имеется байт «sib»	Имеется байт «sib»	Имеется байт «sib»
101	d32	SS : [EBP + d8]	SS : [EBP + d32]
110	ESI	ESI + d8	ESI + d32
111	EDI	EDI + d8	EDI + d32

Таблица 2.7 – Формирование эффективного адреса памяти
при 32-х битовой адресации (r/m = 100В)
Поле «base»	Адрес  памяти  второго  операнда
	mod = 00	mod = 01	mod = 10
000	EAX + ss * ind	EAX + ss * ind + d8	EAX + ss * ind + d32
001	ECX + ss * ind	ECX + ss * ind + d8	ECX + ss * ind + d32
010	EDX + ss * ind	EDX + ss * ind + d8	EDX + ss * ind + d32
011	EBX + ss * ind	EBX + ss * ind + d8	EBX + ss * ind + d32
100	SS : [ESP + ss * ind]	SS:[ESP+ss * ind + d8]	SS:[ESP+ss*ind+d32]
101	d32 + ss * ind	SS:[EBP+ss * ind + d8]	SS:[EBP+ss*ind+d32]
110	ESI + ss * ind	ESI + ss * ind + d8	ESI + ss * ind + d32
111	EDI + ss * ind	EDI + ss * ind + d8	EDI + ss * ind + d32

Таблица 2.8 – Кодирование полей  «ss»  и  «index»  в байте  «sib»
Поле «ss»	Множитель	«index»	Индексный регистр
00	1	000	EAX
01	2	001	ECX
10	4	010	EDX
11	8	011	EBX
		100	Отсутствует
		101	EBP
		110	ESI
		111	EDI

В  этом  байте  (см. рис. 2.5)  поле  «ss»  указывает  масштабный коэффициент  индекса  (см. табл. 2.8),  поле  «index»  определяет  регистр 
общего назначения (кроме ESP), который  служит индексом (см. табл. 2.8), а поле «base» идентифицирует любой  РОН, участвующий в ад-ресации как базовый регистр (см. табл. 2.7).
Когда поле «index» содержит 100В, показывая отсутствие индексного регистра, поле «ss» должно содержать 00; в противном случае эффективный адрес – не определен.

2.4  КОМАНДЫ  ПРОЦЕССОРОВ  386+
Система команд 32-х разрядных процессоров 386+ включает все команды предыдущих поколений и усовершенствована по следующим направлениям:
	Большинство команд базовой системы допускает операции с 32-х битовыми операндами и новыми режимами адресации.
	Добавлены новые команды операций над двоичными цепочками и битами, а также команды двойного сдвига;
	Для режима РВА введены команды поддержки управления памятью, защиты, организации виртуальной памяти и отладки.
	Улучшены алгоритмы выполнения некоторых команд, что значительно сократило время их выполнения (например, команды умножения).

КОМАНДЫ  ПЕРЕДАЧИ  ДАННЫХ
Команды этой группы предназначены для пересылок байт (обозначается В), слов (W) или двойных слов (D) из памяти в регистр, из регистра в память и из регистра в регистр. В одной команде невозможно использование двух операндов, расположенных в памяти (за исключением цепочечных команд и операций со стеком).
Команда MOV передает байт, слово или двойное слово из источника в приемник. В поле операндов приемник находится на первом месте, источник – на втором.
Команда XCHG осуществляет обмен байт, слов или двойных слов. Различий между приемником и источником нет.
Команда XLAT заменяет значение в регистре AL на байт из таблицы, адресуемой регистром (Е)BX, причем индексом таблицы служит содержимое регистра AL. Эта команда удобна для преобразования из одного кода в другой.
Команда LEA обеспечивает вычисление эффективного адреса ЕА ячейки памяти в соответствии с указанным способом адресации и загрузку ЕА (а не содержимого адресуемой ячейки памяти!) в указанный общий регистр.
Команды LDS, LES... загружают четыре (или шесть) смежных байта из памяти в адресуемый регистр (16 или 32 бита) и в соответствующий сегментный регистр (16 бит). Слово (двойное слово) операнда источника из ячейки памяти, адресуемой в соответствии с указанным методом адресации, передается в выбранный регистр, а следующее слово – в регистр DS (команда LDS), в регистр ES (команда LES) и т.д.

В таблицах приняты следующие обозначения:
•	src 	– операнд-источник;
•	dest 	– операнд-назначение (операнд-приемник);
•	reg 	– (8/16/32)-х битовый регистр;
•	reg16/32 – (16/32)-х битовый регистр;
•	reg16 	– только 16-ти битовый регистр;
•	reg32 – только 32-х битовый регистр;
•	mem 	– (8/16/32)-х битовая ячейка памяти, адресуемая регистрами процессора;
•	r/m 	– (8/16/32)-х битовый регистр или ячейка памяти, адресуемая регистрами процессора;
•	r/m/i 	– (8/16/32)-х битовый регистр, ячейка памяти, адресуемая регистрами процессора или непосредственный операнд;
•	addr 	– (16/32)-х битовый адрес;
•	immed – непосредственный операнд.

Таблица 2.9 – Команды пересылки данных

MOV    dest, src	Пересылка (копирование) данных из регистра, памяти или непосредственного операнда в регистр или память
XCHG    r/m, reg	Обмен данными (взаимный) между регистрами или регистром и памятью
BSWAP    reg32	Перестановка байтов в регистре из порядка младший-старший в порядок старший-младший (486+)
MOVSXB  reg, r/m	Копирование байта с расширением до слова или двойного слова, заполняя старшие биты знаком (386+)
MOVSXW  reg, r/m	Копирование слова с расширением до двойного слова, заполняя старшие биты знаком (386+)
MOVZXB  reg, r/m	Копирование байта с расширением до слова или двойного слова, заполняя старшие биты нулем (386+)
MOVZXW  reg, r/m	Копирование слова с расширением до двойного слова, заполняя старшие биты нулем  (386+)
XLAT	Трансляция (перекодирование) содержимого AL в значение из таблицы трансляции, адресуемой в (Е)BX: AL ← [(E)BX+AL]
LEA    reg16/32, mem	Загрузка эффективного адреса в регистр
LDS  reg16/32, mem	Загрузка в регистр (двойного) слова из памяти, а в 
DS – следующего 16-ти битового слова
LES  reg16/32, mem	Загрузка в регистр (двойного) слова из памяти, а в 
ES – следующего 16-ти битового слова
LFS  reg16/32, mem	Загрузка в регистр (двойного) слова из памяти, а в 
FS – следующего 16-ти битового слова
LGS  reg16/32, mem	Загрузка в регистр (двойного) слова из памяти, а в 
GS – следующего 16-ти битового слова
LSS  reg16/32, mem	Загрузка в регистр (двойного) слова из памяти, а в 
SS – следующего 16-ти битового слова
IN    AL(AX),  port8	Ввод в AL (или AX,EAX) из порта с адресом     port8
IN    AL(AX),  DX	Ввод в AL (или AX,EAX) из порта с адресом, хранящимся в DX
OUT    port8, AL(AX)	Вывод из AL (или AX,EAX) в порт с адресом    port8
OUT   DX, AL(AX)	Вывод из AL (или AX,EAX) в порт с адресом, хранящимся в DX

Таблица 2.10 – Команды работы со стеком

PUSH    r/m	Помещение (двойного) слова из регистра или памяти в стек
PUSH  immed	Помещение непосредственного операнда в стек (286+)
PUSHA   (D)	Помещение в стек регистров AX,CX,DX,BX,SP,BP,SI,DI (286+) или их 32-х битовых расширений (386+)
POP    r/m	Извлечение (двойного) слова данных из стека в регистр или память
POPA    (D)	Извлечение данных из стека в регистры DI,SI, BP,SP,BX,DX,CX,AX (286+) или их 32-х битовых расширений (386+)
PUSHF    (D)	Помещение в стек регистра флагов FLAGS (EFLAGS)
POPF    (D)	Извлечение данных из стека в регистр флагов FLAGS (EFLAGS)

Команда PUSH передает слово (или двойное слово) из источника в стек, а команда POP осуществляет противоположное действие – передает (двойное) слово из стека в приемник. Стек – это область памяти, в которой размещается текущий сегмент стека. Регистр (Е)SP содержит смещение последнего включенного в стек слова; оно (смещение) называется ВЕРШИНОЙ СТЕКА. По мере включения в стек новых слов они располагаются по меньшим адресам памяти; говорят, что стек растет в направлении уменьшения адресов.
Команда PUSH начинается с уменьшения (декремента) содержимого регистра (Е)SP на 2 (или 4), т.е. адресует следующее свободное слово (или двойное слово) в стеке; после чего передается (двойное) слово из источника.
Команда POP передает слово (или двойное слово) из стека в приемник и завершается увеличением (инкрементом) содержимого (Е)SP на 2 (или на 4).
Команда PUSHA (D) включает в стек регистры в таком порядке: (E)AX, (E)CX, (E)DX, (E)BX, (E)SP, (E)BP, (E)SI, (E)DI. Включаемым значением регистра (E)SP является то его значение, которое было в нем до выполнения команды PUSHA (D). При выполнении команды PUSHA (D) происходит декремент содержимого регистра (E)SP на 2 (или на 4) при включении в стек каждого регистра. Извлечение из стека, реализуемое командой POPA (D), вызовет инкремент содержимого регистра (E)SP на ту же величину, поэтому команде POPA (D) не требуется запомненное в стеке содержимое регистра (E)SP.

Таблица 2.11 – Команды целочисленной арифметики

ADD    r/m, r/m/i	Сложение двух операндов: r/m ← (r/m + r/m/i)
XADD    r/m, reg	Обмен и сложение (486+)
ADC    r/m, r/m/i	Сложение двух операндов с учетом переноса от преды-дущей операции: r/m ← (r/m + r/m/i + CF)
INC    r/m	Увеличение на 1: r/m ← (r/m + 1)
SUB    r/m, r/m/i	Вычитание: r/m ← (r/m - r/m/i)
SBB    r/m, r/m/i	Вычитание с заемом: r/m ← (r/m – r/m/i – CF)
DEC    r/m	Уменьшение на 1: r/m ← (r/m – 1)
CMP    r/m, r/m/i	Сравнение – вычитание без сохранения результата (только установка флагов)
CMPXCHG r/m,  reg	Сравнение и обмен данными (486+)
CMPXCHG8B	Сравнение и обмен 8 байт (PENTIUM+)
NEG    r/m	Изменение знака операнда (преобразование в дополни-тельном коде): r/m ← (0 – r/m)
MUL    r/m	Умножение AL/AX/EAX на беззнаковое целое значение из r/m
IMUL    r/m	Умножение AL/AX/EAX на целое знаковое значение из r/m
IMUL  reg16/32, r/m	Знаковое умножение reg16/32 на r/m (помещение результата без расширения разрядности в reg16/32) (16 бит – 286+;  32 бита – 386+)
IMUL 
        reg16/32, r/m,
                  immed	Знаковое умножение r/m на 16/32-х битовый непосред-ственный операнд и помещение результата без расширения разрядности в  reg16/32 (16 бит – 286+; 32 бита – 386+)
DIV    r/m	Деление расширенного аккумулятора на беззнаковое число из r/m
IDIV    r/m	Знаковое деление расширенного аккумулятора на знаковое целое из r/m
CBW	Знаковое расширение байта в аккумуляторе (AL) до слова: AH ← заполняется битом AL[7]
CWD	Преобразование слова в двойное слово (расширение знака AX в DX) DX ← заполняется битом AX[15]
CWDE	EAX [1631] ← заполняется битом AX [15]
CDQ	Преобразование двойного слова в – счетверенное:
 EDX ← заполняется битом EAX [31]
DAA	Коррекция AL после BCD-сложения
DAS	Коррекция AL после BCD-вычитания
AAA	Коррекция AL после ASCII-сложения
AAS	Коррекция AL после ASCII-вычитания
AAM	Коррекция AL после ASCII-умножения
AAD	Коррекция AL,AH  перед  ASCII-делением

Различие между знаковыми и беззнаковыми числами при выполне-нии арифметических операций заключается в интерпретации двоичных наборов. Беззнаковые числа – это обычные двоичные числа (все биты значащие), а знаковые числа представлены в дополнительном коде.
Операции сложения и вычитания одинаковы для обоих типов чисел. Единственное отличие заключается в механизме обнаружения выхода за диапазон. Команды сложения и вычитания устанавливают флаг CF, если результат, интерпретируемый как беззнаковое число, оказывается вне диапазона; они же устанавливают флаг OF, если результат, интерпретируемый как знаковое число, выходит за диапазон.
Команда XADD – обмена и сложения – обменивает операнды и складывает их. Поэтому на месте операнда-источника остается операнд-получатель, а на месте операнда-получателя формируется сумма.
Команда NEG изменяет знак операнда в дополнительном коде.
Команда СМР (сравнение) аналогична команде вычитания, но ре-зультат нигде не запоминается. Эта команда выставляет флаги, по которым можно определить отношение между двумя операндами: равенство, больше или меньше (см. табл. 2.12). После команды СМР обычно используется команда условного перехода.

Таблица 2.12 – Состояние флагов после команды сравнения

Отношение	Знаковые числа	Беззнаковые числа
(dest)  >  (src)	(ZF=0) & (SF=OF)	(CF=0) & (ZF=0)
(dest) => (src)	SF = OF	CF = 0
(dest)  =  (src)	ZF = 1	ZF = 1
(dest) <= (src)	(ZF=1) & (SF<>OF)	(CF=1) & (ZF=1)
(dest)  <  (src)	SF <> OF	CF = 1

Команда CMPXCHG – сравнение и обмена – воспринимает 3 опе-ранда: операнд-источник в регистре, операнд-получатель в памяти и аккумулятор AL/AX/EAX. Если значения в операнде-получателе и аккумуляторе равны, операнд-получатель заменяется операндом-источником. В противном случае исходное значение операнда-получателя загружается в аккумулятор. Флаги отражают результат, полученный при вычитании операнда-получателя из аккумулятора.
Команды умножения могут иметь: одно-, двух- или трехадресную форму.
В одноадресных командах MUL и IMUL один из сомножителей по умолчанию размещается в аккумуляторе (см. табл. 2.13), а второй сомножитель указан в команде. Результат умножения в два раза длиннее операндов.

Таблица 2.13 – Размещение первого множителя и результата умножения

Разрядность
операндов	Множитель	Результат
		Старшая часть	Младшая часть
8	AL	AH	AL
16	AX	DX	AX
32	EAX	EDX	EAX

При двухадресной форме (IMUL reg16/32,r/m) или трехадресной форме (IMUL reg16/32, r/m, immed) команд умножения со знаком – результат размещается в регистре-приемнике. В этом случае старшие 16 (или 32) разряда произведения при умножении 16-ти (или 32-х) разрядных операндов теряются. Такие команды удобно применять для вычисления адресов элементов массивов.
Команды деления DIV и IDIV имеют только одноадресную форму, причем разрядность делимого (см. табл. 2.14) должна вдвое превышать разрядность делителя, указанного в команде.
Знак остатка при выполнении команды IDIV устанавливается рав-ным знаку делимого.

Таблица 2.14 – Размещение делимого и результатов деления

Разрядность
делителя	Делимое	Частное	Остаток
	Старшие разряды	Младшие разряды		
8	AH	AL	AL	AH
16	DX	AX	AX	DX
32	EDX	EAX	EAX	EDX

Для подготовки операнда-делимого двойной длины используются команды расширения аккумулятора знаковыми битами. При выполнении команд – CBW / CWDE (преобразование байта в слово / преобразование слова в двойное слово с расширением в аккумуляторе) – расширенный операнд остается в аккумуляторе. Команды – CWD / CDQ (преобразование слова в двойное слово / преобразование двойного слова в счетверенное слово) – расширяют аккумулятор AX или EAX в регистры DX или EDX соответственно, куда заносится старшая половина (расширенный знак) операнда.
Система команд процессоров х86 позволяет выполнять арифметические действия над числами, представленными в ДВОИЧНО-ДЕСЯТИЧНОМ УПАКОВАННОМ ФОРМАТЕ (BCD код) или в коде ASCII, используемом при обмене информацией и при вводе с клавиатуры. Для этих чисел допустимы значения от 0 до 9 в младшей тетраде.
Команда DAA – ДЕСЯТИЧНОЙ КОРРЕКЦИИ АККУМУЛЯТОРА ПОСЛЕ СЛОЖЕНИЯ BCD-чисел выполняет дей-ствия над содержимым AL следующим образом:
•	если содержимое младшей тетрады AL больше 9 или установлен флаг AF = 1, то к содержимому AL добавляется 6 ;
•	если после этого содержимое старшей тетрады AL стало больше 9 или установлен флаг CF, то число 6 добавляется к старшей тетраде AL.
Аналогичным образом выполняются действия над содержимым AL командой DAS – ДЕСЯТИЧНАЯ КОРРЕКЦИЯ ПОСЛЕ ВЫЧИТАНИЯ BCD-чисел:
•	если младшая тетрада больше 9 или установлен флаг AF = 1, то из AL вычитается число 6;
•	если после этого старшая тетрада больше 9 или установлен флаг CF = 1, то число 6 вычитается из старшей тетрады AL.

Перед выполнением арифметических команд над числами в коде ASCII необходимо очистить старшие тетрады этих чисел. Такие числа называются: распакованными (неупакованными).
Команда ААА выполняет коррекцию числа в регистре AL, полученного в результате сложения двух распакованных десятичных операндов. Если содержимое младшей тетрады AL больше 9 или установлен флаг AF = 1, то к содержимому AL добавляется 6; после этого к AH прибавляется 1, очищается старшая тетрада AL, и устанавливаются флаги CF и AF.
Команда AAS выполняет коррекцию числа в регистре AL, полученного в результате вычитания двух распакованных десятичных операндов. Если содержимое младшей тетрады AL больше 9 или установлен флаг AF = 1, то из AL вычитается число 6; после этого из AH вычитается 1, очищается старшая тетрада AL, и устанавливаются флаги CF и AF.
Команда AAM выполняет коррекцию числа в регистре AL, полученного после умножения двух распакованных десятичных операндов. Содержимое AL делится на 10; частное пересылается в АН, а остаток – в AL.
Команда AAD производит коррекцию делимого ДО ВЫПОЛНЕНИЯ команды деления. Для этого содержимое регистра AH умножается на 10 и результат прибавляется к содержимому в AL, старший байт аккумулятора АН очищается. Полученный операнд используется для обычного деления на распакованный делитель.

Таблица 2.15 – Команды логических операций

AND   r/m, r/m/i	Побитовое логическое   И
TEST  r/m, r/m/i	Проверка бит (логическое И без записи результата – установка флагов)
OR    r/m, r/m/i	Побитовое логическое    ИЛИ
XOR   r/m, r/m/i	Побитовое логическое    ИСКЛЮЧАЮЩЕЕ ИЛИ
NOT    r/m	Побитовая инверсия

Логические двухоперандные команды служат для реализации трех булевых функций (результат помещается на место первого операнда):
•	AND – поразрядное логическое   И;
•	OR – поразрядное логическое    ИЛИ;
•	XOR – поразрядное логическое ИСКЛЮЧАЮЩЕЕ ИЛИ (сумма по модулю 2).
Сюда также относится команда TEST (проверка), которая выполняет поразрядное логическое И, но результат никуда не заносит, а только устанавливаются флаги для выполнения условных переходов.
Команды XOR и SUB позволяют обнулить все биты регистра (ре-гистр должен быть и источником и приемником).

Команды сдвигов и циклических сдвигов (табл. 2.16) выполняют сдвиг 8/16/32-х битового операнда на 1 бит или на произвольное число бит (но не больше длины операнда). Для сдвигов более, чем на один бит, число сдвигов может быть записано предварительно в регистр CL или задано непосредственным операндом в команде (286+). Во всех командах сдвигов последний выдвигаемый бит помещается во флаг CF.
В командах двойного сдвига операндом-приемником (dest) может быть содержимое reg16/32 или mem16/32, операндом-источником (src) – только содержимое РОНа (с разрядностью 16/32). Для сдвигов более, чем на один бит, число сдвигов может быть записано предварительно в регистр CL или задано непосредственным операндом в команде.
Внутри процессора операнды dest и src объединяются в промежу-точном регистре двойной длины, содержимое которого логически сдвигается влево или вправо. После сдвига в операнд-приемник (dest) помещаются соответствующие сдвинутые биты промежуточного регистра. Содержимое операнда-источника (src) не изменяется. Можно сказать, что в этих командах сдвигается операнд-приемник (dest) и в его освобождающиеся биты «вдвигается» содержимое операнда-источника (src).
 
Таблица 2.16 – Команды сдвигов

Команда	Мнемоника	Выполнение команды
Логический сдвиг влево
Арифметический сдвиг влево	SHL
SAL	

Логический сдвиг вправо	SHR	

Арифметический сдвиг вправо	SAR	

Циклический сдвиг вправо	ROR	

Циклический сдвиг влево	ROL	

Циклический сдвиг вправо через флаг CF	RCR	

Циклический сдвиг влево через флаг CF	RCL	
Двойной сдвиг влево (386+)	SHLD	

Двойной сдвиг вправо (386+)	SHRD	


Таблица 2.17 – Команды битовых операций (386+)

BT    r/m, im8
BT    r/m, reg	Тестирование бита – загрузка в CF бита с номером (индексом) im8 из r/m. Загрузка в CF бита из r/m с номером из «reg»
BTC    r/m,  im8
BTC    r/m,  reg	Тестирование (загрузка в CF) и инверсия бита
BTR    r/m,  im8
BTR    r/m,  reg	Тестирование (загрузка в CF) и сброс бита
BTS    r/m,  im8
BTS    r/m,  reg	Тестирование (загрузка в CF) и установка в 1 бита
BSF(BSR)  reg, r/m	Сканирование бит вперед (назад) в ячейке r/m. В reg загружается индекс первого единичного бита в ячейке r/m.

КОМАНДЫ БИТОВЫХ ОПЕРАЦИЙ – отсутствуют в МП 86/286.
Команда – BT r/m,im8 – или – BT r/m,reg – (тестирование бита) выбирает из адресуемого регистра или памяти (r/m) значение определенного бита и копирует его во флаг CF. Номер бита (индекс) определяется значением байта непосредственного операнда или задается содержимым регистра (reg).
Когда номер бита (индекс) определен как константа (immed), его диапазон составляет от 0 до 31. Если поле r/m определяет ячейку памяти (размером слово или двойное слово), а номер бита задан содержимым регистра reg, то этот номер бита (индекс) считается целым знаковым числом в диапазоне от -32К до +(32К-1) для 16-ти битовой операции или от -2Г до +(2Г-1) для 32-х битовой операции.
Аналогичная команда – BTS – после копирования устанавливает адресуемый бит в 1. Команда – BTR – после копирования сбрасывает бит, а команда – BTC – инвертирует.
Команды – BSF и BSR – производят сканирование содержимого регистра или ячейки памяти (r/m) и заносят в регистр-приемник (reg) номер первого встреченного единичного бита. При выполнении команды – BSF – сканирование начинается с младшего разряда, а в команде – BSR – со старшего разряда. Если операнд равен нулю (единичные биты отсутствуют), то устанавливается флаг ZF = 1. При этом содержимое  регистра-приемника будет неопределенным. Если единичный бит найден, то флаг ZF = 0.

КОМАНДЫ  ОБРАБОТКИ  ЦЕПОЧЕК
Под ЦЕПОЧКОЙ (строкой) понимается  последовательность байт, слов или двойных слов в памяти, а ЦЕПОЧЕЧНОЙ (строковой) ОПЕРАЦИЕЙ называется операция, которая выполняется над каждым элементом цепочки. Например, цепочечная передача производит пересылку целой цепочки из одной области памяти в другую. Сокращение времени выполнения цепочечных команд достигается за счет мощного набора примитивных команд, выполняющих ускоренную обработку каждого элемента цепочки и необходимые служебные действия (табл. 2.18).
Перед выполнением цепочечных команд необходимо:
•	загрузить начальный (конечный) адрес цепочки-источника в регистры DS:(E)SI (допускается замена сегмента) (имеются соответствующие команды: LDS и др.);
•	загрузить начальный (конечный) адрес цепочки-приемника в регистры ES:(E)DI (командой LES);
•	сбросить флаг DF=0 (командой CLD), если цепочки обрабатываются по возрастанию адресов, или установить флаг DF=1 (командой STD), если цепочки обрабатываются по убыванию адресов;
•	при использовании префикса повторения REP в регистр (E)СХ загрузить количество повторений цепочечной операции;
•	при работе с портами в регистр DX загрузить адрес порта.
 
Таблица 2.18 – Примитивы цепочечных (строковых) команд

MOVS	mem(DI)  mem(SI),	Модифицировать SI, DI
CMPS	mem(SI) – mem(DI),  FLAGS,	Модифицировать SI, DI
SCAS	A – mem(DI),     FLAGS,	Модифицировать DI
LODS	A  mem(SI),	Модифицировать SI
STOS	mem(DI)  A,	Модифицировать DI
INS	mem(DI)  port(DX),	Модифицировать DI  (286+)
OUTS	port(DX)  mem(SI),	Модифицировать SI  (286+)

Цепочечный примитив MOVSB (MOVSW, MOVSD) – передать элемент цепочки – пересылает байт (слово или двойное слово) из ячейки памяти, смещение которой находится в регистре (E)SI (подразумевается, что цепочка-источник по умолчанию находится в текущем сегменте данных, определяемом регистром DS, но допускается замена сегмента), в ячейку памяти со смещением из (E)DI (цепочка-получатель должна находится только в сегменте, определяемом регистром ES).
При выполнении цепочечной команды содержимое регистров (E)SI и (E)DI автоматически модифицируется так, чтобы адресовать следующие элементы цепочек. Флаг DF определяет автоинкремент (DF = 0) или автодекремент (DF = 1) индексных регистров. Величина инкремента/ декремента зависит от размера элементов и составляет 1, 2 или 4, когда элементами цепочек являются, соответственно, байты, слова или двойные слова.
Если в цепочечную команду добавить префикс повторения: REP MOVS, то примитив MOVS, будет повторяться с уменьшением (Е)СХ на 1 (после выполнения примитива) до обнуления (Е)CX.
Команда сравнения цепочек CMPSB (CMPSW, CMPSD) – производит вычитание байта (слова или двойного слова) цепочки приемника (dest) из соответствующего элемента цепочки-источника  (src). В зависимости от результата вычитания устанавливаются флаги (в регистре (Е)FLAGS), но сами операнды не изменяются. Индексные регистры-указатели продвигаются на следующие элементы цепочек.
Когда перед командой CMPS указан префикс повторения REPE или REPZ), операция интерпретируется как: «сравнивать, пока не достигнут конец цепочек или пока не найден равный элемент».
При наличии префикса REPNE (или REPNZ) операция приобретает смысл: «сравнивать, пока не достигнут конец цепочек или пока элементы остаются равными».
Команда сканирования цепочек SCASB (SCASW, SCASD) – производит вычитание элемента цепочки (байт, слово или двойное слово) из содержимого аккумулятора AL/AX/EAX. В зависимости от результатов вычитания устанавливаются флаги, но значения операндов не изменяется.
С префиксом REPE (или REPZ) команду SCAS можно использовать для поиска элемента цепочки со значением, отличающимся от заданного в аккумуляторе значения. Префикс REPNE (или  REPNZ) позволяет найти элемент цепочки, значение которого равно значению в аккумуляторе.
Команда LODSB (LODSW, LODSD) загружает в аккумулятор (AL/AX/EAX) элемент из цепочки (байт, слово или двойное слово) и продвигает указатель (E)SI на следующий элемент. Обычно эта команда с префиксом повторения не используется.
Команда сохранения аккумулятора в цепочке STOSB (STOSW, STOSD) – передает байт (слово или двойное слово) из аккумулятора AL/AX/EAX в элемент цепочки и продвигает регистр-указатель (E)DI на следующий элемент. С префиксом повторения REP эта команда удобна для инициализации цепочки на фиксированное значение.
Команды ввода и вывода цепочек INSB (INSW, INSD) и OUTSB (OUNSW, OUNSD) как и обычные команды ввода/вывода являются привилегированными.
Команда INS вводит данные из порта, адресуемого регистром DX, в ячейку памяти с адресом ES:(E)DI. После ввода операнда производится модификация регистра (E)DI на 1, 2 или 4 с учетом состояния флага направления DF.
Команда OUTS выводит данные из ячейки памяти с адресом DS:(E)SI в выходной порт, адрес которого находится в регистре DX. После вывода операнда производится коррекция указателя (E)SI.
Обе эти команды могут использоваться с префиксом повторения REP. В этом случае ввод или вывод данных повторяется до обнуления регистра-счетчика (E)CX.
Необходимо отметить, что пять мнемоник префикса повторения REP, REPE/REPZ, REPNE/REPNZ определяют только два объектных (машинных) кода префикса (0F2h и 0F3h), а пять мнемоник введены для лучшей передачи содержательного смысла задачи.

КОМАНДЫ  РАБОТЫ  С  ФЛАГАМИ  (ФЛАЖКОВЫЕ  КОМАНДЫ)
Однобайтовые команды этой группы позволяют модифицировать некоторые флаги регистра (E)FLAGS (см. табл. 2.19). Остальные флаги могут быть модифицированы после записи содержимого флагового регистра в регистр или ячейку памяти (например, командой PUSHF(D)), с последующим возвратом во флаговый регистр.
Команды, модифицирующие флаг IF, являются IOPL-чувствитель-ными, т.е. выполняющая их программа должна иметь текущий уровень привилегий CPL, меньший или равный содержимому поля IOPL в регистре (E)FLAGS. Если это условие не выполняется, возникает нарушение общей защиты.
 
Таблица 2.19 – Команды работы с флагами

CLC	CF  0	Сброс флага переноса
CMC	CF  1 – CF	Инверсия флага переноса
STC	CF  1	Установка флага переноса
CLD	DF  0	Сброс флага направления цепочек DF
STD	DF  1	Установка флага направления DF
CLI	IF  0	Запрет маскируемых аппаратных прерываний
STI	IF  1	Разрешение маскируемых аппаратных прерываний
CTS (CLTS)	TF  0	Сброс флага переключения задач
LAHF	Загрузка младшего байта регистра флагов в AH
SAHF	Сохранение AH в младшем байте регистра флагов

КОМАНДЫ  ПЕРЕДАЧИ  УПРАВЛЕНИЯ
КОМАНДА БЕЗУСЛОВНОГО ПЕРЕХОДА с общей мнемоникой JMP имеет 5 форм, различающихся расстоянием до адреса назначения  от  текущей команды и способом задания назначения (целевого адреса – target).
•	В коротком (SHORT) внутрисегментном переходе двухбайтовая ко-манда JMP rel8 содержит во втором байте смещение в дополнительном коде (максимально возможный переход: назад – 128 или вперед +127 от адреса команды, находящейся после команды JMP).
•	Команда прямого внутрисегментного перехода (NEAR) аналогична предыдущей, но полное смещение в дополнительном коде содержит 16 (или 32 бита), которое прибавляется к текущему значению (E)IP. Эта форма команды передает управление в любую точку текущего сегмента кода.
•	В команде косвенного внутрисегментного перехода JMP r/m адрес целевого назначения (target) загружается в (E)IP из регистра или ячейки памяти.
•	Команда прямого межсегментного перехода JMP prt содержит непо-средственный операнд, содержащий: 16-ти битовый селектор, который загружается в регистр CS, и 16-ти (или 32-х) битовое смещение, загружаемое в (E)IP.
•	Команда косвенного межсегментного перехода адресует в памяти полный 32-х (или 48-ми) битовый указатель – селектор : смещение. Селектор загружается в регистр CS, а смещение – в регистр (E)IP.

КОМАНДЫ УСЛОВНЫХ ПЕРЕХОДОВ (табл. 2.20) осуществляют  передачу управления в зависимости от результатов предыдущих операций. Все команды условных переходов производят передачу управления только в пределах текущего сегмента кода (т.е. содержимое сегментного регистра CS не изменяется), если заданное в команде условие удовлетворяется. Переход реализуется прибавлением находящегося в команде смещения (в дополнительном коде) к содержимому регистра (E)IP. В процессорах 86/286 8-ми битовое смещение обеспечивает диапазон перехода от – 128 до +127 байт. В процессорах 386+ наряду с таким смещением допускается также полное 16-ти или 32-х битовое смещение в дополнительном коде. Этим обеспечивается переход в любую точку текущего сегмента кода.

Таблица 2.20 – Команды передачи управления (переходов)

JMP          target	Безусловный переход к целевому адресу    target
J(E)CXZ   target	Условный переход, если     (E)CX = 0
LOOP       target	Декремент (E)CX и переход, если     (E)CX <> 0
LOOPE     target
(LOOPZ)  target	Декремент (E)CX и переход, если 
                                        (E)CX <> 0 & ZF = 1
LOOPNE     target
(LOOPNZ)  target	Декремент (E)CX и переход, если 
                                        (E)CX <> 0 & ZF = 0
Jccc          target	Команды условного перехода
CALL      target	Вызов процедуры (подпрограммы)
RET (n)	Возврат из процедуры. Необязательный параметр n  задает коррекцию значения указателя стека
SETccc      r/m	Условное заполнение байта. Если выполняется условие «ссс», все биты байта dest (регистра или памяти) устанавливаются в 1, иначе – в 0. Условия «ссс» те же, что и в командах условных переходов (386+)

В мнемокодах команд условных переходов при сравнении чисел со знаком используются буквы:			 – G (greater) – больше,
	 – L (less) – меньше.
Для чисел без знака:			 – A (above) – над, выше,
	 – B (below) – под, ниже.
Условие равенства:	 – E (equal) – равно;
Невыполнение некоторого условия:	 – N (not) – не.

Для некоторых команд условных переходов зарезервированы два или три альтернативных мнемокода (см. табл. 2.21), подчеркивающих содержательный смысл проверяемого условия.
КОМАНДЫ ВЫЗОВА ПОДПРОГРАММЫ (процедуры) CALL передает управление с автоматическим сохранением в стеке адреса возврата (текущего содержимого IP), т.е. адреса команды, находящейся после команды CALL. В конце подпрограммы последняя команда RET восстанавливает из стека в регистр IP адрес возврата.

Таблица 2.21 – Кодирование условий перехода

Код поля ссс	Мнемоника поля ссс	Состояние флагов	Условие перехода
0000	O	OF=1	Переполнение
0001	NO	OF=0	Не переполнение
0010	B/NAE/C	CF=1	Ниже / не выше или равно
0011	AE/NB/NC	CF=0	Не ниже / выше или равно
0100	E/Z	ZF=1	Равно / нуль
0101	NE/NZ	ZF=0	Не равно / не нуль
0110	BE/NA	CF=1 & ZF=1	Ниже или равно / не выше
0111	NBE/A	CF=0 & ZF=0	Не ниже или равно / выше
1000	S	SF=1	Есть знак (отрицательный)
1001	NS	SF=0	Нет знака (положительный)
1010	P/PE	PF=1	Есть паритет / четный паритет
1011	NP/PO	PF=0	Нет паритета / нечетный паритет
1100	L/NGE	ZF<>OF	Меньше / не больше или равно
1101	NL/GE	SF=OF	Не меньше / больше или равно
1110	LE/NG	(SF<>OF) & ZF=1	Меньше или равно / не больше
1111	NLE/G	SF=(OF & ZF)	Не меньше или равно / больше

Команда CALL имеет такие же формы (относительную, прямую и косвенную), как и команда JMP; отсутствует только короткая (SHORT) форма. По воздействию на регистры CS и (E)IP команда CALL также соответствует команде JMP, но дополнительно включает в текущий сегмент стека АДРЕС ВОЗВРАТА с соответствующей коррекцией указателя стека (E)SP.
Команда RET допускает указание в поле операнда непосредственной константы immed16. В таких командах после извлечения из стека АДРЕСА ВОЗВРАТА константа immed16 прибавляется к содержимому регистра (E)SP. В результате в стеке пропускаются параметры, переданные подпрограмме.
Команда заполнения байта по условию (SETccc r8/m8) (см. табл. 2.21) предназначена для того, чтобы сохранить зафиксированное флагами условие для дальнейших вычислений. Мнемоника условия «ссс» полностью совпадает с условием переходов (табл. 2.21).

КОМАНДЫ  ПРЕРЫВАНИЯ
Двухбайтовая команда INT n (табл. 2.22) в начале включает в стек содержимое регистра флагов (E)FLAGS и полный адрес возврата, представленный содержимым регистров CS и (E)IP. Кроме этого сбрасывается в нуль флаг разрешения прерываний IF. После этого осуществляется кос венный переход через элемент «n» дескрипторной таблицы прерываний IDT.
Однобайтовый вариант этой команды INT 3 называется прерыванием контрольной точки.
Команда прерывания INTO эквивалентна команде INT 4, если установлен флаг переполнения OF = 1. Когда же флаг OF = 0, команда INTO не производит никаких действий.
Команда возврата из прерывания IRET извлекает из стека сохраненные в нем адрес возврата и регистр флагов.

Таблица 2.22 – Команды прерывания

INT n	Выполнение программного прерывания
INT 3	Однобайтовая команда прерывания по типу 3
INTO	Выполнение программного прерывания 4, если OF=1
IRET	Возврат из прерывания


2.5  ПРОЦЕССОР  ЧИСЕЛ  С  ПЛАВАЮЩЕЙ  ТОЧКОЙ  (FPU)
2.5.1  ИСТОРИЯ
Сопроцессор 8087 был разработан для использования в системах с процессорами семейства 8086/88. Процессор 8086 был первым микропроцессором семейства, где было применено разделение процессорного устройства на две части для того, чтобы выполнять высокоскоростную обработку числовых операций. Сопроцессор 8087 для этого семейства процессоров реализовывал полную поддержку числовых операций в соответствии с ранними предложениями стандарта IEEE 754 для двоичных арифметических операций с плавающей точкой.
С появлением сопроцессора 80287 стали возможны ускоренные арифметические вычисления для быстродействующих многозадачных и многопользовательских систем на основе процессора 80286. Использование арифметического сопроцессора для многозадачной работы позволило задействовать полную защиту управления памятью процессора 80286 и другие защитные возможности.
Арифметические сопроцессоры 387 DX и SX стали третьим поколением числовых процессоров фирмы Intel. Они реализуют последний стандарт IEEE 754, куда добавлены новые тригонометрические функции, с использованием нового дизайна и процесса CHMOS-III для того, чтобы позволить работать на более высокой тактовой частоте при требовании меньшего количества тактов на выполнение одной команды. Вместе, арифметический сопроцессор 387 с дополнительными инструкциями и усовершенствованным стандартом дали довольно много удобств и достаточную надежность для прикладных программ, которым необходима высокая скорость и большой объем памяти при 32-х разрядных операциях микропро-цессора 386 (TM).
Арифметический модуль для чисел с плавающей точкой процессора i486 является по существу встроенным в микросхему эквивалентом сопроцессора 387 DX, соответствующим как стандарту IEEE 754, так и более новому, обобщенному стандарту IEEE 854. Реализация арифметического устройства в одной микросхеме с процессором имеет результатом значительное повышение эффективности интенсивных математических вычислений.
Модуль обработки целочисленных операций (CPU) и Модуль обработки операций с плавающей точкой (FPU) координируют свою активность в соответствии с программным обеспечением. Более того, встроенный координатор позволяет устройству обработки целочисленных операций работать с другими командами в то время, когда модуль обработки операций с плавающей точкой выполняет математические операции. Программы могут использовать эти параллельные вычисления для дальнейшего повышения производительности систем и во всех других отношениях.
Устройство с плавающей точкой (FPU) процессора PENTIUM реализовано совместно с целочисленным устройством на одном кристалле и использует высокий уровень конвейеризации. FPU может выполнять одну операцию с плавающей точкой в каждом такте. FPU может также получать и выполнять две команды с плавающей точкой (спаривание), одной из которой должна быть команда обмена (FXCH).
Кроме традиционной поддержки числовых расчетов для научных разработок FPU имеет встроенные возможности для коммерческих вычислений. Он может обрабатывать десятичные числа из 18 и более цифр без ошибки округления, производя точную арифметику над целыми такой величины как 264 или 1018. Точная арифметика особенно важна при банковских операциях, где ошибка округления может привести к финансовым потерям и тяжбам, которые не легко уладить.

2.5.2  МАТЕМАТИЧЕСКИЙ  СОПРОЦЕССОР  x87  (FPU)
Математический сопроцессор x87 выполняет операции с плавающей точкой в 50..100 раз быстрее эквивалентных подпрограмм процессора x86. Программисты могут включать команды сопроцессора x87 в программы для процессора x86. Когда основной процессор встречает команду сопроцессора, он передает ее для выполнения этому сопроцессору x87. Возникает иллюзия того, что процессор x86 может выполнять команды с плавающей точкой.
При отсутствии сопроцессора x87 основной процессор x86, обнаружив команду сопроцессора, передает управление подпрограмме обработки особого случая, указанной операционной системой. Фирма INTEL поставляет подпрограмму Е80x87, которая программно эмулирует действия сопроцессора x87. Эта подпрограмма создает иллюзию наличия в системе сопроцессора x87, но операции с плавающей точкой выполняются в 50..100 раз медленнее.

2.5.3  ФОРМАТЫ  ЧИСЕЛ  С  ПЛАВАЮЩЕЙ  ТОЧКОЙ
Сопроцессор х87 распознает три формата чисел с плавающей точкой, хранимых в памяти (рис. 2.6). Внутри сопроцессора все числа преобразуются в расширенный формат.
Каждый формат состоит из трех полей: знак (S), порядок и мантисса (рис. 2.6). Числа в этих форматах занимают в памяти: 4, 8 или 10 байт.
Байт с наименьшим адресом в памяти является младшим байтом мантиссы. Байт с наибольшим адресом содержит семь старших бит порядка и БИТ ЗНАКА (S). Знак кодируется: 0 – плюс, 1 – минус. 
В ПОЛЕ МАНТИССЫ хранятся только нормализованные числа. Для этого необходимо скорректировать порядки (т.е. сдвинутьзапятую) так, чтобы в целой части числа (в двоичной системе счисления) до запятой была 1. Поэтому все мантиссы представляются в форме:

 	1.ХХХХХХХ...ХХХ   ,			где:      Х = 0 или 1


1 бит	8 бит	23 бита	
Одинарная точность 
(Короткое вещественное)	S	Порядок	Мантисса	   4 байта
	1 бит	11 бит	52 бита	
Двойная точность 
(Длинное вещественное)	S	Порядок	Мантисса	   8 байт
	1 бит	15 бит	64 бита	
Расширенная точность 
(Временное вещественное)	S	Порядок	Мантисса	   10 байт

Рис. 2.6 – Форматы чисел с плавающей точкой

Но если старший бит всегда содержит 1, ее можно не хранить в каждом числе с плавающей точкой. Поэтому ради дополнительного бита точности сопроцессор х87 хранит числа одинарной и двойной точности без старшего бита мантиссы (с неявным старшим битом). Исключением является кодирование нуля – нулевые поля мантиссы и порядка.
Числа с расширенной точностью хранятся и обрабатываются с яв-ным старшим битом.
ПОЛЕ ПОРЯДКА определяет степень числа 2, на которую нужно умножить нормализованную мантиссу для получения исходного значения числа с плавающей точкой.
Чтобы хранить отрицательные порядки, в ПОЛЕ ПОРЯДКА находится сумма истинного порядка и положительной константы, называемой СМЕЩЕНИЕМ. Для одинарной точности смещение равно – 127, для двойной точности – 1023, для расширенной точности – 16383 (т.е. половине максимального порядка). Двоичный код смещения для всех порядков равен :       0111…111  .
Числа в поле порядка:  00000..00  и  11111..111 – зарезервированы для спецкодирования или обработки ошибок.
Запись чисел с плавающей точкой в памяти:
Одинарная точность: 		(-1)S (1 . Х1 Х2 ... Х23) * 2(E - 127),
Двойная точность: 		(-1)S (1 . Х1 Х2 ... Х52) * 2(E - 1023),
Расширенная точность: 		(-1)S (Х1 . Х2 ... Х64) * 2(E - 16383),
где 		S – значение знакового бита;
 		Х1 Х1 .. – биты, хранимые в поле мантиссы;
 		Е – число, хранимое в поле порядка.

Расширенный формат используется преимущественно внутри сопроцессора для представления промежуточных результатов, чтобы упростить получение округленных окончательных результатов в формате двойной точности.

Таблица 2.23 – Диапазон представления чисел в десятичной системе

Формат	Значащих десятичных цифр	Наименьшая сте-пень числа 10	Наибольшая сте-пень числа 10
Одинарный 
Двойной 
Расширенный	7
15
19	-37
-307
-4931	38
308
4932

Диапазон представления чисел с плавающей точкой в десятичной системе счисления приведен в  табл. 2.23  и  рис. 2.7.
Если результат арифметической операции меньше наименьшего отрицательного числа или больше наибольшего положительного числа конкретного формата, то говорят, что операция вызвала ПЕРЕПОЛ-НЕНИЕ. Если же результат арифметической операции ненулевой, но находится между наибольшим отрицательным и наименьшим положительным числами конкретного формата, то говорят, что в операции возникло АНТИПЕРЕПОЛНЕНИЕ.
Отметим, что  рис. 2.7  абсолютно симметричен для положительных и отрицательных чисел. Следовательно, операция нахождения абсолютного значения никогда не может вызвать ни переполнения, ни антипереполнения.

Наименьшее
отрицательное		Наибольшее
отрицательное			Наименьшее
положительное		Наибольшее
положительное
							
1	1..10	1..11		1	0..01	0..00	
	0	0..01	0..00		0	1..10	1..11
Одинарнарная точность
–3.371038	–1.1710-38	1.1710-38	3.371038
Двойная точность
–1.6710308	–2.2310-308	2.2310-308	1.6710308
Расширенная точность
–1.2104932	–3.3710-4932	3.3710-4932	1.2104932
Во всех форматах
1	1..11	0..00		1	0..00	0..00			0	0..00	0..00		0	1..11	0..00
–	–0	+0	+

Рис. 2.7 – Диапазон представления чисел

Сопроцессор х87 имеет команды, которые преобразуют целые числа в числа с плавающей точкой и – наоборот. Это необходимо при вычислениях, в которых имеются числа обоих форматов. Допустимые форматы ЦЕЛЫХ ЧИСЕЛ приведены на рис. 2.8:

Целое число	Дополнительный код	16 бит, 2 байта
	
Короткое целое	Дополнительный код	32 бита, 4 байта
	
Длинное целое	Дополнительный код	64 бита, 8 байт
		
Упакованное	8 бит	72 бита	
десятичное	S	0000000	18 десятичных тетрад	10 байт

Рис 2.8 – Форматы целых чисел

ЦЕЛОЕ СЛОВО – это 16-ти битовое целое число процессора х86 в дополнительном коде. КОРОТКОЕ ЦЕЛОЕ и ДЛИННОЕ ЦЕЛОЕ по-хожи на целое слово, но их длина больше.
УПАКОВАННОЕ ДЕСЯТИЧНОЕ ЧИСЛО состоит из 18 десятичных цифр, размещенных по две в байте. Знаковый бит находится в дополнительном 10-м байте. Младшие семь бит этого байта должны быть нулевыми.
При выполнении арифметических операций над числами с плаваю-щей точкой иногда возникают ошибочные условия или ОСОБЫЕ СЛУЧАИ:
	НЕДЕЙСТВИТЕЛЬНАЯ ОПЕРАЦИЯ – включает в себя, например, деление и умножение с операндами бесконечность и нуль, извлечение корня квадратного из отрицательного числа, попытку использовать несуществующий регистр сопроцессора х87 или др.
	ДЕНОРМАЛИЗОВАННЫЙ ОПЕРАНД – возникает, когда ради увеличения диапазона приходится жертвовать точностью.
	ДЕЛЕНИЕ НА НУЛЬ – дает в результате бесконечность. Наличие у сопроцессора х87 двух нулей (см. рис. 3.16) очевидным образом приводит к знаковым бесконечностям:
x / (+0) = +, 		-x / (+0) = -,
x / (-0) = -, 		-x / (-0) = +.

Сопроцессоры 87/287 имеет два режима управления бесконечно-стью: ПРОЕКТИВНЫЙ и АФФИННЫЙ.
В ПРОЕКТИВНОМ РЕЖИМЕ факт наличия двух бесконечностей скрыт (как скрыт факт наличия двух нулей), т.е. положительная бесконечность замыкается на отрицательную бесконечность (сравнение двух бесконечностей всегда дает ответ "равны"). Режим проективной бесконечности удобен для вычисления рациональных функций (значения в полюсах можно представить бесконечностями) и цепных дробей.
В АФФИННОМ РЕЖИМЕ распознаются две бесконечности (см. рис. 2.7) и два нуля; здесь все конечные числа «х» удовлетворяют усло-вию:
-  < x < +.
Аффинный режим либеральнее проективного, поскольку допускает больше операций над бесконечностями.
В сопроцессорах 387+ (и 287 XL) оставлено только аффинное представление бесконечности.

	ЧИСЛЕННОЕ ПЕРЕПОЛНЕНИЕ – возникает, когда результат слишком велик по абсолютной величине, чтобы быть представленным в формате приемника.
	ЧИСЛЕННОЕ АНТИПЕРЕПОЛНЕНИЕ – возникает, когда ненулевой результат по абсолютной величине слишком мал для представления, т.е. когда он слишком близок к нулю.
	НЕТОЧНЫЙ РЕЗУЛЬТАТ – возникает, когда результат операции не-возможно точно представить в формате приемника. Например, при делении 1.0 на 3.0 получается бесконечная дробь, которую невозможно точно представить ни в одном формате. Если особый случай неточного результата замаскирован, сопроцессор х87 округляет результат до обычного числа с плавающей точкой. Программист может выбирать один из четырех режимов округления (результаты операций на рис. 2.9 представлены звездочками.

округление к ближайшему числу

округление в направлении к нулю

округление к положительной бесконечности

округление к отрицательной бесконечности


Рис. 2.9 - Режимы округления неточного результата

 
2.5.4  РЕГИСТРЫ  СОПРОЦЕССОРА  х87

Сопроцессор х87 имеет регистры (рис. 2.10), удобные для вычислений над числами с плавающей точкой.
Операнды команд сопроцессора х87 могут находиться в памяти или в одном из восьми ЧИСЛЕННЫХ РЕГИСТРОВ. Эти регистры хранят числа преимущественно в формате расширенной точности. Обращение к операндам в регистрах осуществляется намного быстрее, чем к операндам в памяти.
Номер численного регистра, указанного в команде, сопроцессор всегда суммирует с содержимым поля  TOP  (или  ST – вершина стека) в регистре состояния. Сумма (берущаяся по модулю 8) определяет используемый численный регистр, т. е. регистры адресуются внутри сопроцессора, как замкнутый в кольцо стек (рис. 2.11).

16-ти битовый РЕГИСТР УПРАВЛЕНИЯ содержит поле МАСОК ОСОБЫХ СЛУЧАЕВ и поля округления чисел (рис. 2.12).
Младшие 6 битов отведены для МАСОК ОСОБЫХ СЛУЧАЕВ:
	IM 	– маска недействительной операции,
	DM 	– маска денормализованного операнда,
	ZM 	– маска деления на нуль,
	OM 	– маска переполнения,
	UM 	– маска антипереполнения,
	PM 	– маска точности (неточного результата).
	Численные регистры		15	16 бит	0
Регистр управления

Регистр состояния

Регистр тегов
Указатели особого случая
	Указатель команды	
		
		

	Указатель операнда	
		
		

	79	80 бит	0		
R0			
R1			
R2			
R3			
R4			
R5			
R6			
R7			
	
Рис. 2.10 – Регистры сопроцессора х87


R0	Третий от вершины	ST(3)
R1	Четвёртый от вершины	ST(4)
R2	и т. д.	ST(5)
R3		ST(6)
TОР	R4		ST(7)
101	 	R5	Вершина	ST(0)
R6	Первый от вершины	ST(1)
R7	Второй от вершины	ST(2)

Рис. 2.11 – Адресация численных регистров как стека


	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0
CW	--	--	--	IC												
					RC	PC	--	--	PM	UM	OM	ZM	DM	IM
																

Рис. 2.12 – Регистр управления (Control Word)

Когда бит маски содержит 0, возникновение соответствующего особого случая вызовет приостановку программы и появление прерывания процессора х86. Если же бит маски установлен в 1, то соответствующий особый случай замаскирован и формируются специальные значения чисел.

Два бита (8-й и 9-й) поля УПРАВЛЕНИЯ ТОЧНОСТЬЮ – РС – за-ставляют сопроцессор x87 округлять все числа перед загрузкой их в численные регистры до указанной точности:
•	РС = 11 – округление до расширенной точности (принимается по умолчанию),
•	РС  =  10  –  округление до двойной точности,
•	РС  =  00  –  округление до одинарной точности.
Задание пониженной точности (сокращение длины мантиссы) лик-видирует достоинство формата РТ (расширенной точности), но не повы-шает быстродействие сопроцессора.

Два бита (10-й и 11-й) поля УПРАВЛЕНИЯ ОКРУГЛЕНИЕМ – RC – выбирают один из четырех режимов округления (см. рис. 2.9):
•	RC = 00 – округление к ближайшему (принимается по умолчанию),
•	RC = 01 – округление к отрицательной бесконечности,
•	RC = 10 – округление к положительной бесконечности,
•	RC = 11 – округление к нулю.

Бит УПРАВЛЕНИЯ БЕСКОНЕЧНОСТЬЮ – IC – задает режим ин-терпретации бесконечности:
•	IС = 0 – проективный режим (принимается по умолчанию),
•	IС = 1 – аффинный режим.
В сопроцессорах 387+ бит 12 слова управления игнорируется. Ис-пользуется только аффинный режим.

16-ти битовый РЕГИСТР СОСТОЯНИЯ содержит флаги, модифицируемые после выполнения команд, а также поле вершины стека (TOP) (см. рис. 2.13).

	15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0
SW	B	C3														
			TOP	C2	C1	C0	ES	SF	PE	UE	OE	ZE	DE	IE
																

Рис. 2.13 – Регистр состояния (Status Word)

Младшие 6 бит содержат ФЛАГИ ОСОБЫХ СЛУЧАЕВ:
•	IE – недействительная операция,
•	DE – денормализованный операнд,
•	ZE – деление на нуль,
•	OE – переполнение,
•	UE – антипереполнение,
•	PE – точность (неточный результат).
При возникновении численного особого случая (замаскированного или нет) сопроцессор устанавливает соответствующий флаг в 1.
Флаги особых случаев «зависают», т.е. сбросить их в нуль должен программист, загружая в регистр состояния новое значение.
Бит НАРУШЕНИЯ СТЕКА – SF – устанавливается в 1, если команда вызывает переполнение стека (включение в уже заполненный стек) или антипереполнение стека (извлечение из пустого стека). Когда SF = 1, бит кода условия С1 показывает переполнение (С1 = 1) или антипереполнение (С1 = 0) стека.
Бит СУММАРНОЙ ОШИБКИ – ES – устанавливается в 1, когда команда порождает любой незамаскированный особый случай.
Биты С0,С1,С2,С3 содержат КОДЫ УСЛОВИЙ, являющиеся результатом сравнения или команды нахождения остатка. Интерпретация кода условия зависит от конкретной команды.
Поле ВЕРШИНЫ СТЕКА – TOP (Stack Top) – содержит номер регистра, являющегося верхним элементом стека (рис. 2.11). Его содержимое прибавляется (по модулю 8) ко всем номерам численных регистров.
Бит ЗАНЯТОСТИ – В – устанавливается в 1, когда сопроцессор 8087 выполняет команду или сигнализирует прерывание, а когда сопроцессор свободен, этот бит сбрасывается в 0.
16-ти битовый РЕГИСТР ТЭГОВ состоит из 8-ми двухбитовых полей (рис. 2.14). Каждое поле соответствует своему численному регистру и индицирует состояние регистра:
•	00 – действительное число (т.е. любое конечное ненулевое число),
•	01 – нуль,
•	10 – недействительное число (например, нечисло или бесконечность),
•	11 – пустой регистр.

15	14	13	12	11	10	9	8	7	6	5	4	3	2	1	0
															
Тэг7	Тэг6	Тэг5	Тэг4	Тэг3	Тэг2	Тэг1	Тэг0
															

Рис. 2.14 – Регистр тэгов

Регистры отмечаются как пустые, если они не инициализированы или их содержимое было «извлечено» из стека численных регистров. Сопроцессор (FPU) использует этот тэг для обнаружения антипереполнения стека (слишком много извлечений) и переполнения стека (слишком много включений). Обе ситуации приводят к возникновению особого случая недействительной операции. Когда этот особый случай замаскирован, но в операции возникает переполнение или антипереполнение стека, сопроцессор корректирует ST, как будто ничего необычного не произошло, и возвращает как результат операции неопределенность.
УКАЗАТЕЛИ ОСОБОГО СЛУЧАЯ (команды и операнда) (32 или 48 битов) предназначены для процедур обработки особых случаев. Они имеют два формата – в зависимости от работы сопроцессора в реальном или виртуальном режимах (рис. 2.15).

Реальный режим		Виртуальный режим
Адрес команды (0..15)		
Адрес команды (16..19)	Код операции (0..10)		Смещение команды
			Селектор команды

Адрес операнда (0..15)		Смещение операнда
Адрес операнда (16..19)	-----------------		Селектор операнда
			

Рис. 2.15 – Указатели особого случая

В виртуальном режиме сопроцессор выдает селектор и смещение подозрительной команды и ее операнда в памяти (если он есть).
В реальном режиме указатели содержат 20-ти битовые адреса этих объектов, а также 11 младших бит кода операции.

2.5.5  КОМАНДЫ  СОПРОЦЕССОРА  х87
Форматы команд сопроцессора х87 аналогичны форматам команд х86. Ассемблерные мнемоники команд сопроцессора начинаются с буквы F (Floating) и их легко обнаружить, т.к. таких мнемоник у процессора х86 нет.
Вторая буква I (Integer) обозначает операцию с целым двоичным числом из памяти, буква B (Binari-coded decimal) – операцию с десятичным операндом из памяти, а вторая "пустая" буква определяет операцию с вещественными числами (с плавающей точкой).
Предпоследняя или последняя буква R (reveres) указывает обратную операцию (для вычитания и деления).
Последняя буква P (Pop) идентифицирует команду, заключительным действием которой является извлечение из стека.
В командах неявно указывается численный регистр сопроцессора, адресуемый вершиной стека  ST  или  ST(0)  (Stack Top).
Численные регистры адресуются относительно вершины стека. Например, команда:
 FADD 	  ST(0),ST(3)
прибавляет содержимое третьего регистра от вершины стека к содержимому верхнего регистра стека. 
Верхний регистр стека можно обозначить ST или ST(0). Например, команда:
 FADD 	  ST(0),ST(0)
прибавляет содержимое верхнего регистра стека к нему же, т.е. уд-ваивает содержимое регистра ST(0).
Для операндов в памяти допускаются все режимы адресации процессора х86, например:
 FADD 	[BX]
 FADD 	ANAME [BX] [SI]
В командах  FPU  НЕ ИСПОЛЬЗУЕТСЯ НЕПОСРЕДСТВЕННАЯ АДРЕСАЦИЯ   операндов.


КОМАНДЫ  ПЕРЕДАЧИ  ДАННЫХ  СОПРОЦЕССОРА  х87
Команды включения в стек FLD, FILD, FBLD и все команды вклю-чения констант – сначала уменьшают указатель стека на 1, преобразуют операнд-источник в расширенный формат (если он уже не представлен в таком формате) и помещают его в новую вершину стека.
Мнемоники команд с целочисленным (двоичным) операндом начи-наются с «FI», а с десятичным операндом – с «FB».

Таблица 2.24 – Команды  передачи  данных

Мнемоника, Операнд	Тип команды
С плав. точкой	Целое число	Десят.число	
FLD
FSTP
FST
FXCH	FILD
FISTP
FIST
-	FBLD 
FBSTP 
-
-	(–) Включить в стек 
Извлечь из стека (+) 
Копирование
Обмен регистров 
FLDZ
FLD1
FLDPI
FLDLG2
FLDLN2
FLDL2T
FLDL2E	(–) Включить в стек 0
(–) Включить в стек 1
(–) Включить в стек  = 3.1415... 
(–) Включить в стек log10 (2) 
(–) Включить в стек ln (2)
(–) Включить в стек log2 (10) 
(–) Включить в стек log2 (e) 

Обозначения: 	(–) – декремент указателя стека до включения опе-ранда в вершину стека;  (+) – инкремент указателя стека после извлечения операнда из вершины стека.
Команды извлечения из стека преобразуют содержимое вершины стека в необходимый формат, помещают его в операнд-приемник (память или регистр) и после этого инкрементируют указатель стека.
Команды копирования делают то же самое, но не изменяют указа-тель стека. Отсутствующую команду FBST можно реализовать двумя командами:
 FLD   ST(0)	; продублировать вершину стека с декрементом
 FBSTP 		; извлечь из стека с инкрементом указателя.
При выполнении команд передачи данных может возникнуть необ-ходимость указать новую вершину стека. Команды FINCSTP и FDECSTP осуществляют соответственно инкремент и декремент указателя стека ST. Они не влияют на регистр тэгов и численные регистры.

АРИФМЕТИЧЕСКИЕ  КОМАНДЫ
Базовые арифметические команды – сложение, вычитание умноже-ние и деление – имеют два операнда (источник и приемник) и реализуют действия:
 ПРИЕМНИК    ПРИЕМНИК  $  ИСТОЧНИК,
 где:   $ - основные команды :   +,  –,  *,  / .

Для некоммутативных команд вычитания и деления имеются обратные варианты команд (в конце мнемоники добавляется буква R – reveres):
 ПРИЕМНИК    ИСТОЧНИК  $  ПРИЕМНИК.

ВО ВСЕХ КОМАНДАХ ОДИН ОПЕРАНД ДОЛЖЕН БЫТЬ В ВЕРШИНЕ СТЕКА. Мнемоники всех базовых арифметических команд приведены в табл. 2.25.

 Таблица 2.25 – Мнемоники базовых арифметических команд

Команды	Основная	Целое в памяти	С извлечением
Сложение
Вычитание
Обратное вычитан.
Умножение
Деление
Обратное деление	FADD
FSUB
FSUBR
FMUL
FDIV
FDIVR	FIADD
FISUB
FISUBR
FIMUL
FIDIV
FIDIVR	FADDP
FSUBP
FSUBRP
FMULP
FDIVP
FDIVRP

Имеется 6 форм базовых команд. Действия всех шести форм команд иллюстрируется на примере команды вычитания.
	FSUB  mem,
	FISUB mem – адресуемый операнд в памяти является источником, а регистр вершины стека ST(0) – приемником. Преобразование в расширенный формат с плавающей точкой осуществляется в процессе выполнения команды. УКАЗАТЕЛЬ СТЕКА НЕ МОДИФИЦИРУЕТСЯ.

	FSUB ST, ST(i) – любой численный регистр ST(i) служит источником, а ST(0) – приемником. УКАЗАТЕЛЬ СТЕКА НЕ МОДИФИЦИРУЕТСЯ.

	FSUB ST(i), ST – вершина стека является источником, а ST(i) - прием-ником. УКАЗАТЕЛЬ СТЕКА НЕ МОДИФИЦИРУЕТСЯ.

	FSUBP ST(i), ST – вершина стека является источником, а ST(i) – приемником. По окончании операции источник ST(0) извлекается из стека с последующим ИНКРЕМЕНТОМ УКАЗАТЕЛЯ СТЕКА (рис. 2.16).

	FSUB – (команда с классической стековой адресацией – использует только ST1, ST0) – извлекает из вершины стека источник (потом инкрементирует указатель стека), затем извлекает приемник (еще раз инкрементирует указатель стека), выполняет операцию и перед включением результата в стек декрементирует указатель. В итоге – ВЕРШИНА СТЕКА СДВИНУЛАСЬ В СТОРОНУ УВЕЛИЧЕНИЯ (рис. 2.17). Последняя форма является частным случаем предыдущей.

					
ST	x	ST(0)			
	y	ST(1)	ST	y	ST(0)
					
					
	z	ST(i)		z - x	ST(i-1)
					

Рис. 2.16 – Действие команды FSUBP ST(i),ST

					
					
ST	x	ST(0)			
	y	ST(1)	ST	y - x	ST(0)
	z			z	
					
					

Рис. 2.17 – Действие команды FSUB
ДОПОЛНИТЕЛЬНЫЕ  АРИФМЕТИЧЕСКИЕ  КОМАНДЫ
Эти команды без явных операндов выполняют действия над содер-жимым вершины стека, результат помещают туда же БЕЗ МОДИФИКАЦИИ УКАЗАТЕЛЯ СТЕКА.

	FABS – нахождение абсолютной величины.
	FCHS – изменение знака операнда.
	FRNDINT – округление операнда до целого в формате с плавающей точкой.
	FSQRT – извлечение квадратного корня.
	FPREM – вычисляет остаток от деления содержимого ST(0) на число из ST(1). Остаток замещает число в ST(0).
	FSCALE – масштабирование на степень числа 2 – прибавляет целое число из ST(1) к порядку в регистре ST(0), т.е. умножает (или делит) ST(0)  на  число  2(ST(1)). Эту команду можно использовать для возведения числа  2  в целую степень (положительную или отрицательную).
	FXTRACT – разлагает содержимое ST(0) на два числа: несмещенный порядок (замещает старое значение в ST(0)) и знаковую мантиссу (включаемую сверху, т.е. в ST(7)).
Команда FSCALE, находящаяся после команды FXTRACT, восстанавливает исходное число.

КОМАНДЫ  СРАВНЕНИЙ
	FCOM   ST(i)/mem – сравнивает содержимое ST(0) с операндом "x" (в численном регистре или в памяти), т.е. производит вычитание операндов без запоминания результата и устанавливает коды условий в регистре состояния (таблица 2.26).
	FICOM  mem – сравнивает содержи мое вершины стека ST(0) с целым числом в памяти.
	FCOMP ST(i)/mem – аналогична команде FCOM, но после сравнения производит извлечение операнда из вершины стека.
	FCOMPP  ST(i) – сравнивает ST(0) c ST(i) и извлекает из стека оба операнда.
	FTST – сравнивает вершину стека с нулем.
	FXAM – сравнивает вершину стека с нулем, но выставляет 4 флага условий (в частности, определяется ненормализованная мантисса, бес-конечность, нечисло и др.).
	FCOMI  ST(0),ST(i)  –  сравнение вещественных чисел и установка флагов в  EFLAGS (P6+).
	FCOMIР  ST(0),ST(i)  –  сравнение вещественных чисел и установка флагов в  EFLAGS  и извлечение операнда из вершины стека (P6+).

Флаги  условий (С0, С3) сопроцессора х87 используются для организации условных переходов микропроцессором х86. Для этого командой – FSTSW  AX – содержимое регистра состояния х87 копируется в аккумулятор АХ микропроцессора х86. После этого командой – SAHF – старший байт аккумулятора (АН) передается в младший байт регистра флагов. При этом условию С0 соответствует флаг СF, а условию С3 - флаг ZF.

ТРАНСЦЕНДЕНТНЫЕ  КОМАНДЫ
К элементарным трансцендентным функциям относятся:
	тригонометрические функции (sin, cos, tg и др.),
	обратные тригонометрические функции (arcsin, arctg и др.),
	логарифмические функции (log2(x), log10(x), loge(x)),
	показательные функции (xy, 2x, 10x, ex),
	гиперболические функции (sh, ch, th и др.),
	обратные гиперболические функции (arsh, arch, arth и др.).

Таблица 2.27 – Трансцендентные команды

Мнемоника	Описание команды	Вычисляемая функция
FPTAN	Частичный тангенс	ST(1) / ST(0) = tg (ST(0))
FSIN	Синус(387+)	ST(0) = sin (ST(0))
FCOS	Косинус (387+)	ST(0) = cos (ST(0))
FSINCOS	Синус, косинус  (387+)	ST(7) = sin (ST(0));
ST(0) = cos (ST(0))
FPATAN	Частичный арктангенс	ST(0) = arctg (ST(1)/ST(0)
FYL2X	Двоичный логарифм	ST(0) = ST(1) * log2 (ST(0))
FYL2XP1	Двоичный логарифм	ST(0) = ST(1) * log2 (ST(0)+1)
F2XM1	Показательная функция	ST(0) = 2(ST(0)) – 1

Сопроцессор х87 вычисляет любую из элементарных трансцендентных функций от аргументов двойной точности, давая результат двойной точности с ошибкой младшего разряда округления. Аргументы трансцендентных команд должны быть нормализованными.

Команда FPTAN нахождения частичного тангенса в качестве ре-зультата выдает два числа (сопроцессоры 87/287):
y / x = tg (ST(0)).
Число «y» заменяет старое содержимое ST(0), а число «x» включается сверху. Поэтому, после выполнения команды указатель стека уменьшится на 1, число «х» будет записано в новую вершину стека ST(0), а число «y» – в регистр ST(1).
Для получения значения тангенса необходимо выполнить команду FDIV. Две команды FPTAN и FDIV выбирают аргумент из вершины стека и туда же помещают значение тангенса (БЕЗ МОДИФИКАЦИИ УКАЗАТЕЛЯ ВЕРШИНЫ СТЕКА). Две команды FPTAN и FDIVR вычисляют значение котангенса.
Для команды FPTAN аргумент задается в радианах и должен находится в диапазоне (сопроцессоры 87/287):
0 <= ST(0) <= 1/4.
Для СОПРОЦЕССОРОВ 387+ аргумент команды FPTAN (в радианах) может быть любым:
–263 <= ST(0) <= +264.
Значение тангенса исходного угла  tg(ST(0))  замещает аргумент и в стек включается сверху 1,0 (для программной совместимости с предыдущими сопроцессорами 87/287).

Значения остальных тригонометрических функций (для сопроцессоров 87/287) можно вычислить, используя формулы тангенса половинного угла (табл. 2.28). Поэтому перед началом вычисления тригонометрических функций с использованием команды FPTAN необходимо аргумент в ST(0) поделить на 2. Новое значение аргумента «z» должно также удовлетворять условию: 0  z  1/4.

Таблица 2.28 – Формулы для вычисления тригонометрических функций

 
 

 
 

 
 


В СОПРОЦЕССОРАХ 387+ появились новые команды:

	FSIN – вычисление синуса;
	FCOS – вычисление косинуса;
	FSINCOS – вычисление синуса и косинуса.

Все они воспринимают в ST(0) исходный угол, измеряемый в радианах и находящийся в диапазоне:  –263 <= ST(0) <= +263.  Команды FSIN и FCOS возвращают результат на место аргумента, а команда FSINCOS возвращает значение синуса на место аргумента и включает значение косинуса в стек.

Команда FPATAN вычисляет arctg (ST(1)/ST(0)). Два операнда извлекаются из стека, а результат включается в стек. Поэтому окончательно, УКАЗАТЕЛЬ СТЕКА УВЕЛИЧИВАЕТСЯ НА 1. Операнды этой команды для сопроцессоров 8087/287 должны удовлетворять условию:
 0 < ST(1) < ST(0).
В сопроцессорах 387+ ограничений на диапазон допустимых аргументов команды FPATAN не существует.

Для вычисления остальных обратных тригонометрических функций по аргументу «z» необходимо предварительно подготовить операнды в ST(0) и ST(1) в соответствии с табл. 2.29 (делить операнды не нужно).

Таблица 2.29 – Формулы для вычисления обратных тригонометрических функций
   

 

 
 

 

 


Команда FYL2X вычисляет функцию:  ST(1) * log2 ST(0).  Два операнда извлекаются из стека, а затем результат включается в стек. По-этому УКАЗАТЕЛЬ СТЕКА УВЕЛИЧИТСЯ НА 1. В команде требуется удовлетворение естественного для логарифмической функции условия:
 ST(0) > 0 .
Значения других логарифмических функций вычисляются по формулам в табл. 2.30 с загрузкой в регистр ST(1) необходимых констант командами: FLDLN2 и FLDLG2.

Таблица 2.30 - Формулы для вычисления логарифмических функций

 log2 (x)  FLD1 ; FLD x ; FYL2X ;
  ln (x) = ln (2) * log2 (x)  FLDLN2 ; FLD x ; FYL2X ;
  lg (x) = lg (2) * log2 (x)  FLDLG2 ; FLD x ; FYL2X .

Еще одна логарифмическая команда FYL2XP1 вычисляет функцию: ST(1) * log2 (ST(0) + 1). Причина появления этой команды заключается в получении более высокой точности вычисления функции: log(1 + x). Эта функция часто встречается в финансовых расчетах, а также при вычислении обратных гиперболических функций.

Команда показательной функции  F2XM1  вычисляет:
F2XM1 [ST(0)] = 2(ST(0)) – 1.
Аргумент показательной функции должен находится в диапазоне : для сопроцессоров   87/287: 			0 <= ST(0) <= 0.5;
для сопроцессоров   387+: 			–1 <= ST(0) <= +1.

Вычисление функции 2х – 1 вместо функции 2х позволяет избежать потери точности, когда аргумент «х» близок к 0 (а значение функции 2х близко к 1). Остальные показательные функции вычисляются по формулам  в  табл.  2.31.

 Таблица 2.31 – Формулы для вычисления показательных функций

 2x = [2x – 1] + 1 = F2XM1 (x) + 1 ; 
 ex = 1 + [2(x * log2(e)) – 1]  =  1 + F2XM1 (x * log2(e)) ;  
 10x = 1 + [2(x * log2(10))– 1] = 1 + F2XM1 (x * log2(10));  
 аx = 1 + [2(x * log2(а)) – 1]  =  1 + F2XM1 (x * log2(a)) . 

 
Таблица 2.32 – Формулы для вычисления гиперболических функций

Cинус гиперболический	 

Косинус гиперболический	 

Тангенс гиперболический	 

Котангенс гиперболический	 

Косеканс гиперболический	 

Секанс гиперболический	 

 
Таблица 2.33 – Формулы для вычисления обратных гиперболических
 функций
 
                            где:              

 
                            где:              

 
                            где:                                

 

 

 


КОМАНДЫ  УПРАВЛЕНИЯ  СОПРОЦЕССОРОМ  х87
Команды управления сопроцессором х87 обеспечивают доступ к нечисловым регистрам. Мнемоники, которые начинаются с FN, соответствуют командам «БЕЗ ОЖИДАНИЯ», т.е. процессор х86 передает их для выполнения в сопроцессор х87, не проверяя занятость сопроцессора и игнорируя численные особые случаи.
Мнемоники без буквы «N» соответствуют командам «С ОЖИДАНИЕМ», т.е. заставляют процессор х86 реагировать на незамаскированные особые случаи и ожидать завершения выполнения команд в сопроцессоре х87. В общем случае, программистам рекомендуется избегать форм команд «без ожидания».
	Команда – FNSTCW mem (FSTCW mem) – передает содержимое регистра управления (CW) в ячейку памяти.
	Команда – FLDCW mem – загружает регистр управления (CW) из ячейки памяти. Эти две команды применяются для изменения режима работы сопроцессора х87.
	Команда – FNSTSW mem (FSTSW mem) – передает содержимое реги-стра состояния (SW) сопроцессора х87 в ячейку памяти.
	Команда – FNSTSW AX (FSTSW AX) – передает содержимое регистра состояния (SW) сопроцессора в регистр AX микропроцессора х86.
	Команда – FNCLEX (FCLEX) – сбрасывает в регистре состояния сопроцессора флаги особых случаев, а также биты ES и BUSY. Эти флаги не сбрасываются аппаратно и должны явно сбрасываться программистом.
	Команда – FNINIT (FINIT) – инициализирует регистры управления, состояния и тэгов на значения, приведенные в табл. 2.34. Такое же действие производит аппаратный сигнал сброса – RESET.

Таблица 2.34 – Инициализация сопроцессора х87

Регистр	Выбор	Режим работы
Регистр
управления	(Режим бесконечности)	Проективный – (287) 
Афинный – (387+)
	Режим округления	Округление к ближайшему 
	Точность	Расширенная
	Все особые случаи	Замаскированы
Регистр
Состояния	Бит занятости	В = 0: Не занят
	Код условия	Не определен
	Указатель стека	TOP = 000
	Бит суммарной ошибки	ES = 0
Регистр тэгов		Все тэги показывают – "пу-стой" 

	Команда запоминания среды – FNSTENV mem (FSTENV mem) – записывает в память содержимое регистров: управления, состояния, тэгов и указателей особого случая. Формат этой информации в памяти для сопроцессоров 87/287 (и реального режима остальных процессоров) показан на рис. 2.18. (Для сопроцессоров 387+ в защищенном режиме виртуальной адресации при размере операндов 32 бита – все регистры занимают в памяти по 4 байта – старшие 2 байта могут быть нулевыми). Затем инициализируются все регистры так же, как и команда FNINIT.
	Команда – FLDENV – загружает среду, ранее запомненную командой FNSTENV. Эти команды применяются в процедурах обработки особых случаев, чтобы получить доступ к указателям особого случая.
 




	Нач. адрес
Регистр управления	0
Регистр состоя-ния	2 (4)
Регистр тегов	4 (8)
	Указатель команды		6 (12)
			
	Указатель операнда		10 (20)
			

Рис. 2.18 – Формат памяти 
в командах FSTENV, FLDENV




 

		Нач. адрес
	Регистр управле-ния	0
	Регистр состояния	2 (4)
	Регистр тегов	4 (8)
		Указатель ко-манды		6 (12)
				
		Указатель операнда		10 (20)
				
ST(0)	14 (28)
ST(1)	24 (38)
ST(2)	34 (48)
ST(3)	44 (58)
ST(4)	54 (68)
ST(5)	64 (78)
ST(6)	74 (88)
ST(7)	84 (98)

Рис. 2.19 – Формат памяти 
в командах FSAVE, FRSTOR
 

	Команда – FNSAVE mem (FSAVE mem) – записывает в память содержимое всех регистров сопроцессора. Всего в память передается 94 байта для сопроцессоров 87/287 и реального режима остальных процессоров (см. формат на рис. 2.19) и 108 байтов при 32-х битовых операндах в режиме виртуальной адресации.
	Команда – FRSTOR mem – восстанавливает все регистры сопроцессора из памяти. Эти команды в основном применяются для переключения задач.
	Команды FINCSTP и FDECSTP осуществляют соответственно инкре-мент и декремент указателя стека ST. Они не влияют на регистр тэгов и численные регистры.
	Команда FFREE ST(i) устанавливает тэг регистра ST(i) на указатель "пустой".
	Команда FNOP действует так же, как команда FST ST,ST(0), т.е. не производит никакой операции.
	Команда FSETPM переводит сопроцессор х87 в виртуальный режим.

2.6  КОМАНДЫ  MMX
Идея ММХ (первоначальное название этой технологии Multi-Media eXtension было изменено фирмой INTEL на Matrix-Math eXtension) родилась как средство, решающее часть проблем с нехваткой быстродействия центрального процессора для задач мульти-медиа приложений, характеризующихся следующими факторами:
•	небольшие целочисленные данные (например, 8-ми битовые графические пиксели или 16-ти битовые элементы звукового потока), которые обрабатываются в значительных объемах;
•	небольшие, многократно повторяющиеся циклы;
•	частые умножения и накапливания результата (выражения типа: «а = а + b»);
•	постоянные циклические обращения к памяти.
Например, процесс изменения яркости изображения (содержащего более миллиона 8-ми битовых пикселей) состоит из прибавления к каждому элементу массива определенной константы. Для этого необходимо:
•	загрузить 8-ми битовое значение цвета из массива в регистр процессора;
•	добавить к нему константу;
•	записать сумму в память   и
•	повторить этот цикл для каждого пикселя.
Однако процессор PENTIUM – 32-х разрядный и мог бы одновременно выполнить сложение данных сразу для четырех точек и затем одновременно записать результат в четыре смежные ячейки памяти.
Параллельность вычислений – ключевой момент в технологии ММХ. Поэтому большинство новых ММХ-команд построены по принципу «ОДНА КОМАНДА – МНОЖЕСТВО ДАННЫХ» (SINGLE INSTRUCTION MULTIBLE DATA – SIMD). Так как процессоры PENTIUM имеют 64-х разрядную шину данных, базовая длина слова данных новых ММХ-инструкций выбрана тоже 64 разрядной.
Основной тип данных ММХ – упакованное 64-х битовое целочисленное слово, которое состоит из нескольких меньших по разрядности данных и хранится в одном из ММХ-регистров или в памяти компьютера. Это 64-х битовое слово может представлять четыре подтипа данных:
•	упакованные байты (8 * 8 бит, Packed Byte),
•	упакованные слова (4 * 16 бит, Packed Word),
•	упакованные двойные слова (2 * 32 бита, Packed Doubleword)  и
•	счетверенное слово (1 * 64 бита, Quadword).
При разработке процессоров ММХ остро встала проблема совместимости нового процессора с уже имеющимся программным обеспечением. Для многозадачных операционных систем (Windows 9х, Windows NT или Unix) важно обеспечить корректное переключение между процессами (задачами).
Каждое приложение под управлением операционной системы работает в своем, так называемом, контексте задачи. У него свое адресное пространство, данные в регистрах и т.д. После истечения кванта времени, отведенного для задачи, операционная система сохраняет значения всех регистров, стека и других необходимых данных, после чего передает управление другой задаче. Однако, если операционная система не будет знать о существовании каких-нибудь ресурсов процессора (например, о новых ММХ-регистрах), их значения не сохранятся при переключениях и программы, использующие эти ресурсы, не смогут существовать.
Поэтому ММХ-регистры были «отражены» на имеющиеся у PENTIUMа восемь регистров для чисел с плавающей запятой (FP-регистры). Как показали исследования, очень редко требуется одновременное использование упакованных целочисленных данных ММХ-команд и данных с плавающей запятой.
Эти регистры со стороны ММХ-кода могут быть адресованы в произвольном порядке, в то время как FP-регистры адресуются в стековом режиме.
ММХ-регистры хранят только ММХ-данные, остальные восемь РОН-ов (ЕAX, ЕBX и др.) используются для адресации памяти, работы с циклами или любых других операций.
ММХ-данные хранятся в младших 64-х битах 80-ти битовых FP-регистров (на месте мантиссы FP-данных). Поле порядка и знака (старшие 16 бит) устанавливаются в состояние «все единицы», что соответствует состоянию «минус бесконечность» или «нечисло» для FP-данных. Поэтому FP-  и  ММХ-данные  невозможно случайно неверно интерпретировать.
Данные, используемые в мульти-медиа-приложениях, обычно имеют небольшую разрядность. 8-ми битовое значение цвета может передать только 256 оттенков цветовой составляющей (или более 16 миллионов цветовых оттенков для трех цветов: R,G,B). При использовании 8-ми битовых данных накопление цвета многих точек может выйти за предел представимых чисел. Обычно, если сложение двух чисел приводит к переполнению регистра, то старшие биты результата сохраняются во флагах CF или VF, а усеченная сумма сохраняется в регистре-приемнике. Для предотвращения последствий таких ситуаций необходимо производить проверку флагов на переполнение.
В мульти-медиа-приложениях обычно требуется не УСЕЧЕНИЕ РЕЗУЛЬТАТА, а так называемое «НАСЫЩЕНИЕ», т.е. при достижении максимального (или минимального) значения – данные больше не изменяются.
Процессоры с технологией ММХ предоставляют набор новых команд для параллельной обработки нескольких данных, упакованных в 64-х битовое слово. Так, 8-ми битовые упакованные данные могут исполь-зоваться при обработке изображений, где каждый байт представляет отдельный пиксель изображения или один из 8-ми битовых компонентов цвета в 24/32-х битовой цветовой модели (красный, зеленный, синий и альфа-канал (прозрачность)). 16-ти битовые данные чаще используются в средствах связи (модемы) и при обработке аудио-сигналов. 32-х и 64-х битовые значения полезны при промежуточных вычислениях над 8-ми или 16-ти битовыми данными.
Технология ММХ предусматривает 57 новых команд, Многие из них выполняют одни и те же операции (например, сложение или вычитание) над операндами различного размера (8, 16, 32 или 64 бита), а также, в зависимости от того, рассматривают ли они данные как «ЦЕЛЫЕ СО ЗНАКОМ» или «ЦЕЛЫЕ БЕЗ ЗНАКА». Различаются инструкции и по выполнению ими операций «С УСЕЧЕНИЕМ» или «НАСЫЩЕНИЕМ» (см. табл. 2.35).
Синтаксис инструкций ММХ включает следующие элементы:
•	префикс – P (Packed), указывающий на обработку упакованных ММХ-форматов;
•	мнемонику операции (например,  ADD,  CMP,  XOR...);
•	суффикс:
 - US (Unsigned Saturation) – насыщение беззнаковое;
 - S (Signed Saturation) – насыщение знаковое;
 - B,W,D,Q – тип данных : упакованные байты, слова, двойные слова или учетверенное слово.
Инструкции (команды), у которых типы входных и выходных данных различаются (например, преобразования), имеют два суффикса.
Для инструкций пересылки данных операнды источника и назначения могут находиться в памяти (m32 или m64), целочисленных регистрах (ir32) или регистрах ММХ (mm). Для остальных команд операнд-источник может быть и непосредственным, а операнд-приемник всегда является регистром ММХ. Для операндов в памяти применимы все существующие режимы адресации.
Все ММХ-команды, за исключением умножения, выполняются за один такт процессора. При умножении происходит задержка на три такта, однако, за счет внутреннего конвейера АЛУ, все последующие операции умножения выполняются без задержек.
Использование ММХ-команд в программах обработки изображений, компрессии аудио-, видеоданных и других вычислениях, активно применяющих параллельную обработку небольших данных, позволяет увеличить производительность в 1,5-2 раза, а в некоторых случаях – и до четырех раз.

Таблица 2.35 – Команды ММХ.
КОМАНДЫ  ПЕРЕСЫЛКИ
EMMS
	Очистка стека регистров – установка всех единиц в слове тегов
MOVD  mm, m32/ir32
	Пересылка данных в младшие 32 бита регистра ММХ с заполнением старших бит нулями 
MOVD  m32/ir32, mm
	Пересылка данных из младших 32-х бит регистра ММХ 
MOVQ  mm, mm/m64	Пересылка данных в регистр ММХ
MOVQ  mm/m64, mm	Пересылка данных из регистра ММХ
PACKSSDW   mm, mm/m64	Упаковка со знаковым насыщением двух двойных слов, расположенных в   mm,   и двух двойных слов   mm/m64   в четыре слова, помещаемых в   mm
PACKSSWB  mm, mm/m64
	Упаковка со знаковым насыщением четырех слов, расположенных в   mm,   и четырех слов mm/m64   в восемь байт, помещаемых в   mm 
PACKUSWB  mm, mm/m64
	Упаковка с насыщением четырех знаковых слов, расположенных в  mm,  и четырех слов  mm/m64 в восемь беззнаковых байт, помещаемых в   mm
PUNPCKHBW  mm, mm/m64
	Чередование в регистре-приемнике байтов старшей половины операнда-источника с байтами старшей половины операнда-приемника 
PUNPCKHWD  mm, mm/m64
	Чередование в регистре-приемнике слов старшей половины операнда-источника со словами старшей половины операнда-приемника 
PUNPCKHDQ  mm, mm/m64
	Чередование в регистре-приемнике двойного слова старшей половины операнда-источника с двойным словом старшей половины операнда-приемника
PUNPCKLBW  mm, mm/m64
	Чередование в регистре-приемнике байтов младшей половины операнда-источника с байтами младшей половины операнда-приемника
PUNPCKLWD  mm, mm/m64
	Чередование в регистре-приемнике слов младшей половины операнда-источника со словами младшей половины операнда-приемника 
PUNPCKLDQ mm, mm/m64
	Чередование в регистре-приемнике двойного слова младшей половины операнда-источника с двойным словом младшей половины операнда-приемника
АРИФМЕТИЧЕСКИЕ  И  ЛОГИЧЕСКИЕ  КОМАНДЫ
PADDB  mm, mm/m64
PADDW  mm, mm/m64
PADDD  mm, mm/m64	Сложение упакованных байт (слов или двойных слов) без насыщения (с циклическим переполнением) 
PADDSB  mm, mm/m64
PADDSW  mm, mm/m64	Сложение упакованных байт (слов) со знаковым насыщением
PADDUSB mm, mm/m64
PADDUSW mm,mm/m64	Сложение упакованных байт (слов) с беззнаковым насыщением
PSUBB  mm, mm/m64
PSUBW  mm, mm/m64
PSUBD  mm, mm/m64	Вычитание упакованных байт (слов, двойных слов) без насыщения (с циклическим переполнением) 
PSUDSB  mm, mm/m64
PSUDSW  mm, mm/m64	Вычитание упакованных знаковых байт (слов) с насыщением
PSUBUSB mm, mm/m64
PSUBUSW mm,mm/m64	Вычитание упакованных беззнаковых байт (слов) с насыщением 
PMULHW  mm, mm/m64
	Умножение упакованных знаковых слов с сохранением только старших 16 бит элементов результата
PMULLW  mm, mm/m64
	Умножение упакованных знаковых или беззнаковых слов с сохранением только младших 16 бит результата 
PMADDWD  mm, mm/m64
	Умножение четырех знаковых слов операнда-источника на четыре знаковых слова операнда приемника. Два двойных слова результатов умножения младших слов суммируются и записываются в младшие 32 бита операнда-приемника. Два двойных слова результатов умножения старших слов суммируются и записываются в старшие 32 бита операнда-приемника 
PAND  mm, mm/m64	Логическое "И" 
PANDN  mm, mm/m64	Логическое "И-НЕ" 
POR     mm, mm/m64	Логическое "ИЛИ"
PXOR  mm, mm/m64	Исключающее "ИЛИ" 
PCMPEQB  mm,mm/m64
PCMPEQW mm,mm/m64
PCMPEQD mm,mm/m64
	Сравнение (на равенство) упакованных байт (слов, двойных слов). Все биты элемента результата будут единичными (True) при равенстве соотвествующих элементов операндов и – нулевыми (False) при неравенстве
PCMPGTB mm,mm/m64
PCMPGTW mm,mm/m64
PCMPGTD mm,mm/m64

	Сравнение (по величине) упакованных знаковых байт (слов, двойных слов). Все биты элемента результата будут единичными (True), если соответствующий элемент операнда-получателя больше элемента операнда-источника, и нулевым (False) – в противном случае
КОМАНДЫ  СДВИГА
PSHIMW mm,imm

PSHIMD mm,imm

PSHIMQ mm,imm
	-	Представляет инструкции сдвига PSLLW, PSRAW, PSRLW с непосредственным операндом-счетчиком
-	 Представляет инструкции сдвига PSLLD, PSRAD, PSRLD с непосредственным операндом-счетчиком
-	Представляет инструкции сдвига PSLLQ, PSRLQ с непосредственным операндом-счетчиком 
PSLLW  mm, mm/m64
PSLLD  mm, mm/m64
PSLLQ  mm, mm/m64
	Логический сдвиг влево упакованных слов (двойных, учетверенных) операнда-приемника на количество бит, указанных в операнде-источнике, с заполнением младших бит нулями
PSRLW  mm, mm/m64
PSRLD  mm, mm/m64
PSRLQ  mm, mm/m64
	Логический сдвиг вправо упакованных слов (двойных, учетверенных) операнда-приемника на количество бит, указанных в операнде-источнике, с заполнением старших бит нулями
PSRAW  mm, mm/m64
PSRAD  mm, mm/m64
	Арифметический сдвиг вправо упакованных знаковых (двойных) слов операнда-приемника на количество бит, указанных в операнде-источнике, с заполнением старших бит знаковыми битами

2.7  КОМАНДЫ  SSE  и  3Dnow!
Основное отличие новой технологии «ММХ-2», так называемое, потоковое расширение – SSE (Streaming SIMD Extensions), получившей официальное название «Новый набор инструкций KATMAI» – KNI (Kat-mai New Instruction), – использование параллельных вычислений над числами с плавающей запятой одинарной точности (SIMD-FP, Single In-struction Multiple Data –– Floating Point). В добавление к 57 ММХ-командам процессор PЕNTIUM-3 (более раннее название – KATMAI) имеет еще 70 команд, ориентированных на SIMD-FP (направленных на обработку 3D-приложений), а также дополнительные целочисленные инструкции с регистрами ММХ и команды управления кэшированием. Добавлены специализированные команды для ускорения трансформации трехмерных объектов, эффектов освещения, атмосферных эффектов и др.
В архитектуру процессора PENTIUM-3 (1999 г.) добавлены восемь новых 128-ми битовых регистра ХММ0…ХММ7 (eXtended MultiMedia) и 32-х битовый регистр состояния-управления  MXCSR  для одновременной обработки четырех чисел с плавающей запятой одинарной точности (4 * 32 = 128 бит). Это позволяет использовать одновременно либо обработку вещественных чисел в блоке SIMD-FP и целых – в ММХ, либо SIMD-FP и основной блок с плавающей запятой двойной точности.
Расширение 3Dnow!, введенное фирмой AMD в процессорах К6-2 (1998 г.), расширяет возможности ММХ. Оно позволяет оперировать с новым типом данных – парой упакованных чисел в формате с плавающей точкой. Эти числа занимают по  2 * 32  бита  в  64-х  битовых  регистрах  ММХ.
Процессор К6-2 (и последующие процессоры фирмы AMD) имеет ДВА ИСПОЛНИТЕЛЬНЫХ БЛОКА, которые способны одновременно выполнять операции с плавающей точкой над своими регистрами. Каждая такая операция занимает всего 2 такта, операции полностью конвейеризуются.
В систему команд добавлена 21 новая инструкция, большая часть которых предназначена для обработки упакованных чисел с плавающей точкой. Имеется и новая целочисленная ММХ-инструкция усреднения восьми пар 8-ми битовых чисел, предназначенная для декодеров MPEG-2.
Технология 3Dnow! дает заметный результат при обработке графики, хотя не претендует на вытеснение графических ускорителей, а призвана служить их мощным дополнением. При этом сохраняется программная совместимость с прежними процессорами и операционными системами (поскольку регистры ММХ отображаются на регистры FPU, для них работают традиционные механизмы сохранения контекста в многозадачных ОС).
Расширение 3Dnow! работает с упакованными целочисленными форматами ММХ, а также с упакованными данными в FP-формате одинарной точности. В случае выхода результата за границы представимых величин в FP-формате возвращаемый результат соответствует граничным представимым числам (не бесконечностям), т.е. FP-арифметика выполняется с насыщением. В случае исчезновения значащих разрядов – результат обнуляется.
Округление результатов операции выполняется всегда только в сторону ближайшего числа. В инструкциях преобразования целочисленных форматов в FP и обратно округление выполняется в сторону нуля (усечение).
В процессорах Athlon набор инструкций 3Dnow! был дополнен. Появилось 5 новых инструкций для сигнальных процессоров (DSP), работающими с упакованными FP-числами. Еще 19 инструкций расширяют набор инструкций ММХ, а также служат для управления кэшированием.
В процессорах Athlon-МР (2001 г.) добавлен еще и полный набор инструкций SSE фирмы INTEL.

Расширение  SSE-2. В новом процессоре PENTIUM-4 (2000 г.) основные нововведения направлены на ускорение обработки потоковых данных, что обеспечивает максимальную производительность при обработке видео, графических изображений, работе с мультимедиа и в других сложных задачах. Поток в данном контексте подразумевает, что с его данными должны выполняться однотипные операции. Кроме того, данные, уже прошедшие обработку, в дальнейшем этим вычислительным процессом использоваться не будут и ими не следует засорять КЭШ. 
Добавлены дополнительные 144 команды (SSE-2), ускоряющие работу широкого спектра потоковых ресурсоемких приложений.
В процессоре PENTIUM-4 добавлены новые форматы данных:
•	упакованная пара чисел с плавающей точкой двойной точности (2 * 64 = 128 бит);
•	упакованные целые числа: 16 байт (16 * 8 = 128 бит), 8 слов (8 * 16 = 128 бит), 4 двойных слова (4 * 32 = 128 бит) и 2 счетверенных слова (2 * 64 = 128 бит).
В процессор введены новые команды целочисленной арифметики SIMD – 128-ми разрядные для регистров ХММ и такие же 64-х разряд-ные для регистров ММХ; ряд старых инструкций ММХ распространили и на ХММ (в 128-ми разрядном варианте); добавлены инструкции преобразования для новых форматов данных. Кроме того, расширена поддержка управлением кэшированием и порядком исполнения операций с памятью.

Расширение  SSE-3. В процессор PENTIUM-4 на ядре PRESCOTТ (который появился в конце 2003 г.) добавлены еще 13 новых команд SIMD-FP, получившие название SSE-3. 

Расширение  SSE-4. В процессоре CORE-i7 в 2007 г. Появились дополнительные 7 команд SSE-4.



3  УПРАВЛЕНИЕ  ПАМЯТЬЮ  В  ЗАЩИЩЕННОМ РЕЖИМЕ 
 ВИРТУАЛЬНОЙ  АДРЕСАЦИИ
Простая сегментация памяти в процессоре I8086 (и в РЕАЛЬНОМ РЕЖИМЕ для последующих процессоров) обладает недостатками, усложняющими разработку мультизадачных систем: 
	Сегменты памяти, определяемые только одними сегментными регистрами, имеют всего два атрибута: начальный адрес и максимальный размер 64 Кбайта. Никаких аппаратных средств контроля правильности использования сегментов нет.
	Размещение сегментов в памяти произвольное: сегменты могут частично или полностью перекрываться или не иметь общих областей.
	Программа может обратиться к любому сегменту для считывания или записи данных, а также для выполнения команд. Для защиты определенных областей памяти от несанкционированного доступа требуются внешние схемы.
	Нет никаких препятствий для обращения даже к физически несу- ществующей памяти. Когда программа выдает адрес несуществующей ячейки памяти, результат зависит только от особенностей схем дешифрации адреса и управления внешней шиной; система может даже зависнуть в ожидании данных, которые никогда не будут считаны. 

В ЗАЩИЩЕННОМ РЕЖИМЕ ВИРТУАЛЬНОЙ АДРЕСАЦИИ (РВА) процессоров I80286 и последующих процессоров 386+ реализовано несколько уровней привилегий и механизмов защиты задач, требующих больше информации о каждом сегменте. Пользовательская программа теперь не может свободно обращаться по любому адресу в пространстве памяти. Каждая программа (независимо от уровня привилегий) не может обращаться к сегменту до тех пор, пока он не описан для программы.
Каждый сегмент в РЕЖИМЕ ВИРТУАЛЬНОЙ АДРЕСАЦИИ (РВА) характеризуется (описывается) специальной 8-ми байтовой структурой данных, называемой ДЕСКРИПТОРОМ СЕГМЕНТА (segment descriptor).
В описание сегмента (в дескриптор) включается:
•	БАЗОВЫЙ АДРЕС сегмента,
•	РАЗМЕР СЕГМЕНТА,
•	ТИП (определяющий целевое использование сегмента),
•	УРОВЕНЬ ПРИВИЛЕГИЙ    и
•	дополнительная информация о состоянии.
При создании дескриптора область адресного пространства определяется как используемая с учетом ограничений, содержащихся в дескрипторе. Если не описать область адресного пространства памяти дескриптором, соответствующий диапазон адресов оказывается недоступным и процессор отказывается обращаться к нему. Когда программа ошибочно или намеренно формирует такой недействительный адрес, процессор «перехватывает» виновную команду до попытки считывания/записи по неопределенному адресу. 
Иногда при работе микропроцессорной системы сегментация памяти не требуется. В этом случае необходимо загрузить все регистры сегментов селекторами дескрипторов, имеющие нулевые базовые адреса и размеры сегментов по 4 Гбайт. В результате каждый из сегментов использует полное адресное пространство, т.е. сегментация подавляется. При этом может быть реализована страничная организация памяти. 

ДЕСКРИПТОРЫ СЕГМЕНТОВ МП 386+ для программной совместимости с МП I80286 имеют формат, представленный на рис. 3.1. Младшие 48 битов совместимы с форматом дескриптора МП I80286, у которого старшие два байта дескрипторов (биты 48...63) обязательно содержат нули. 
Поэтому базовый адрес у МП I80286 содержит только 24 бита (доступное адресное пространство в РВА – 16 Мбайт), а максимальный размер сегмента – 64 Кбайта (определяется 16-тью разрядами предела в дескрипторе и 16-тью разрядами формируемого эффективного адреса – ЕА).


Старший байт дескриптора МП 386+ (биты 63..56) содержит СТАРШИЙ БАЙТ БАЗОВОГО АДРЕСА. Начальный адрес сегмента может находиться в линейном адресном пространстве 4 Гбайта. 
ПРЕДЕЛ РАЗМЕРНОСТИ СЕГМЕНТА (limit) задается 20-ти битовым полем. Предел равен размеру сегмента в байтах (или страницах) минус единица. Учитывая, что адреса нумеруются от нуля, предел задает максимально возможное смещение в конкретном сегменте или последнюю адресуемую страницу в сегменте. 

Байт 5 дескриптора сегмента (биты 40...47 на рис. 3.1) содержит так называемые ПРАВА ДОСТУПА (Access Rights) и часто называется байтом AR (или БАЙТОМ ДОСТУПА) (см. рис. 3.2).
	7	6  5	4	3	2	1	0
Для сегмента кода	P	DPL	1	1	C	R	A
	
Для сегмента данных	P	DPL	1	0	ED	W	A
	
Для системного объекта	P	DPL	0	x	x	x	x

Рис. 3.2 – Форматы байтов прав доступа

БИТ ПРИСУТСТВИЯ (наличия) – Р (Present) – и БИТ ОБРАЩЕНИЯ – А (Accessed) – помогают операционной системе реализовать виртуальную память. В системе виртуальной памяти при выполнении программы в памяти одновременно находятся только некоторые ее сегменты, а остальные хранятся на диске. Когда программа пытается обратиться к сегменту, которого в памяти нет, возникает особый случай и процедура его обработки считывает ("вталкивает") в память нужный сегмент. Если места в памяти для сегмента недостаточно, процедура обработки должна вначале освободить требуемое место, пересылая ("выталкивая") один или несколько сегментов из памяти на диск. Весь этот процесс называется СВОПИНГОМ ("подкачкой"). После передачи нужного сегмента в память процедура обработки особого случая осуществляет возврат в программу, и она продолжается, не подозревая о прерывании. Следовательно, операционная система создает иллюзию того, что все сегменты программы все время находятся в памяти. 
Если в дескрипторе Р = 0, то любая попытка использовать этот дескриптор (например, загрузка селектора в сегментный регистр) вызывает особый случай «неприсутствия» (т.е. отсутствия). Операционная система виртуальной памяти отмечает все сегменты, находящиеся в памяти, установкой Р = 1, а сегменты, которых в памяти нет (они на диске), установкой Р = 0. Следовательно, особый случай «НЕПРИСУТСТВИЯ» возникает, когда программа обращается к сегменту, которого в памяти нет. Процедура обработки этого особого случая может считать нужный сегмент с диска, УСТАНОВИТЬ ПОЛЕ БАЗЫ ДЕСКРИПТОРА НА АДРЕСАЦИЮ БАЗЫ СЕГМЕНТА и сделать Р = 1. 
БИТ ОБРАЩЕНИЯ – А – помогает операционной системе выбрать сегмент, который передается на диск, когда в памяти нет достаточного места для нового сегмента. Приемлемая стратегия при необходимости освобождения пространства памяти заключается в том, чтобы обменять (swap) сегмент, к которому не было обращения самое продолжительное время. Эта стратегия называется LRU – ЗАМЕНЯЕТСЯ ДОЛЬШЕ ВСЕГО НЕ ИСПОЛЬЗОВАВШИЙСЯ СЕГМЕНТ. 
Биты А всех сегментов первоначально должны находиться в состоянии «нуль». Когда селектор определенного дескриптора загружается в сегментный регистр, бит А этого дескриптора устанавливается (А = 1). Через регулярные интервалы времени операционная система сканирует все дескрипторы и сбрасывает их биты А в нуль. Если во время сканирования обнаруживается дескриптор с битом А = 1, то к нему после предыдущего сканирования были обращения. Операционная система должна произвести инкремент счетчика последнего использования такого сегмента. Когда необходимо выбрать сегмент для передачи на диск, им будет сегмент С НАИМЕНЬШИМ СЧЕТЧИКОМ ПОСЛЕДНЕГО ИСПОЛЬЗОВАНИЯ. 

Бит 1 БАЙТА ДОСТУПА (см. рис. 3.2) для сегмента кода (сегмента выполняемой программы) называется битом СЧИТЫВАЕМОГО сегмента – R. Если R = 1, то наряду с обращением к такому сегменту для выполнения команд разрешаются и обращения для считывания. Если же R = 0, любая попытка считать из сегмента вызывает ОСОБЫЙ СЛУЧАЙ ЗАЩИТЫ. Любая попытка записи в исполняемый сегмент кода также приводит к ОСОБОМУ СЛУЧАЮ ЗАЩИТЫ. Таким образом можно организовать виртуальное ПЗУ.
Этот же бит 1 БАЙТА ДОСТУПА для (неисполняемого) сегмента данных является битом РАЗРЕШЕНИЯ ЗАПИСИ – W. Если W = 1, то помимо считывания из сегмента данных разрешена и запись в него. Если же W = 0, то любая попытка записать в сегмент вызывает особый случай защиты. Кроме того, любая попытка ВЫПОЛНИТЬ СЕГМЕНТ ДАННЫХ также приводит к ОСОБОМУ СЛУЧАЮ ЗАЩИТЫ.
Ограничения на доступ по СЧИТЫВАНИЮ, ЗАПИСИ И ВЫПОЛНЕНИЮ помогают поддерживать целостность системы, обнару-живать ошибки и предотвращать программное «пиратство» в многополь-зовательских системах. Например, попытка копирования данных из сегмента кода, указывая префикс CS: замены сегмента, вызовет особый случай зашиты. В системе виртуальной памяти сегмент с запрещенной записью НЕ НУЖНО физически передавать на диск (если его все же нужно удалить из памяти), так как после передачи с диска он не изменялся. 
Биты 1, 2, 3 в байте прав доступа называются также ПОЛЕМ ТИПА (Type). Это поле определяет целевое использование сегмента, задавая допустимые в сегменте операции (табл. 3.1) 

Таблица 3.1 – Типы сегментов в режиме виртуальной адресации
Поле типа	Тип сегмента и допустимые операции
000	Сегмент данных; разрешено только считывание 
001	Сегмент данных; разрешены считывание и запись 
010	Сегмент стека; разрешено только считывание (бессмысленный тип, на практике не применяется) 
011	Сегмент стека; разрешены считывание и запись
100	Сегмент кода; разрешено только выполнение 
101	Сегмент кода; разрешены выполнение и считывание 
110	Подчиненный сегмент кода; разрешено только выполнение 
111	Подчиненный сегмент кода; разрешены выполнение и считывание 
Бит 4 БАЙТА ПРАВ ДОСТУПА (см. рис. 3.1 и рис. 3.2) – БИТ СИСТЕМЫ (System) в дескрипторах сегментов памяти всегда установлен в состояние «1». Если бит S = 0, то дескриптор описывает системный объект, как являющийся, так и не являющийся сегментом памяти.
Двухбитовое ПОЛЕ УРОВНЯ ПРИВИЛЕГИЙ ДЕСКРИПТОРА DPL (Descriptor Privilege Level) определяет уровень привилегий, ассоциируемый с той областью памяти, которую описывает дескриптор. УРОВЕНЬ ПРИВИЛЕГИЙ имеет значения от 0 (наибольшие привилегии) до 3 (наименьшие привилегии). 

Дополнительные биты атрибутов, находящиеся в старшей тетраде байта 6 (см. рис.3.1), определяют :
•	G (бит 55 – гранулированности, дробности) – указывает в каких единицах задан предел (размер) сегмента : при G = 0 – в байтах; при G = 1 – в страницах по 4 Кбайт; 
•	D (бит 54 – разрядности) – определяет разрядность формируемого внутрисегментного смещения или выбираемого операнда: при D = 0 – 16 разрядов; при D = 1 – 32 разряда. 
•	бит 54 – всегда равен нулю, а бит 53 может иметь произвольное значение. 

3.1  ВЫЧИСЛЕНИЕ  ФИЗИЧЕСКОГО  (ИСПОЛНИТЕЛЬНОГО)  АДРЕСА  В  ВИРТУАЛЬНОМ  РЕЖИМЕ
Память компьютера может быть поделена на один или несколько сегментов различной длины, которые могут подкачиваться с диска или использоваться совместно несколькими программами. Память может также делится на одну или несколько 4-х Килобайтовых страниц. Сегментация и страничная организация могут использоваться совместно, обеспечивая преимущества обоих методов. Эти методы являются взаимодополняющими. Сегментирование удобно для прикладных программистов, работающих с логическими адресами, тогда как страничная адресация – для системных программистов, управляющих физической памятью. 

МП 286+ имеют три типа адресов: 
•	ЛОГИЧЕСКИЙ (виртуальный); 
•	ИСПОЛНИТЕЛЬНЫЙ (линеаризованный);
•	ФИЗИЧЕСКИЙ. 

ЛОГИЧЕСКИЙ (ВИРТУАЛЬНЫЙ) АДРЕС включает селектор и смещение. СЕЛЕКТОР – содержимое сегментного регистра. СМЕЩЕНИЕ – сумма базы, индекса и смещения. Каждая задача может оперировать с 16 К (214 – 1) селекторами сегментов, каждый из которых может быть размером 4 ГБайт (232 Байт), создавая тем самым общее пространство 246 Байт (64 ТБайт) для задачи. Для МП I80286 размер сегмента может быть до 64 КБайта (216 Байт), а общее виртуальное пространство одной задачи может достигать 1 ГБайт (230 Байт). 
С появлением 64-битовых расширений размер виртуальной памяти увеличился до 264 Байт.
Блок сегментации транслирует ЛОГИЧЕСКИЕ АДРЕСА в ИСПОЛНИТЕЛЬНЫЕ. Блок страничной адресации преобразует исполнительные адреса в физические. Если блок страничной адресации не используется (бит 31 в регистре управления CR0 сброшен: PG = 0), то исполнительный адрес является физическим. ФИЗИЧЕСКИМ называется АДРЕС НА КОН-ТАКТАХ ШИНЫ АДРЕСА ПРОЦЕССОРА.  У МП I80286 отсутствует блок страничной адресации, поэтому исполнительный адрес является физическим. 
Основное отличие режима РА от ВА заключается в том, как логиче-ский адрес преобразуется в исполнительный. В РРА блок сегментации сдвигает селектор на 4 бита влево и добавляет результирующее смещение (эффективный адрес – ЕА). 
При работе в РЕЖИМЕ ВИРТУАЛЬНОГО ПРОЦЕССОРА I8086 (VM 86) в качестве базового адреса также используется селектор, сдвинутый влево на 4 разряда. Формируемый в этом режиме эффективный адрес (внутрисегментное смещение) имеет 16 разрядов. 
В ВИРТУАЛЬНОМ РЕЖИМЕ 32-х или 48-ми битовый указатель называется ВИРТУАЛЬНЫМ АДРЕСОМ. Он, как и ЛОГИЧЕСКИЙ АДРЕС в реальном режиме, состоит из 16-ти битового СЕЛЕКТОРА и СМЕЩЕНИЯ, длиной 16 или 32 бита. По-прежнему СЕЛЕКТОР определяет НАЧАЛЬНЫЙ (БАЗОВЫЙ) АДРЕС СЕГМЕНТА, к которому для получения физического адреса прибавляется СМЕЩЕНИЕ. 
16-ти битовый СЕЛЕКТОР виртуального адреса (загружаемый в соответствующий сегментный регистр) состоит из трех полей (рис. 3.3): 
	RPL – ЗАПРАШИВАЕМЫЙ УРОВЕНЬ ПРИВИЛЕГИЙ – используется операционной системой для решения проблем защиты информации; 
	TI – ИНДИКАТОР ТАБЛИЦЫ – выбирает глобальную дескрипторную таблицу (GDT), если ТI = 0; эта единственная таблица GDT разделяется всеми задачами; если ТI = 1, то используется локальная дескрипторная таблица (LDT), причем каждая задача имеет свою LDT; 
	13-ти битовое поле ИНДЕКСА содержит индекс (смещение или адрес) внутри выбранной таблицы. 

ПОЛЕ ИНДЕКСА в селекторе служит индексом (смещением) выбранной таблицы. Каждый элемент таблицы называется ДЕСКРИПТОРОМ. Дескрипторы имеют длину 8 байт (64 бита). Поэтому адреса каждого дескриптора кратны 8 (содержат три нуля в младших битах). Таблица (GDT или LDT) может занимать в памяти полный сегмент размером до 64 КБайта. 
Полученный из выбранного дескриптора 24-х битовый (для процессора I80286) или 32-х битовый (для МП 386+) БАЗОВЫЙ АДРЕС без сдвига суммируется с 16-ти или 32 х битовым смещением, в результате чего получается 24-х битовый физический адрес ячейки памяти (для МП I80286) или 32-х битовый линейный адрес (для процессоров 386+) (см. рис, 3.3). 

Так как имеющаяся в конкретном компьютере память обычно меньше, чем необходимая память для программ, в тех ситуациях, когда памяти компьютера не хватает, приходится привлекать методы организации ВИРТУАЛЬНОЙ ПАМЯТИ и внешние запоминающие устройства (дисковые накопители). 
В любой момент времени в основной памяти компьютера находятся только несколько сегментов задачи. ОПЕРАЦИОННАЯ CИСТЕМА должна пересылать сегменты с диска в память, когда они потребуются, и возвращать их на диск, освобождая память, когда сегменты долго не используются. 

3.2  СТРАНИЧНАЯ  ОРГАНИЗАЦИЯ  ПАМЯТИ
Недостатки СЕГМЕНТНОЙ ОРГАНИЗАЦИИ ПАМЯТИ: 
	В РЕЖИМЕ ВИРТУАЛЬНОЙ АДРЕСАЦИИ (РВА) размер сегментов различный. Поэтому после нескольких операций СВОПИНГА (обмена сегментов из памяти на диск и подкачки в память с диска новых сегментов) появляется много свободных «ОКОН» в памяти между сегментами малой длины, подкаченных на место удаленных длинных сегментов.
	У процессоров 386+ длина сегмента может достигать 4 Гбайта, что значительно превышает объем памяти реальных компьютеров. Так как в памяти должны постоянно присутствовать 2..3 сегмента (сегмент кода, сегмент данных и желательно сегмент стека), то необходим механизм, позволяющий вводить и ИСПОЛНЯТЬ СЕГМЕНТЫ ПО ЧАСТЯМ, по мере необходимости. (Этой проблемы не было у МП I80286, так как размер сегмента не превышал 64 Кбайта). 

МП 386+ реализуют страничную организацию памяти, если в регистре управления CR0 (см. рис. 3.7) бит 31 имеет значение PG = 1. При этом сегмент разбивается на отдельные РАЗДЕЛЫ, число которых может достигать 210 = 1024. Каждый раздел может содержать до 210 = 1024 СТРАНИЦ объемом по 4 КБайт каждая. Границы страниц жестко фиксированы, их начальные адреса имеют значения от 00000000h до FFFFF000h (младшие 12 бит всегда равны нулю).
Начальные адреса страниц данного раздела хранятся в соответствующей ТАБЛИЦЕ СТРАНИЦ, содержащейся в памяти. Обращение к каждой таблице производится с помощью КАТАЛОГА РАЗДЕЛОВ, в котором содержатся начальные адреса таблиц страниц для всех разделов. Таким образом, страницы, содержащие определенный сегмент программы или данных, могут быть рассеяны по разным частям памяти, а их размещение определяется содержанием КАТАЛОГА РАЗДЕЛОВ  и  ТАБЛИЦ СТРАНИЦ. 
Страничная организация обеспечивает более эффективное использование (заполнение) памяти по сравнению с сегментной, однако требует дополнительного времени и специальных аппаратных средств для преобразования адресов. Линейный (исполнительный) 32-х разрядный адрес при этом является исходной информацией для формирования физического адреса с помощью КАТАЛОГА РАЗДЕЛОВ и ТАБЛИЦ СТРАНИЦ (см. рис. 3.4).
В процессорах с 64-битовым расширением на текущем этапе линейный адрес ограничен 48-битовым пределом, а физический адрес может иметь разрядность до 52 бит.
Для процессоров х86 характерны следующие варианты разбиения на страницы:
♦	«классические» страницы по 4К с 3-ступенчатым адресом (рис. 3.4);
♦	страницы по 4М с 2-ступенчатым адресом PSE (Page Size Extension — расширение размера страницы);
♦	страницы по 4К с 4-ступенчатым адресом и расширенным (36-битным) физическим адресом (РАЕ);
♦	страницы по 2М с 2-ступенчатым адресом и 36-битным физическим адресом (РАЕ);
♦	страницы по 4К с 5-ступенчатым 48-битовым линейным адресом и 52-битовым физическим адресом, в 64-битовом режиме (long mode) процессоров с 64-битовым расширением;
♦	страницы по 2М с 4-ступенчатым 48-битовым линейным адресом и 52-битовым физическим адресом, в 64-битовом режиме (long mode) процессоров с 64-битовым расширением.




Сформированный линейный (исполнительный) адрес при СТРАНИЧ-НОЙ ОРГАНИЗАЦИИ ПАМЯТИ рассматривается как совокупность трех полей:
	разряды А31..А22 (поле TABLE) содержат относительный адрес (смещение) КАТАЛОГА РАЗДЕЛОВ, в котором выбирается базовый адрес ТАБЛИЦЫ СТРАНИЦ;
	разряды А21..А12 (поле PAGE) содержат относительный адрес (смещение) ТАБЛИЦЫ СТРАНИЦ, из которой выбирается базовый адрес требуемой страницы;
	разряды А11..А0 (поле BYTE) содержат относительный адрес (смещение) выбираемого на странице байта.

КАТАЛОГ РАЗДЕЛОВ занимает одну страницу памяти (размером 4 Кбайта), где содержатся до  1024  32-х разрядных УКАЗАТЕЛЯ ВХОДА (БАЗОВЫХ АДРЕСОВ) в одну из ТАБЛИЦ СТРАНИЦ этого раздела.
Каждая из ТАБЛИЦ СТРАНИЦ также занимает одну страницу памяти (4 Кбайта). В каждой ТАБЛИЦЕ СТРАНИЦ содержатся до 1024 32-х разрядных адресов входа (Базовых Адресов) в СТРАНИЦУ СЕГМЕНТА ПАМЯТИ (в КАДР СТРАНИЦЫ).
Таким образом, ФИЗИЧЕСКИЙ АДРЕС ячейки памяти формируется как сумма старших 20-ти бит, выбираемых из ТАБЛИЦЫ СТРАНИЦ и младших 12-ти бит из поля BYTE в ЛИНЕЙНОМ АДРЕСЕ.
Содержимое регистра управления CR3 (см. рис. 3.9) задает старшие разряды адреса памяти, где находится КАТАЛОГ РАЗДЕЛОВ (младшие 12 разрядов адреса обязательно равны 0).

31
	12	11		9	8	7	6	5	4	3	2	1	0
Базовый адрес  А31..А12	Резерв ОС	0	0	D	A	0	0	U/S	R/W	P

Рис. 3.5 – Формат указателей разделов и указателей страниц

Базовые адреса, выбираемые из КАТАЛОГА РАЗДЕЛОВ и ТАБЛИЦЫ СТРАНИЦ, также содержат только старшие 20 разрядов начального адреса страницы (рис. 3.5). 
Остальные биты используются Операционной Системой для кодирования атрибутов: 
	Р (бит присутствия) – разрешает использование таблицы страниц или кадра страницы при Р = 1. Если Р = 0, то обращение к соответствующему разделу или странице запрещено, и попытка их использовать вызовет прерывание типа 14 (отсутствие доступа к странице); 
	R/W (бит чтения/запись), U/S (бит пользователя/супервизора) – определяют права доступа к соответствующему разделу или странице для пользователя, имеющего минимальные привилегии (уровень 3):
U/S	R/W	
0	х	- запрещается доступ 
1	0	- разрешается только чтение 
1	1	- разрешается чтение и запись. 
При запросах с большими привилегиями (уровни 0, 1, 2) допускается запись и чтение при любых значениях U/S и R/W;
	А (бит доступа) – устанавливается в 1 при обращении к данному разделу или странице для записи или чтения информации;
	D (бит «мусора») – в указателе кадра страницы устанавливается в 1 при первой записи на данную страницу; для указателей таблиц страниц значение бита D – неопределено.

Биты A и D используются операционной системой виртуальной памяти для определения разделов и страниц в оперативной памяти, содержание которых подлежит замене из дисковых накопителей. Если бит D = 0 (в данную страницу не было записи), то эту страницу не нужно возвращать на диск при свопинге.
Страничная организация памяти требует дополнительных затрат времени для преобразования линейного адреса – в физический. Эти затраты будут весьма значительными, если в каждом цикле производить обращение к оперативной памяти для выбора указателей в таблицах и кадры страниц. Существенное сокращение времени преобразования адресов в МП 386+ достигается путем использования внутренней КЭШ-ПАМЯТИ, которая называется БУФЕРОМ АССОЦИАТИВНОЙ ТРАНСЛЯЦИИ – (TRNSLATION LOOKASIDE BUFFER – TLB).
TLB представляет собой память с ассоциативной выборкой, которая содержит 20 ти разрядные адреса 32-х страниц, т.е. старшие 20 разрядов ФИЗИЧЕСКОГО АДРЕСА.
Каждый из базовых адресов имеет свой признак – ТЭГ. В качестве тэга используются старшие 20 разрядов ЛИНЕЙНОГО АДРЕСА.



Рис. 3.6 – Буфер ассоциативной трансляции


При поступлении в блок управления страницами ЛИНЕЙНОГО АДРЕСА – его старшие 20 разрядов сравниваются одновременно со всеми тэгами в TLB. Если обнаруживается совпадение этих разрядов с каким-либо тэгом, то из ячейки TLB выбирается соответствующий ему БАЗОВЫЙ АДРЕС СТРАНИЦЫ. Блок страничной адресации формирует физический адрес из старших 20-ти разрядов, считанных из ассоциативной памяти TLB, и младших 12-ти разрядов поля BYTE линейного адреса.
Случай, когда базовый адрес страницы находится в TLB, называется КЭШ-ПОПАДАНИЕМ. При этом не требуется обращаться к оперативной памяти для выборки указателей входа в таблицы и кадры страниц. Формирование физического адреса не требует дополнительных машинных циклов.
Если базовый адрес нужной страницы отсутствует в TLB, то такое обращение называется КЭШ-ПРОМАХОМ. При этом МП выполняет полную процедуру формирования физического адреса с обращениями к каталогу разделов и таблице страниц, затрачивая на это значительное время. Полученный из таблицы страниц 20-ти битовый БАЗОВЫЙ АДРЕС вместе с соответствующими 20-тью битами ЛИНЕЙНОГО АДРЕСА (ТЭГ) заносятся в свободную ячейку TLB, или занимают ячейку, в которой хранился адрес, введенный в TLB ранее других. Таким образом обеспечивается непрерывное обновление содержимого TLB.

Кроме базовых адресов в TLB хранится дополнительная информация, определяющая правила доступа к ним. Эта информация задается следующими битами:
	V (бит достоверности) – сбрасывается в состояние 0 при записи нового содержимого в регистр управления CR3 (базовый адрес каталога разделов). После преобразования очередного линейного адреса в физический – для этого адреса в TLB будет установлено значение V = 1, указывающего на допустимость использования данного базового адреса;
	D (бит мусора) – принимает значение 1 при записи на данную страницу; 
	U (бит пользователя/супервизора) и W (бит записи/чтения) – аналогичны описанным ранее битам.

Так как TLB хранит адреса 32-х страниц объемом по 4 Кбайта, то МП 386+ может непосредственно формировать физические адреса для 128 Кбайт памяти. Опыт применения МП показывает, что доля кэш-попаданий составляет 98%. Только 2% обращений к памяти (кэш-промахи) требуют двухступенчатого преобразования адресов с использованием каталога разделов и таблицы страниц в памяти компьютера.


3.3  СИСТЕМНЫЕ  РЕГИСТРЫ  АДРЕСА
Системные регистры поддерживают РВА процессоров 286/386+ и включают (см. рис. 3.6):
	GDTR – содержит адрес таблицы глобальных дескрипторов;
	IDTR – содержит адрес таблицы дескрипторов прерываний; 
	LDTR – содержит селектор таблицы локальных дескрипторов; 
	TR – содержит селектор сегмента состояния задачи TSS. 

Регистры GDTR и IDTR являются общими для всех задач системы. До перевода процессора в РВА необходимо создать в ПАМЯТИ таблицы GDT и IDT и соответственно инициализировать регистры GDTR и IDTR. 
Регистры LDTR и TR являются специфичными для каждой задачи. Таблица LDT адресуется селектором (записанным в регистр LDTR), который выбирает дескриптор в таблице GDT, и загружает его в соответствующий теневой регистр (см. рис. 3.7). Сама таблица LDT может находится на диске и загружается в память компьютера после записи селектора в регистр LDTR. Во время переключения задач можно заменить все локальное адресное пространство простой перезагрузкой селектора в регистр LDTR. 



47		16	15		0
GDTR	32-х битовый исполнительный адрес базы	Предел
IDTR	32-х битовый исполнительный адрес базы	Предел
		
Системные сегментные регистры	Дескрипторные регистры – программно недоступны 
(загружаются автоматически)
15		0		32-х битовый ис-полнительный ад-рес базы	Предел	Атрибуты 
Селектор	TR 											
Селектор	LDTR 											

Рис. 3.7 – Системные адресные и системные сегментные регистры


3.3.1  СИСТЕМНЫЕ  УПРАВЛЯЮЩИЕ  РЕГИСТРЫ 
ПРОЦЕССОРОВ   386+
МП 386+ содержат 3 управляющих 32-х битовых регистра: CR0, CR2 и CR3 (процессоры PENTIUM+ имеют дополнительный управляющий регистр CR4), хранящих состояние машины и не зависящих от текущей исполняемой задачи. Доступ к регистрам обеспечивается с помощью специальных команд.
CR0 – РЕГИСТР УПРАВЛЕНИЯ МАШИНОЙ (заменяет регистр – слово состояния машины у МП I80286 – MSW).
Для сохранения совместимости с МП i80286 в системе команд 386+ оставлены инструкции LMSW и SMSW, работающие с младшими 4-мя би- тами CR0. Новые ОС 386+ будут использовать команду MOV CR0.

Назначение битов CR0 (рис.3.8) : 
	PE – (PROTECT ENABLE) – разрешение защиты. Установка этого флага инструкцией LMSW или LOAD CR0 переводит процессор в защищенный режим, возврат из которого (сброс флага) возможен только по инструкции LOAD CR0. Сброс бита РЕ является частью довольно длинной последовательности инструкций, подготавливающих корректное переключение в реальный режим. 
	MP – (Monitor Processor Extension) – мониторинг сопроцессора, позволяет вызывать исключение 7 по каждой команде WAIT при TS=1. При исполнении программ для 286/287 и 386/387 на процессорах 486DX+ – бит MP должен быть установлен. 
	ЕМ – (Processor Extension Emulator) – эмуляция сопроцессора. Установка этого флага вызывает появление исключения 7 при каждой команде, относящейся к сопроцессору, что позволяет прозрачно осуществлять его программную эмуляцию. 
	TS – (Taks Switch) – переключение задач. При установке этого флага следующая команда, относящаяся к сопроцессору, вызовет исключение 7, что позволяет программно определить, относится ли контекст сопроцессора к текущей задаче. Бит сбрасывается инструкцией CLTS. 

31		24	23		16	15		8	7		0
PG	CD	NW	0	0	0	0	0	0	0	0	0	0	AM	0	WP	0	0	0	0	0	0	0	0	0	0	NE	ET	TS	EM	MP	PE
Слово состояния машины 80286 (MSW)


Рис. 3.8 – Регистр управления машиной CR0

Сочетание MP=0, EM=0, TS=0, – устанавливаемое по аппаратному сбросу, обеспечивает полную программную совместимость с 8086/88 (исключение 7 не вырабатывается).  Сочетание   MP=1, EM=0  –  используется при наличии сопроцессора, а MP=0, EM=1 – при его программной эмуляции. 
	ET – (Extension Type) – индикатор поддержки инструкций математического сопроцессора. Используется в процессорах 486+: для 486SX – ET=0, для остальных процессоров – ЕТ=1. 
	NE – (Numeric Error) – разрешение стандартного (для INTEL, но не для РС) механизма сообщения об ошибке FPU (сопроцессора) через генерацию исключения (486+). При NE=0 и активном сигнале IGNNE# ошибки FPU (сопроцессора) игнорируются. При NE=0 и пассивном сигнале IGNNE# при возникновении ошибки FPU (сопроцессора) основной процессор останавливается и ждет прерывания, вводимого внешней логикой по сигналу на выходе FERR#. Таким образом эмулируется обработка ошибок FPU, принятая в РС со времен сопроцессоров 80287 и 80387. 
	WP – (Write Protect) – разрешение защиты от записи на уровне привилегий супервизора в страницы только для чтения (486+). 
	AM – (Alignment Mask) – разрешение контроля выравнивания (контроль выравнивания выполняется только на уровне привилегий 3 при AM=1 и флаге AC=1) (486+). 
	NW – (Not Writethrough) – запрет сквозной записи кэша и циклов аннулирования (486+). 
	CD – (Cache Disable) – запрет заполнения кэша (кэш-попадания в ранее заполненные строки при этом не запрещаются) (486+). 
	PG – (Paging Enable) – включение механизма страничной переадресации памяти (386+). 

Регистр CR1 – зарезервирован фирмой Intel для будущих процессоров. 

CR2 – (Page Fault Linear Address) – регистр для хранения исполнительного (линейного) адреса отсутствующей страницы. Регистр хранит 32-х битовый исполнительный адрес страницы, которая отсутствовала (последний промах) в памяти. Это значение может быть сохранено в стеке подпрограммой обслуживания промаха для дополнительного анализа. 

CR3 – (Page Directori Base Register) – регистр хранения базового адреса КАТАЛОГА РАЗДЕЛОВ. Так как размеры и положение страниц в памяти фиксированы, то двенадцать младших разрядов не используются для адресации и их назначение определены только для двух битов (рис. 3.8):
	PCD – (Page Level Cache Disable) – запрет кэширования страницы (один из источников сигнала PCD для управления внешним кэшем) (486+). 
	PWT – (Page Level Writes Transparent) – кэширование страницы со сквозной записью (один из источников сигнала PWT для управления внешним кэшем) (486+). 


31
	24	23		16	15		8	7		0
CR2    –    Page Fault Linear Address
(Регистр исполнительного адреса отсутствующей страницы)
CR3 – Page Directory Base Register
(Регистр базового адреса таблицы страниц)	0	0	0	0	0	0	0	PCD	PWT	0	0	0
0	0	0	…	CR4	…	0	0	0	0	MCE	0	P SE	DE	TSD	PV I	VME
	7	6	5	4	3	2	1	0

Рис. 3.9 – Регистры управления CR2, CR3 и CR4


Регистр CR4 (присутствует в процессорах PENTIUM+) содержит биты разрешения архитектурных расширений (рис. 3.9) :
	VME (Virtual-8086 Mode Extensions) – разрешение использования виртуального флага прерывания в режиме V86, что позволяет повысить производительность за счет сокращения излишних вызовов монитора виртуальных машин.
	PVI (Protected-Mode Virtual Interrups) – разрешение использования виртуального флага прерываний в защищенном режиме.
	TSD (Time Stamp Disable) – превращение инструкции RDTSC (read from time stamp counter) в привилегированную.
	DE (Debugging Extensions) – разрешение точек останова по обращению к портам ввода-вывода.

3.3.2  ОТЛАДОЧНЫЕ  РЕГИСТРЫ
Отладочные регистры имеют в своем составе  4  32-х битовых регистра DR0..DR3, в которые записываются линейные адреса точек останова – АДРЕСА ТРАССИРОВКИ.
Регистр управления отладкой – DR7 – используется для установки контрольных точек, а регистр DR6 – показывает текущее состояние МП при остановах.
Состав РЕГИСТРОВ ТЕСТИРОВАНИЯ (Test Registers) варьируется в зависимости от типа процессора. 
Процессоры 386 имели два регистра – TR6 и TR7, которые применяются для управления проверкой ассоциативной памяти и запоминающего устройства с произвольной выборкой в буфере ассоциативной трансляции (кэша страниц). TR6 – является командным регистром тестирования, а TR7 – регистром данных, который содержит данные для тестирования буфера трансляции. 
Процессор PENTIUM имеет 12 тестовых регистров TR1...TR12. Их назначение привязывается к архитектуре – они входят в группу модельно-специфичных регистров MSR (Model-Specific Register). 
Существуют различия в доступности регистров в разных режимах работы МП (см. табл. 3.2) 

Таблица 3.2 – Использование регистров МП 386+
Регистры	Использование в РРА	Использование в РВА	Использование в вирт. 8086
	загр.	разгр.	загр.	Разгр.	загр.	разгр.
РОН 	да	да	да	да	да	да
Сегментные регистры 	да	да	да	да	да	да
Регистр флагов 	да	да	да	да	IOPL	IOPL
Управляющие регистры 	да	да	PL=0	PL=0	нет	да
GDTR 	да	да	PL=0	да	нет	да
IDTR 	да	да	PL=0	да	нет	да
LDTR 	нет	нет	PL=0	да	нет	нет
TR 	нет	нет	PL=0	да	нет	нет
Управление отладкой 	да	да	PL=0	PL=0	нет	нет
Тестовые регистры 	да	PL=0	PL=0	PL=0	нет	нет

PL=0 – регистры доступны только при уровне привилегированности, равном 0.
IOPL – команды PUSHF и POPF могут изменять IOPL.

ЗАМЕЧАНИЯ.
ДЛЯ ОБЕСПЕЧЕНИЯ СОВМЕСТИМОСТИ С БУДУЩИМИ ПРОЦЕССОРАМИ необходимо:
	маскировать (исключать влияние) неопределенных (неиспользуемых) битов в соответствующих регистрах при их проверке;
	обеспечить отсутствие влияния этих битов при записи их в память и другие регистры;
	исключить запись информации в неопределенные биты;
	обеспечивать запись «0» в неиспользуемые биты, когда загружаются соответствующие регистры.

3.4  КОЛЬЦА  ЗАЩИТЫ
Защита операционной системы требует наложения на обычные программы (не входящие в операционную систему) трех типов ограничений :
	обычным программам запрещается выполнять некоторые команды;
	обычным программам должны быть недоступны определенные сегменты, доступные операционной системе;
	должно быть невозможным получение привилегий операционной системы кроме как входом в нее в разрешенной точке входа.

Для защиты сегментов в процессорах 286/386+ применяются четыре УРОВНЯ ПРИВИЛЕГИЙ с номерами 0, 1, 2, 3. Чем меньше номер уровня, тем более привилегирован этот уровень. Уровни привилегий находятся в трех различных местах:
	Каждый дескриптор имеет УРОВЕНЬ ПРИВИЛЕГИЙ ДЕСКРИПТОРА – DPL. Для записываемых или считываемых сегментов поле DPL можно считать «классом» сегмента, а для исполняемых сегментов поле DPL оказывается «уровнем благонадежности» процедур в этом сегменте.
	Каждый селектор содержит ЗАПРАШИВАЕМЫЙ УРОВЕНЬ ПРИВИЛЕГИЙ  –  RPL.
	МП 286/386+ автоматически поддерживают ТЕКУЩИЙ УРОВЕНЬ ПРИВИЛЕГИЙ – CPL. Он показывает «уровень благонадежности» текущей выполняемой программы и равен содержимому поля DPL сегмента, который адресует регистр CS. МП хранит содержимое поля CPL в двух младших битах CS, замещая поле RPL хранимого там селектора.

Для предотвращения обращения к сегменту, более привиле-гированному, чем исполняемая программа, процессор генерирует особый случай защиты, если текущая программа (с полем CPL) менее привилегированна, чем вызываемый сегмент (с полем DPL), т.е. если «уровень благонадежности» программы меньше «класса» сегмента. Другими словами, доступ разрешается,  если    DPL ≥ CPL.
Уровень привилегий «0» предназначен для ЯДРА ОПЕРАЦИОННОЙ СИСТЕМЫ, которая осуществляет управление памятью, защиту и управление доступом. Эта часть называется ЯДРОМ БЕЗОПАСНОСТИ. Уровень привилегий «1» должен использоваться большей частью ОПЕРАЦИОННОЙ СИСТЕМЫ.
Прикладные программы

	Системы управления базами данных	
		Операционная система		
			Ядро безопасности			
					
			
	

Рис. 3.10 – Уровни привилегий микропроцессоров I80286+

Уровень привилегий «2» занимают СИСТЕМЫ УПРАВЛЕНИЯ базами данных, автоматизации управленческой деятельности и разработки программ. Уровень привилегий «3» предназначен для ПОЛЬЗОВАТЕЛЬСКИХ ПРОГРАММ (рис. 3.10).
Приведенные на рисунке уровни привилегий иногда называют КОЛЬЦАМИ ЗАЩИТЫ.
Для защиты операционной системы (и ее ядра) некоторые команды (см. табл. 3.3) могут выполняться только в кольце «0», а выполнение их в любом другом кольце вызывает особый случай защиты. 

Таблица 3.3 – Привилегированные команды
Уровни команд 	Мнемоники команд 
Команды, недопустимые выше уровня 0 	LIDT, LLDT, LGDT, LTR, LMSW, CLTS, HLT 
Команды, недопустимые выше уровня ввода-вывода (IOPL)	INS, IN, OUTS, OUT, STI, CLI, LOCK 
Команды, модифицируемые в соответствии с уровнем 	IRET, POPF 

К привилегированным относятся те команды, которые модифицируют состояние флага прерываний IF, изменяют сегментацию или влияют на сам механизм защиты. Такие команды разрешены только на уровне привилегий «0» (PL0-программы).
В регистре флагов FLAGS (EFLAGS) (см. рис. 1.4 и рис. 2.2) имеется поле уровня привилегий ввода-вывода IOPL, определяющее наименее привилегированное кольцо, в котором разрешены команды ввода-вывода. Если любая из этих команд (см. вторую строку в табл. 3.3) выполняется в кольце, менее привилегированном, чем IOPL, возникает особый случай защиты.
Прикладные программы в мультизадачной среде обычно совместно используют некоторые данные. Программам не разрешается считывание/ запись элементов данных, которые имеют более высокий уровень привилегий, т.е. «движение» к данным внутрь колец защиты (см. рис. 3.9) запрещается. Любая такая попытка приводит к формированию нарушения общей защиты. Однако программы могут использовать данные на своем уровне привилегий и на менее привилегированных уровнях.
Многие программы в мультизадачной среде используют совместные процедуры, например, библиотеки. Передача управления (с помощью команд FAR CALL  и JMP) возможна только внутри своего кольца защиты.
Для вызова процедур из других колец защиты, чем выполняемая программа, можно использовать:
	ПОДЧИНЕННЫЕ СЕГМЕНТЫ КОДА (см. две последние строки табл. 3.1);
	специальные дескрипторы, называемые  ШЛЮЗАМИ ВЫЗОВА.
С ПОДЧИНЕННЫМИ СЕГМЕНТАМИ КОДА не ассоциируется конкретный уровень привилегий, т.к. они подчиняются уровню привилегий того кода, который передает им управление с помощью команд CALL или JMP. Хотя с подчиненным сегментом кода не ассоциируется никакой конкретный уровень привилегий, применительно к нему действует одно ограничение: значение DPL дескриптора подчинен-ного сегмента кода всегда должно быть меньше или равно текущему значению CPL. То есть передача управления разрешается только во внутренние кольца (более защищенные).

ШЛЮЗЫ ВЫЗОВА идентифицируют разрешенные точки в более привилегированном сегменте кода, которым может быть передано управление, и являются единственным средством смены уровня привилегий.
ШЛЮЗ ВЫЗОВА имеет собственный дескриптор, в котором 48 бит определяют полный указатель (селектор : смещение) точки входа той процедуры, которой шлюз передает управление. Дескриптор шлюза вызова не определяет никакого адресного пространства, поэтому в нем нет полей базы и предела.
Селекторы, которые определяют ДЕСКРИПТОРЫ ШЛЮЗОВ ВЫЗОВА нельзя загружать в сегментные регистры данных (DS, ES, FS, GS, SS). Их необходимо загружать только в сегментный регистр кода CS для передачи управления сегменту кода на другом уровне привилегий.


4  АРХИТЕКТУРА  ПЕРСОНАЛЬНОГО  КОМПЬЮТЕРА
4.1  АРХИТЕКТУРА  ПРОЦЕССОРОВ   I386,  I486
Под архитектурой процессора понимается его программная модель, т.е. программно-видимые свойства процессора. Под микроархитектурой понимается внутренняя реализация этой программной модели.
В состав микроархитектуры процессора I80386 входят 7 внутренних функциональных устройств (у процессора I486 – 9 устройств), которые работают параллельно (см. рис. 4.1): 
•	устройство шинного интерфейса (или просто - шинный интерфейс);
•	внутренняя КЭШ-память (только у 486+);
•	устройство опережающей выборки команд (очередь команд);
•	двухступенчатый дешифратор команд;
•	устройство управления;
•	целочисленное устройство;
•	устройство с плавающей точкой (только у 486+);
•	устройство сегментации;
•	устройство страничного преобразования адреса.

ШИННЫЙ ИНТЕРФЕЙС учитывает приоритеты обращений к шине и координирует передачи данных, осуществляет предвыборку команд и выполняет функции согласования действий между внутренними устройствами процессора и внешней системой.
Шинный интерфейс (i486) имеет временные регистры для буферирования (запоминания) до четырех 32-х битовых передач записи в память. Можно буферировать адреса, данные или управляющие сигналы.
Внутренняя КЭШ-ПАМЯТЬ (у процессоров i486+) хранит копии последних считанных команд, операндов и других данных. Когда процессор запрашивает информацию, уже находящуюся в кэш-памяти (кэш-попадание), цикл шины обращения к внешней памяти не нужен. При этом скорость передач соизмерима с регистровыми пересылками и сокращается загрузка шины процессора. Когда же процессор запрашивает информацию, отсутствующую в КЭШ-памяти (кэш-промах), информация считывается в КЭШ-память за одну или несколько 16-ти байтовых кэшируемых передач данных, называемых заполнением строки КЭШ-памяти.
Если формируется запрос записи в область, находящуюся в КЭШ-памяти, выполняются два действия: обновляется КЭШ-память и записываемые данные передаются в основную память.
Когда шинный интерфейс не выполняет циклов шины выполнения команды (запись или чтение операндов из памяти), УСТРОЙСТВО ПРЕДВЫБОРКИ КОМАНД привлекает его для опережающей выборки (предвыборки) команд. Считывая команды заранее, процессор редко простаивает в ожидании цикла выборки команд из памяти.


В устройстве предвыборки имеется очередь команд, которая хранит 16 байт команд (у процессоров i486 – 32 байта очереди команд). Код команды, считываемый из очереди, подается в устройство ДЕШИФРИРОВАНИЯ КОМАНД, а смещение (т.е. константа в команде) подается в УСТРОЙСТВО СЕГМЕНТАЦИИ, где участвует в вычислении адреса.
УСТРОЙСТВО ДЕШИФРИРОВАНИЯ КОМАНД получает коды (байты префиксов, коды операций, байты адресации и др.) от устройства предвыборки и в двухступенчатом процессе преобразует их в управляющие сигналы низкого уровня и точки входа микрокода. т.е. микропрограмм в  ПЗУ   УСТРОЙСТВА УПРАВЛЕНИЯ.
УСТРОЙСТВО СЕГМЕНТАЦИИ преобразует логический (или виртуальный) адрес в ЛИНЕЙНЫЙ АДРЕС, привлекая дескрипторы сегментов и смещения, выделенные из команд. Параллельно с вычислением линейного адреса производится контроль атрибутов сегментов.

4.2  АРХИТЕКТУРА  ПЕРСОНАЛЬНОГО  КОМПЬЮТЕРА
В МИКРОПРОЦЕССОРНОЙ СИСТЕМЕ (МПС) процессор управляет всеми периферийными ресурсами, а также выполняет все программы (совместно с сопроцессором). К типичным МПС относятся персональные компьютеры, рабочие станции и встроенные контроллеры. Такие системы реализуются на одной плате, называемой МАТЕРИНСКОЙ или СИСТЕМНОЙ.
На МАТЕРИНСКОЙ ПЛАТЕ находятся (см. рис. 4.2):
	Процессор, установленный в специальный разъем. Как правило, на процессор устанавливается радиатор с вентилятором.
	Микросхемы КЭШ-памяти второго уровня (внешней). В современных процессорах КЭШ-память второго уровня размещена на кристалле процессора. Поэтому на материнской плате может отсутствовать КЭШ-память второго уровня.
	Разъемы (слоты) для установки модулей оперативной памяти (RAM).
	Микросхема перепрограммируемой памяти (EEPROM), в которой хранятся программы BIOS, тестирования РС, загрузки операционной системы, драйверы устройств.
	Микросхема CMOS-Setup – начальной установки, системные часы и календарь – с резервным питанием от аккумулятора.
	Набор микросхем высокой степени интеграции (Южный и Северный мосты – Chipset) для управления обменом данными между всеми компонентами РС
	Разъемы для подключения накопителей FDD, HDD, CD-ROM, последовательные порты (COM, USB и др.) для подключения периферийных устройств (мышь, модем и др.), параллельные порты для подключения принтера, сканера и др.
	Разъемы (слоты стандартов ISA, PCI, AGP и др.) для установки карт расширения. Возможность установки в эти разъемы любых карт расширения (видеоадаптера, звуковой карты, модема, карты АЦП и др.) определяет открытую архитектуру РС.

На некоторые материнские платы фирмы-производители устанавливают микросхемы, выполняющие функции видеоадаптера, звуковой карты, сетевой карты и др. Эти меры приняты с целью экономии места в корпусе РС и увеличения количества свободных слотов расширения. При покупке такой материнской платы, с одной стороны, экономятся деньги, а, с другой стороны, – отсутствует возможность модернизировать любой из интегрированных компонентов, если его характеристики устаревают.


ЧИПСЕТ (chip set – набор микросхем) – это набор системной логики, обеспечивающий функционирование как самого процессора, так и периферийных устройств, – «сердце» всей вычислительной системы. Именно он определяет основные функциональные возможности компьютера: типы поддерживаемых процессоров, максимальный объем и тип оперативной памяти и др. Кроме того, от чипсета также зависит максимальная штатная частота системной шины и шины памяти, синхронный или асинхронный режим их работы, поддерживаемые делители для шин AGP и PCI, а также максимально возможные режимы работы AGP и UDMA, количество и состав внешних портов.
То есть чипсет является тем звеном, которое связывает воедино все остальные компоненты системы и обеспечивает их функционирование, им же описываются правила этого функционирования
Все компоненты материнской платы связаны друг с другом системой проводников (линий), по которым происходит обмен информацией. Эту совокупность линий называют ИНФОРМАЦИОННОЙ ШИНОЙ или просто ШИНОЙ (BUS). Линии шины делятся на три группы в зависимости от типа передаваемых сигналов:
•	ЛИНИИ ДАННЫХ (шина данных),
•	ЛИНИИ АДРЕСА (шина адреса),
•	ЛИНИИ УПРАВЛЕНИЯ (шина управления).
Наличие трех групп линий является отличительным признаком шины от других систем соединения. Шины в РС различаются по своему функциональному назначению:
•	СИСТЕМНАЯ ШИНА (или шина CPU), которая связывает процессор с Chipset;
•	Шина КЭШ-памяти предназначена для обмена информацией между CPU и КЭШ-памятью;
•	ШИНА ПАМЯТИ используется для обмена информацией между оперативной памятью и Chipset;
•	ШИНЫ  ВВОДА/ВЫВОДА (PCI,  ISA,  USB,  SCSI,  Fire Wire  и  др.)

Через РАЗЪЕМЫ РАСШИРЕНИЯ (слоты) дополнительные элек-тронные устройства могут подключаться к ШИНАМ ВВОДА/ ВЫВОДА, расширяя возможности всей системы.
В зависимости от разрядности передаваемых данных, разъемы расширения (слоты) разделяются на:
•	8-ми разрядные,
•	16-ти разрядные,
•	32-х разрядные.
Увеличение разрядности передаваемых данных позволяет увеличить скорость обмена информацией с устройствами расширения.

4.3  ШИНЫ  РАСШИРЕНИЯ
Шины расширения (Expansion Bus) предназначены для подключения различных адаптеров периферийных устройств, расширяющих возможности компьютера, т.е. делающих архитектуру открытой. Интерфейсы шин расширения РС начали свою историю с 8-ми битовой шины ISA. Ее открытость обеспечила появление широкого спектра плат расширений, производимых многими фирмами. С появлением АТ-286 шина была увеличена до 16-ти бит, что позволило подключать большее количество адаптеров и повысить производительность обмена. Шина EISA явилась откликом на потребность в высокопроизводительном обмене для серверов.  Эта довольно дорогая 32-х разрядная шина распространена не широко, но она уже содержит прогрессивные идеи автоматизации конфигурирования (прототип системы P&P). В шину EISA можно устанавливать и ISA-адаптеры.
Шина MCA, выдвинутая фирмой IBM как прогрессивная альтернатива ISA, не была поддержана производителями клонов РС, так как ее спецификация не была открытой. В результате она практически отмерла вместе с семейством компьютеров IBM PS/2. С появлением процессора 486 появилась потребность в резком повышении производительности системной шины и родилась локальная шина VLB. Однако она являлась дополнением к слоту шины ISA/EISA и использовалась в основном лишь для графических карт и дисковых контроллеров. Принципиальная привязка к шине процессора 486 не обеспечила ей долгого существования. С процессором 486 появилась и другая скоростная шина – PCI.

ШИНЫ  ISA  и  EISA
ISA Bus (Industry Standard Architecture) – шина расширения, применявшаяся с первых моделей РС и ставшая промышленным стандартом. В компьютерах ХТ применялась шина с разрядностью данных 8 бит и адреса – 20бит. В компьютерах АТ шину расширили до 16 бит данных и 24 бита адреса. В таком виде она существует и поныне как самая распространенная шина для периферийных адаптеров. Конструктивно шина выполнена в виде щелевых разъемов (слотов) с шагом выводов 2,54 мм (0,1 дюйма). Слот ISA-16 является расширением предыдущего слота, поэтому в него можно вставлять адаптеры как свои родные – ISA-16, так и устаревшие – ISA-8 (поддерживая совместимость сверху – вниз).
Шина обеспечивает своим абонентам возможность отображения 8-ми или 16-ти битовых регистров на пространство ввода/вывода и памяти.
В распоряжении абонентов шины ISA-8 может быть до 6 линий запросов прерываний  IRQx, для ISA-16 их число достигает 11. Но при конфигурировании BIOS Setup часть из этих запросов могут потребоваться устройствам системной платы или шине PCI.
Задача распределения ресурсов в старых адаптерах решалась с помощью переключателей (джамперов), затем появились программно конфигурируемые устройства, которые вытесняются автоматически конфигурируемыми  платами  P & P  (Plug end Play).

EISA Bus (Extended ISA) – жестко стандартизованное расширение ISA до 32-х бит. Конструктивное исполнение обеспечивает совместимость с ней и обычных ISA-адаптеров. Но установка карт EISA в слоты ISA – недопустима.
EISA – дорогая, но оправдывающая себя архитектура, применявшаяся в многозадачных системах, на файл-серверах и др.
Расширение шины касается не только увеличения разрядности данных и адреса: для режимов EISA используются дополнительные управляющие сигналы, обеспечивающие возможность применения более эффективных режимов передачи. Максимальную производительность шины реализует пакетный режим (Burst Mode) – скоростной режим пересылки пакетов данных без указания текущего адреса внутри пакета.

ШИНА   МСА
МСА (Micro Channel Architecture) – микроканальная архитектура – была введена в пику конкурентам фирмой IBM для своих компьютеров PS/2, начиная с модели 50. Шина МСА абсолютно несовместима с ISA/EISA и другими адаптерами. Состав управляющих сигналов, протокол и архитектура ориентированы на асинхронное функционирование шины и процессора, что снимает проблемы согласования скоростей процессора и периферийных устройств. Архитектура позволяет эффективно и автоматически конфигурировать все устройства программным путем (в МСА PS/2 нет ни одного переключателя).
При всей прогрессивности архитектуры (относительно ISA) шина МСА не пользуется популярностью из-за узости круга производителей МСА-устройств и полной ее несовместимости с массовыми ISA-системами.

ЛОКАЛЬНАЯ  ШИНА   VLB
Локальная шина VLB (VESA Local Bus) разработана Ассоциацией стандартов видеоэлектроники (VESA – Video Electronics Standard Associations) и представляет собой не новое устройство на материнской плате, а расширение шины ISA для обмена видеоданными.
VLB – стандартизованная 32-х битовая локальная шина, практически представляющая собой сигналы системной шины процессора 486, выведенные на дополнительный разъемы системной платы. Шина сильно ориентирована на 486 процессор. Конструктивно VLB-слот аналогичен 16-ти битовому обычному MСА-слоту, но является расширением системного слота шины ISA или ЕISA, располагаясь позади него вблизи от процессора. Максимальная тактовая частота  шины – 66 МГц, хотя надежнее шина работает на частоте 33 МГц.
Шину VLB обычно использовали для подключения графических адаптеров или контроллеров дисков.

ШИНА  PCI
PCI (Peripheral Component Interconnect) local bus – шина соединения периферийных компонентов. Она разработана фирмой INTEL для своего нового высопроизводительного процессора PENTIUM, но хорошо сочетается и с 486 процессором, а также поддержана компьютерными фирмами DEC и Apple. Шина PCI, в отличие от EISA и VLB, представляет собой не дальнейшее развитие шины ISA, а совершенно новую шину.
Шина PCI является четко стандартизованной высокопро-изводительной и надежной шиной расширения ввода/вывода. В настоящее время действует спецификация PCI-2.1 и PCI-2.2. При частоте шины 33 Мгц теоретическая максимальная скорость обмена достигает 132/264 Мбайт/с для 32/64 бит данных. Частота шины PCI определяется частотой системной шины процессора (FSB), деленной на целую константу. Для частот FSB от 60 до 75-80 МГц коэффициент деления равен 2-м, то есть частота шины PCI может составлять от 30 до 40 МГц. Для частоты FSB 100 МГц частота PCI равна 100 / 3 = 33 МГц, а для частоты FSB = 133 Мгц коэффициент деления равен 4-м. Версия 2.2 допускает частоту шины PCI 66 МГц при согласии всех абонентов шины.
Основные особенности шины PCI:
	В этой шине используется совершенно отличный от шины ISA способ передачи, называемый «способом рукопожатия», т.е. в системе определяются два устройства: передающее (Initiator) и приемное (Target). Когда передающее устройство готово к передаче, оно выставляет данные и сопровождает их соответствующим сигналом (Initiator Ready), при этом приемное устройство записывает данные в свои регистры и подает сигнал Target Ready, подтверждая запись данных и готовность к приему следующих.
	Шина PCI является синхронной – фиксация всех сигналов выполняется по нарастающему фронту тактовой частоты (сигнал CLK).
	Все транзакции (передачи) трактуются как пакетные: каждая транзакция начинается фазой адреса, за которым может следовать одна или несколько фаз данных. Для адреса и данных используются общие мультиплексированные линии AD.
	Основное преимущество PCI-технологии заключается в относительной независимости отдельных компонент системы. Передачей пакета данных управляет не CPU, а включенный между ним и шиной PCI мост (Host Bridge Cashe / DRAM Controller). Процессор может продолжать работу и тогда, когда происходит запись данных в RAM (или их считывание) либо при обмене данными между двумя любыми компонентами системы.
	Важным свойством шины PCI является ее интеллектуальность, т.е. она в состоянии распознать аппаратные средства и анализировать конфигурации системы в соответствии с технологией Plug end Play.

МАГИСТРАЛЬНЫЙ  ИНТЕРФЕЙС   AGP
Фирма INTEL на базе шины PCI-2.1 разработала новый стандарт подключения графических адаптеров – AGP (Accelerated Graphic Port – ускоренный графический порт) (1996 год). Этот порт представляет собой 32-х разрядную шину с тактовой частотой 66,66 МГц, по составу сигналов напоминающую шину PCI, но пропускная способность в два раза больше – 66,66 * 4 = 266 Мбайт/с. 
Для повышения еще в два раза пропускной способности (до 532 Мбайт/с) был разработан режим AGPx2, в котором данные передаются по нарастающему и спадающему фронтам тактовой частоты, что позволяет выполнять две операции за один такт работы шины AGP. Этот режим позволил реализовать AGP-текстурирование – возможность использовать основную память компьютера для хранения текстур.
В новой спецификации шины (AGP-2.0) скорость передачи данных в режиме AGPx4 увеличена еще в два раза и составляет 1064 Мбайт/с. Новый режим AGPx8 увеличивает еще в два раза пропускную способность за счет расширения до 64-х бит передаваемых данных. Теоретическая пропускная способность между чипсетом и графической картой возросла до 2,1 GBps.
«Ускоренность» порта обеспечивается :
•	конвейеризацией операций обращения к памяти и
•	частичным демультиплексированием шин адреса и данных (в отличие от шины PCI, у которой передача адресов и данных осуществляется последовательно через мультиплексированную шину адрес/данные).
При конвейеризации обращения к памяти сначала выставляется пакет адресов (это позволяет заполнить промежутки ожидания реакции памяти на запросы), а потом получают плотный поток ответов (самих передаваемых данных). Спецификация AGP предусматривает возможность постановки в очередь до 256 запросов.
Основной особенностью стандарта AGP является способность разделить RAM компьютера между CPU и процессором видеокарты. Поэтому обработка трехмерных изображений выполняется в RAM как центральным процессором, так и видеопроцессором. Механизм доступа процессора видеокарты к памяти получил название: непосредственное выполнение в памяти (DIrect Memory Execute – DIME).
AGP создавался исключительно для нужд графического акселератора. Порт позволяет работать в двух режимах : режиме DMA и режиме исполнения (Executive Mode  или  DIrect Memory Execute – DIME). 
В режиме DMA акселератор при вычислениях рассматривает свою локальную память как первичную, а когда ее объема недостаточно, подкачивает данные из основной памяти, используя быстрый канал AGP. При этом для трафика порта характерны длительные последовательные (блочные) передачи. В режиме исполнения  (DIME) локальная память видеокарты и основная память компьютера равнозначны и располагаются в едином адресном пространстве. Для этого режима трафик порта будет насыщен короткими произвольными запросами.
В таблице 4.1 указана теоретическая максимальная скорость передачи (пропускная способность). Реальная - примерно в 2 раза ниже за счет прерываний, регенерации и протокольных процедур.

Таблица 4.1 – Характеристики шин ввода-вывода
	ISA-8	ISA-16	EISA	VLB	PCI	AGPx2	AGPx4
Данные	8	16	32	32	32/64	32	32/64
Адреса	20 (1M)	24 (16M)	32 (4 Г)	32 (4 Г)	32 (4 Г)	32 (4 Г)	32 (4 Г)
Ча-стота, МГц	8	8/(16)	8,33	33 – 50 (66)	33 (66)	66,66	66,66
Скорость, Мбайт/с	4	8/(16)	33,3	132	132/264	532	1064
Ка-налы DMA	3	8	8	8	–		
Bus-Master	–	+	+	(+)	+	+	+
P & P	–	–	+	–	+	+	+


Недостатки интерфейса AGP:
•	AGP – параллельная шина, а такие типы интерфейсов постепенно по-кидают десктопные системы;
•	AGP – полудуплексная система и не может одновременно передавать информацию в двух направлениях;
•	AGP – может обслуживать только одно устройство, а PCI-E не имеет никаких технических ограничений – портов может быть сколько угодно с любой пропускной способностью без каких-либо конфликтов, благодаря последовательному интерфейсу;
•	PCI-E позволяет одновременно устанавливать несколько видеоускорителей – технология SLI от Nvidia и  Cross-Fire от AMD-ATI

PCI Express

Шина PCI Express призвана заменить шину PCI и взять на себя задачу по связи компонентов внутри компьютера на ближайшие десять лет. Ранее шина была известна как шина ввода-вывода третьего поколения (3rd Generation I/O, 3GIO). Основным направлением разработки являлось следующее: применение на множестве сегментов рынка, в роли единой универсальной архитектуры ввода-вывода для настольных ПК, мобильных ПК, серверов, рабочих станций и встроенных устройств. Стоимость реализации должна быть равной или меньшей стоимости PCI. Последовательная шина требует наличия меньшего количества линий, а следовательно, обеспечивает более эффек-тивное использование системной печатной платы.
Шина PCI Express разрабатывалась с учетом существующих стандартов и операционных систем и поддерживает совместимость с шиной PCI на программном уровне, а конфигурирование и драйверы устройств совместимы с существующими PCI-реализациями. Для поддержки PCI Express не потребуется модификации или дополнительного обновления операционных систем. 
Постоянно увеличивающаяся скорость передачи данных, развитие новых стандартов и архитектур, а также огромное количество уже разработанных устройств: электронных компонентов, системных плат и плат расширения – все это предъявляет высокие и труднореализуемые требования к соединениям ввода-вывода третьего поколения. Краткий и не полный перечень требований показывает факторы, которые необходимо учитывать при разработке новых стандартов вообще и соединений ввода-вывода в частности:
•	Поддержка всех сегментов рынка и появляющихся приложений. Единая универсальная архитектура ввода-вывода для настольных ПК, мобильных, рабочих станций, серверов, коммуникационных платформ и встроенных устройств.
•	Низкая стоимость реализации – стоимость на системном уровне не должна превышать стоимость РС1.
•	Поддержка соединений между различными платформами. Долж-на быть обеспечена совместимость межкомпонентных и межплатных соединений через разъем или кабель.
•	Новые механические форм-факторы. Мобильный, PCI-совместимый и модульный (катриджный) форм-фактор.
•	Совместимая с PCI программная модель. Возможность нумерации и конфигурирования аппаратных средств PCI Express за счет использования реализаций системного программного обеспечения PCI без модификаций Загрузка существующих операционных систем без модификаций. Поддержка существующих драйверов ввода-вывода без их изменений. Возможность конфигурирования/включения новых функциональных возможностей PCI Express путем адаптации конфигурационного механизма PCI.
•	Производительность. Соединения с малым временем задержки для максимизации полосы пропускания полезной нагрузки приложения и эффективности канала. Минимизация количества выводов за счет высокой пропускной способности каждого вывода.
•	Дополнительные возможности. Поддержка различных типов данных и правил упорядочивания. Управление и распределение питанием. Идентификация возможностей управления питанием данной функции. Возможность перехода функции в определенное состояние потребления питания. Передача сообщения о текущем состоянии питания. Возможность распространения пробуждающих событий. Поддержка качества обслуживания (QoS).
•	PCI-совместимая обработка ошибок.

Разработчиками PCI Express введено новое понятие «канала». Под каналом понимается двойной однонаправленный канал связи между двумя компонентами. Канал PCI Express состоит из двух отдельно управляемых сигнальных пар с низким напряжением: передающей и приемной пары.
Перечислим основные характеристики и свойства канала.
Основной канал связи – PCI Express Link – состоит из двух однонаправленных каналов, реализованных как передающая пара и принимающая паpa. При этом используется код 8b/1Оb, как обеспечивающий наибольшую скорость передачи данных.
•	Сигнальная скорость. После инициализации каждый канал должен функционировать только на одном из поддерживаемых сигнальных уровней. Для версии спецификации 1.0 определена только одна сиг-нальная скорость,  которая обеспечивает максимальную полосу про-пускания 2,5 Гбит/с. В дальнейшем предполагается увеличение скорости передачи данных за счет развития технологии.
•	Линия. Совокупность различных сигнальных пар объединяется в ло-гическое понятие линии. Канал должен поддерживать как минимум одну линию. Для масштабирования полосы пропускания канал связи может группировать несколько линий, обозначаемых как xN, где N является одной из поддерживаемых скоростей канала. Например, канал х8 позволяет сгруппировать полосу 20 Гбит/с в каждом направлении.
•	В версии спецификации 1.0 физический уровень поддерживает раз-мерность линий xl, х2, х4, х8, х12, х16, и х32.
•	Инициализация. Во время аппаратной инициализации каждый канал PCI Express Link устанавливается в соответствии с размерами линий и частотой функционирования двумя агентами на каждом конце канала. Для этого процесса не требуется программное обеспечение или операционная система.
•	Симметрия. Каждый канал должен поддерживать симметричное количество линий в каждом направлении, т. е. канал х16 указывает, что в каждом направлении используются 16 разных (приемных и передающих) сигнальных пар.

4.4  ПАМЯТЬ  КОМПЬЮТЕРА
Чтобы процессор мог выполнять программы, они должны быть загружены в Оперативное Запоминающее Устройство (ОЗУ) или Постоянное Запоминающее Устройство (ПЗУ). К данным, находящимся памяти, процессор имеет непосредственный доступ, а к периферийной памяти (гибким и жестким дискам) – через буфер, недоступный пользователю. Только после того, как программа будет загружена в RAM с внешнего носителя, возможна дальнейшая ее работа.
Основное назначение ОЗУ (Random Access Memory – RAM – память с произвольным доступом) – запись, хранение и считывание информации. Недостаток оперативной памяти состоит в том, что она временная, т.е. при отключении питания – информация в ней полностью разрушается.
Таблица 4.2  – Классификация микросхем памяти
Динамическая ОЗУ	Статическая ОЗУ	Энергонезависимая
Асинхрон.	Синхрон.	Асинхрон.	Синхрон.	Не перепрогр.	Перепро-грамир.
DRAM	SDRAM	SRAM	SB RAM	ROM	EPROM
FPM DRAM	ESDRAM		PB SRAM	PROM	EEPROM
EDO DRAM	DDR SDRAM				Flash EEPROM
BEDO DRAM	SLDRAM				FRAM, MRAM
EDRAM	RDRAM				

ЭНЕРГОНЕЗАВИСИМАЯ ПАМЯТЬ (NVRAM – Non Volatile  Random Access Memory) используется для хранения и считывания стартовых программ компьютеров (BIOS), конфигурации периферийных устройств, скэн-кодов клавиатуры и др. Основные типы энергонезави-симой памяти:
•	ROM (Read Only Memory – память только для считывания) программируется на заводе-изготовителе. Для изменения кода необходимо разрабатывать новую микросхему.
•	PROM (Programmable ROM) программируются пользователем однократно на специальном программаторе.
•	EPROM (Erasable Programmable ROM) – стираемые и многократно (обычно, несколько десятков раз) перепрограммируемые постоянные запоминающие устройства. Стирание записанной информации осуществляется ультрафиолетовыми или рентгеновскими лучами в течение нескольких минут. Запись производится в специальном программаторе побайтно в любую ячейку памяти с помощью электрических сигналов.
•	EEPROM (Electrically Erasable Programmable ROM) – электрически стираемая и перезаписываемая постоянная память. Flash EEPROM (или Flash Memory) может быть перезаписана без помощи специального программатора, а непосредственно в РС. Большинство микросхем BIOS относятся к типу Flash EEPROM. Для установки новой версии BIOS необходима специальная программа («прошивальщик»), которая поставляется вместе с материнской платой (на дискете или компакт-диске), и файл новой версии BIOS. Основное преимущество Flash EEPROM – малое время доступа при считывании, малая длительность процесса стирания-программирования и большое количество циклов перепрограммирования (до нескольких тысяч).
•	FRAM (Ferroelectric RAM)  отличаются от традиционной кремниевой технологии производства микросхем памяти – применением сегнетоэлектрической пленки на основе сплавов оксидов металлов (титана, циркония, свинца и др.). При подаче электрических сигналов изменяется ориентация магнитных диполей в кристалле, которая сохраняется сколь угодно долго и при отключении питания. FRAM имеет преимущества обычной RAM (возможность записи и считывания), высокую скорость записи-считывания и преимущества ROM (энергонезависимость). Время доступа – порядка 160 нс.
В MRAM принцип действия основан на зависимости сопротивления материала от приложенного магнитного поля. Время переключения ячеек  MRAM может достигать единиц наносекунд.
Максимальный объем памяти микросхем FRAM невелики – до 8 Мб и еще меньше для MRAM.

4.4.1  ТИПЫ  ДИНАМИЧЕСКОЙ  ПАМЯТИ
В микросхемах DRAM (Dynamic Random Access Memory) информация сохраняется в виде зарядов на микроскопических конденсаторах (емкостью около 10-15 Фарад), которые относительно быстро разряжаются даже при использовании качественного диэлектрика с сопротивлением 1012 Ом.
При такой малой емкости (и напряжении логической единицы порядка 1..2 Вольта) на одном конденсаторе накапливается всего около 40000 электронов! Среднее время утечки заряда при современных микроскопических размерах конденсаторов ячеек динамической памяти составляет десятки миллисекунд. Значит, заряд каждой ячейки нужно восстанавливать (регенерировать) на протяжении данного отрезка времени, иначе информация, хранящаяся в памяти, будет утеряна.

Особенностью микросхем динамической памяти является умень-шенное в два раза количество выводов адресной шины, т.е. адресная информация передается в микросхему памяти за два цикла через мультиплексированную во времени адресную шину. Поэтому адресация ячеек динамической памяти происходит в два этапа :
•	сначала внутри микросхемы памяти фиксируется в регистре адрес строки по сигналу RAS (Row Address Strobe);
•	после этого по сигналу CAS (Columm Address Strobe) выбирается нужный столбец и микропроцессор может записать или считать данные из памяти.
Таким образом, для чтения одной ячейки памяти необходимо пять тактов синхронизации:
1.	установить адрес строки;
2.	зафиксировать его в регистре по сигналу RAS;
3.	установить адрес столбца;
4.	выбрать столбец по сигналу CAS;
5.	прочитать данные на выходе.
При этом каждая ячейка памяти адресуется независимо от другой. Обычная DRAM работает по схеме 5-5-5-5-...

Развитием микросхем динамической памяти являются FPM-DRAM (Fast Page Mode DRAM – память с быстрым доступом к странице-строке). В настоящее время они имеются в виде SIMM модулей во многих I486 и PENTIUM компьютерах. При использовании FPM-DRAM обращение происходит гораздо быстрее, чем для классических DRAM. Причина этого заключается в том, что адрес строки нужно фиксировать только один раз (по сигналу RAS), а следующие друг за другом ячейки памяти можно считывать с этой строки, используя только сигнал CAS.
Таким образом, FPD DRAM работает по схеме 5-3-3-3-3-... в пределах одной строки. При необходимости чтения ячейки из другой строки нужно выполнить полный цикл чтения.

EDO-DRAM (Extended Data-Out DRAM - память с усовершенство-ванным выходом) по своей конструкции почти такая же, как и  FPM-DRAM. Различие состоит в том, что после считывания информация сохраняется на шине данных, даже если сигнал CAS (адрес столбца) уже не активен.  Благодаря наличию  выходного буферного  регистра данных в 
микросхемах EDO-DRAM, процессор может уже во время считывания одних данных (пятый такт синхронизации) задавать адрес следующих ячеек (третий такт синхронизации), т.е. использовать конвейерные циклы магистрали. Такой механизм работает по схеме 5-2-2-2-2-.. в пределах одной строки и функционирует только при операции считывания.

Микросхемы Burst-EDO-DRAM (пакетная EDO DRAM) еще быстрее и могут использоваться только на современных материнских PENTIUM платах. Контроллер памяти адресует DRAM уже не построчно, а записывает и считывает данные пакетами. Один пакет (Burst) состоит из четырех двойных слов, т.е. имеет ширину 4*32 бита. При чтении первой ячейки ее адрес записывается во внутренний регистр-счетчик и с каждым стробом CAS адрес автоматически увеличивается (при этом адрес следующих ячеек вообще не передается).
Таким образом, на чтение первой ячейки затрачивается, как и всегда, 5 тактов, зато последующие ячейки идут подряд, реализуя схему 5-1-1-1. Следующая ячейка в новом пакете считывается с предоставлением полного адреса.
Быстрое обращение к памяти возможно благодаря тому, что Burst-EDO-DRAM разгружает процессор при формировании адресов столбцов в пакете, что происходит как при считывании, так и при записи.

В микросхемах SDRAM (Synchronous DRAM - синхронные DRAM) операции выдачи данных, их обновление и др. синхронизированы с частотой внешней шины. Микросхемы SDRAM  содержат два независимых массива ячеек (банка). Это позволяет обращаться к ячейке памяти одного банка, пока заканчиваются переходные процессы во втором банке. При обращении к каждому из банков поочередно можно вдвое увеличить быстродействие. Если EDO DRAM работает при частоте максимум 66 МГц, то двух банковая SDRAM может с легкостью работать на частоте 100 МГц. Имея встроенный счетчик адресов, она позволяет выполнять чтение и запись в пакетном режиме, как BEDO DRAM (Burst EDO DRAM), только длина пакета может программироваться на 1, 2, 4 или 8 адресов, кроме того, есть возможность произвести чтение всей строки в пакетном режиме. Как и BEDO DRAM, SDRAM позволяет читать пакет по схеме 5-1-1-1-.., только уже на частоте 100 МГц и выше.
Микросхемы SDRAM  могут работать на частотах 66 МГц (стандарт РС66), 100 МГц (стандарт РС100) и 133МГц (РС133). Теоретически память РС66 может выдать 533 MBps, память РС100 – до 800 MBps, а РС133 – до 1,06 MBps. Однако часть времени ячейка памяти недоступна в связи с обновлением содержимого, поэтому реальная пропускная способность в лучшем случае в два раза меньше.
Реальная скорость модуля памяти зависит от задержки выдачи сигнала CAS (латентность выдачи сигнала CAS может принимать значения 2 или 3). Например, первые модули памяти РС133 имели латентность CAS-3 и по скорости работы они не сильно отличались от модулей РС100 CAS-2.

SDRAM 2 или DDR SDRAM (Double Date Rate – Удвоенная скорость передачи данных) являются следующим поколением SDRAM. В отличии от SDRAM передача данных (но не адресов) осуществляется по нарастающему и спадающему фронтам тактового сигнала системной шины, что позволяет повысить быстродействие почти в 2 раза.
Для памяти DDR SDRAM общепринятым являются несколько обозначений : например, DDR226 или РС2100. Первое указывает частоту, с которой передаются данные (в этом примере 266 МГц, но сам модуль работает на частоте 133 МГц), второе – теоретическую пропускную способность модуля памяти – 2100  MBps.
На сегодняшний день существуют несколько типов DDR-памяти, отличающихся по скорости:
DDR200 (100 МГц),  РС1600 MBps.
DDR266 (133 МГц),  РС2100 MBps.
DDR333 (166 МГц),  РС2700 MBps.
DDR400 (200 МГц),  РС3200 MBps.
Каждый модуль может обладать латентностью CAS, равной 2, 2,5 или 3.
Тестирования показывают, что выигрыш от применения DDR (вернее проигрыш при использовании SDRAM) для платформы AMD составляет до 25%, а для платформы INTEL PENTIUM 4 – до 30%.

Direct Rambus DRAM (RDRAM) – новая технология, подразумевающая наличие усовершенствованных микросхем памяти Base RDRAM и так называемого RAMBUS-канала, включающего высоко-скоростную 16-ти разрядную (18 разрядов для микросхем, поддерживающих ЕСС) шину данных с тактовой частотой 400 МГц  и специализированный контроллер памяти со сложной конвейеризацией потоков данных.
Применяется DDR-технология передачи данных и командно-адресной информации по нарастающему и спадающему фронтам сигнала. За счет применения интеллектуального контроллера канала эффективность передачи RAMBUS-канала может достигать 98%. 
Новое поколение RDRAM имеет увеличенную тактовую частоту (533, 800 и даже 1600 МГц) и расширенную до 32 бит и 64 бит шину данных. Недостатком RDRAM является высокая цена.

SLDRAM (SyncLinc DRAM) – создавалась как дешевая альтернатива RDRAM. Стандарт SLDRAM предусматривает протокол пакетной передачи адреса, используется 16-ти разрядная шина данных с передачей по восходящим и спадающим фронтам на частоте 400 МГц.

Таблица 4.3 – Типы  динамической  памяти
Официальное название	РС 100	РС 133	РС 1600	РС 2100	РС 2700	РС 3200	РС 800	РС 4200
Неофициальн название			DDR 200	DDR266	DDR 333	DDR 400		PC 1066
Неправильн. название			РС 200	РС 266	РС 333	РС 400		
Тип памяти	SDRAM	DDR  SDRAM	RD RAM
Частота, МГц	100	133	100	133	166	200	400	533
Частота обмена, МГц	100	133	200	266	333	400	800	1066
Теорет. Проп. Способн. MBps	800	1064	1600	2100	2700	3200	1600	4200


МОДУЛИ  ДИНАМИЧЕСКОЙ  ПАМЯТИ  КОМПЬЮТЕРА  IBM PC
В настоящее время имеются несколько видов модулей памяти :
	30-ти контактные SIMM (Single-Inline Memory Module);
	72-х контактные SIMM;
	2*71 контактные SO-DIMM (Small Outline Dual-Inline Memory Module);
	SO-DIMM DDR;
	168-ми контактные DIMM (Dual-Inline Memory Module);
	184–х контактные DIMM DDR;
	16-ти разрядные RIMM (Rambus DRAM) ;
	32-х разрядные  RIMM.

30-ти контактные SIMM в настоящее время сохранились только в старых I386 и I486 компьютерах. Ширина шины данных такого модуля составляет только 8 бит. Для образования банка памяти с разрядностью 32 бита на материнской плате необходимо иметь 4 таких модуля памяти. Такие SIMM имеются с контролем четности (Parity) и без него. Емкость 30-ти контактных SIMM составляет : 256 Кбайт, 1, 4 или 8 Мбайт.

Более современными являются 72-х контактные SIMM, называемые также PS/2 модулями. Они имеют два ряда контактов, отделенные друг от друга канавкой. Ширина шины данных такого модуля 32 бита. Емкость PS/2 модулей составляет 4, 8, 16, 32 или 64 Мбайта. В компьютерах I486 может быть один или несколько SIMM модулей памяти. В компьютерах PENTIUM эти модули должны всегда вставляться попарно, т.к. ширина шины данных процессора составляет 64 бита. Существуют 72-х контактные SIMM модули с контролем четности и ЕСС (Error Checking and Correction).

168-ми контактные DIMM модули памяти SDRAM имеют 64-х битовую шину данных. Поэтому для PENTIUM компьютеров достаточно одного такого модуля (или более). Однако, в High-End-системах даже DIMM модули необходимо устанавливать на материнской плате попарно. Это связано с тем, что когда процессор обращается к одному банку памяти, то в другом происходит регенерация данных. Таким образом ускоряется работа памяти.

Миниатюрные 2*71 контактные SO-DIMM модули устанавливаются в ноутбуках. Ширина шины данных составляет всего 32 бита. Поэтому в PENTIUM ноутбуках эти модули устанавливаются попарно.

4.5  ОРГАНИЗАЦИЯ  КЭШ-ПАМЯТИ
Если от типа процессора зависит количество адресуемой памяти, то быстродействие используемой оперативной памяти – во многом определяет скорость работы процессора, а в конечном итоге влияет на производительность всей системы. 
Практически любой IBM PC-совместимый компьютер оснащен оперативной памятью, выполненной на микросхемах ДИНАМИЧЕСКОГО ТИПА С ПРОИЗВОЛЬНОЙ ВЫБОРКОЙ – DRAM (Dinamic Random Access Memori). Каждый бит такой памяти представляется в виде наличия (или отсутствия) заряда на элементарном конденсаторе, образованном в структуре полупроводникового кристалла. Другой тип памяти - СТАТИЧЕСКИЙ (SRAM – Static RAM) - в качестве элементарной ячейки памяти использует статический триггер.
Если для реализации одного запоминающего элемента динамической памяти требуется 1..2 транзистора (по одному транзистору для дешифрации каждого запоминающего элемента, а остальные транзисторы – на построение буферов и дешифраторов) то для статической - их число возрастает до 4..6. Поэтому на одном кристалле кремния удается разместить несколько сотен миллионов ячеек динамической памяти, но их быстродействие в большинстве случаев составляет 60..70 нс. Дополнительное время требуются также для регенерации содержимого динамической RAM, что снижает быстродействие всей системы. Однако, по критерию, учитывающему информационную емкость и стоимость, этот тип памяти во многих случаях предпочтительнее статической.
Статический тип памяти обладает высоким быстродействием (10..15 нс) и, как правило, используется для организации высокоскоростной видеопамяти и КЭШ-памяти.
Функционально КЭШ-память предназначена для согласования скорости работы сравнительно медленных устройств, таких, например, как динамическая память – DRAM, с относительно быстрыми микропроцессорами. Использование КЭШ-памяти позволяет избежать тактов ожидания при обменах информацией через магистраль, что значительно увеличивает производительность всей системы.
Применение КЭШ-памяти началось с процессоров I80386, работающих на частотах 33 МГц и более. Период тактовой частоты PCLK составляет 30нс и менее, а обычные динамические RAM имеют время выборки 60..100 нс. Поэтому процессор вынужден простаивать по 1..2 периода тактовой частоты (формируя такты ожидания).
Если всю оперативную память выполнить на основе быстродействующей статической памяти (SRAM), то это существенно увеличит стоимость всего компьютера. Поэтому применение КЭШ-памяти обеспечивает разумный компромисс между стоимостью и производительностью всей системы.
Особое значение КЭШ-память имеет для МП, работающих с умножением внешней тактовой частоты (процессоры I80486 и последующие). Внутри МП размещается КЭШ-память первого уровня (Level 1, L1), работающая на внутренней повышенной частоте, - и поэтому не снижающая быстродействие внутренних функциональных устройств: АЛУ, сопроцессора, схем управления памятью и др. Объем внутренней КЭШ-памяти колеблется от 0,5 Кбайт до 32 Кбайт и более.
Кроме этого на системной плате устанавливается внешняя КЭШ-память второго уровня (L2), объемом 256 или 512 Кбайт и более на основе микросхем статического ОЗУ (SRAM) с временем доступа 10..20 нс. При этом основная память, объемом несколько десятков или сотен МБайт, выполнена на обычных модулях с временем выборки 60..70 нс.
Заметим, что работа КЭШ-памяти практически «прозрачна», т.е. невидима для пользователя. В современных компьютерах КЭШ-память находит также применение в устройствах управления внешними дисковыми накопителями для выравнивания скорости обмена при перемещении головок записи/чтения между дорожками.
Архитектура КЭШ-памяти определяется тем, каким образом достаточно большая по размеру основная память отображается на сравнительно небольшой КЭШ. Существует три разновидности отображения:
•	КЭШ-память с прямым отображением (Direct-mapped Cache);
•	частично или наборно-ассоциативная КЭШ (Set-associative Cache);
•	полностью ассоциативная КЭШ (Fully Associative Cache).

Самой простой организацией обладает КЭШ-память С ПРЯМЫМ ОТОБРАЖЕНИЕМ. Допустим, что гипотетический МП использует 10-ти разрядный адрес, т.е. объем памяти равен 210 = 1024 байт. Размер КЭШа составляет 8 строк (line), а длина каждой строки 8 байт, т.е. объем КЭШа - 64 байта.
С учетом объема КЭШа вся адресуемая память МП разделяется на 1024 / 64 = 16 разделов (блоков), каждый из которых имеет свой признак – тэг (tag).
В какой-то момент времени МП обращается к ячейке оперативной памяти с адресом 0010011100b. Для КЭШ-памяти этот адрес подразделяется на три части. В данном случае три младших разряда называются смещением (offset) и полностью определяют положение каждого из восьми байт в строке (рис. 4.3).

Средние три разряда позволяют однозначно выбрать одну из 8-ми строк (line) КЭШа.
Оставшиеся старшие разряды несут информацию о тэге, т.е. о номере раздела (блока) основной памяти, из которого выбрана строка.
Только в том случае, если тэг строки КЭШа совпадает со значением, определяемым старшими разрядами адреса, - операнд считывается из КЭШ-памяти в процессор. В противном случае чтение операнда должно идти из основной памяти или информация в строке КЭШа должна быть заменена. Разумеется, в случае ее замены - меняется и значение ее тэга.
Преимуществом архитектуры КЭШ-памяти с прямым отображением являются сравнительно низкие затраты, поскольку требуется всего лишь одна операция сравнения тэгов. Недостатки ее, впрочем, также очевидны. Например, если два раздела (блока) данных основной памяти, используемые одинаково часто, претендуют на одну и ту же строку в КЭШе.
Внешняя КЭШ-память с прямым отображением используется в системах с 386-м процессором (КЭШ-контроллер – I82385), а внутренняя – в микропроцессоре DEC Alpha 21064.

ПОЛНОСТЬЮ АССОЦИАТИВНАЯ АРХИТЕКТУРА КЭШ-памяти предусматривает разделение адреса ячейки памяти только на две части 
•	младшие разряды - смещение в строке (offset) и
•	старшие разряды - информация о тэге (tag) (см. рис. 4.4).

В этом случае количество разделов (блоков) основной памяти равно: 1024 / 8 = 128. Полностью ассоциативная архитектура решает проблему конфликта адресов, однако сама КЭШ-память требует для своей реализации больших аппаратных затрат, поскольку значения тэгов должны сравниваться для всех линий КЭШа.

Разумным компромиссом между двумя рассмотренными архитектурами является НАБОРНО-АССОЦИАТИВНАЯ ОРГАНИЗАЦИЯ КЭШ-ПАМЯТИ. В этом случае несколько линий (две, четыре, восемь) объединяются в наборы, и средние биты адреса определяют не конкретную линию (как в прямом отображении), а набор (рис. 4.5). Сравнение тэгов (со значением старших разрядов) производится только для линий, входящих в набор. Подобную структуру внутренней КЭШ-памяти имеют подавляющее большинство процессоров (486DX, 486DX2, 486DX4, Pentium и др.).
По количеству линий КЭШа, входящих в набор, такая архитектура может называться :
•	2-х входовой (2-way set associative),
•	4-х входовой (4-way set associative) и т.д.


4.5.1  МЕТОДЫ  ЗАПИСИ  КЭШ-ПАМЯТИ
МЕТОД СКВОЗНОЙ ЗАПИСИ (Write Through) – предполагает наличие двух копий данных – одной в основной памяти, а другой – в КЭШ-памяти. Каждый цикл записи процессора в память идет через КЭШ. Это обуславливает высокую загрузку системной магистрали, т.к. на каждую операцию модификации данных приходятся две операции записи. Поэтому каждое обновление содержимого КЭШ-памяти ощутимо сказывается на работе шины. С другой стороны, МП по-прежнему вынужден ожидать окончания процесса записи в основную память.

МЕТОД БУФЕРНОЙ ЗАПИСИ (Buffered Write Through) – позволяет уменьшить загрузку магистрали, так как процесс записи выполняется в FIFO-буфер (First Input - First Ounput – первым вошел – первым вышел). Поэтому цикл записи для МП заканчивается практически мгновенно (когда данные записаны в буфер), хотя информация в основной памяти еще не сохранена. Сам же МП может выполнять дальнейшую обработку команд. Соответствующий контроллер должен заботится о том, чтобы своевременно "опустошать" заполненный буфер. А микропроцессор полностью освобожден от работы с основной памятью.

МЕТОД ОБРАТНОЙ ЗАПИСИ (Write Back) - цикл записи МП происходит сначала в КЭШ-память, если там присутствует адрес приемника. Если адреса приемника в КЭШ-памяти нет, то информация записывается непосредственно в память.
Каждый раз, когда микропроцессору требуется информация, отсутствующая в КЭШе (cache-miss), он вынужден обращаться через системную шину к основной оперативной памяти. После этого обычно принимается решение, должна ли происходить замена строки КЭШ-памяти и какая конкретно строка КЭШа будет заменена. Для этого используется встроенный контроллер LRU (Last Recentl Used), который обновляет именно ту строку, которая используется менее интенсивно.
Содержимое основной памяти обновляется только тогда, когда из КЭШ-памяти в нее записывается полная строка данных. Прежде чем будет произведена замена содержимого строки КЭШа на новую строку из памяти, старая строка должна быть перезаписан в основную память (если в нее производилась запись от МП). Данные в этой строке не совпадают с данными в основной памяти и являются единственной действительной копией. В противном случае произойдет нарушение целостности данных.
Во избежании подобной ситуации каждая строка КЭШа содержит служебные биты, которые устанавливаются после операции записи данных в строку. При замене строки КЭШа эти биты указывают на необходимость сохранения старой строки в основной памяти.
Преимуществом данного метода записи является намного меньшая загрузка системной шины. Используется в МП Pentium и последующих.
4.6  ПАРАЛЛЕЛЬНЫЙ  ПОРТ  ПЕЧАТАЮЩЕГО  УСТРОЙСТВА
Ранее устройство печати IBM PC-подобных компьютеров обычно подключалось к параллельному интерфейсу. Для подключения используется стандартный разъем Centronix, имеющий 25 или 36 контактов (см. табл. 4.4) – отечественный аналог – ИРПР-М.


Таблица 4.4 – Сигналы параллельного интерфейса Centronics
Контакт
DB-25	Контакт
Centronics	Регистр	Сигнал
1	1	37A . 0	~Data Strobe
2	2	378 . 0	Data 0
3	3	378 . 1	Data 1
4	4	378 . 2	Data 2
5	5	378 . 3	Data 3
6	6	378 . 4	Data 4
7	7	378 . 5	Data 5
8	8	378 . 6	Data 6
9	9	378 . 7	Data 7
10	10	379 . 6	~Acknowledge
11	11	379 . 7	~Busy
12	12	379 . 5	Paper out
13	13	379 . 4	Select
14	14	37A . 1	~Auto feed
15	32	379 . 3	~Error
16	31	37A . 2	~Init
17	36	37A . 3	Select Input
18..25	16,19..30,		Gnd
	17, 33		Gnd
	18		+5V
	34		Clock
	35		Test


К ПЭВМ могут подключены два отдельных адаптера для управления принтерами, использующие базовые порты 378h - 37Ah (первый адаптер) и 278h - 27Ah (второй адаптер).
При программировании принтера важно знать адрес базового порта ввода-вывода (первого порта из трех); адреса базовых портов хранятся в области данных BIOS, начиная с адреса 0:408h (LPT1) и далее по слову на принтер до LPT4. Дальнейшее описание предполагает, что базовый адрес принтера равен 378h.
 
Порт	 Операция	Описание
378h	Запись	Регистр данных сюда засылается байт,  посылаемый на печать.
	Чтение	Регистр данных позволяет считать последний байт, переданный принтеру.

379h	
Чтение	
Регистр состояния принтера:

37Аh	Запись	Регистр управления принтером:
Примечания.
1.	Для запуска печати символа нужно на время 1..50 мкс сбросить в нуль бит 0 регистра управления (~Data Strobe), а затем установить его в 1.
2.	Прерывание происходит по окончании вывода символа на печать: для первого принтера на седьмом уровне контроллера прерываний (IRQ7, вектор прерывания 0Fh), для второго принтера - на пятом уровне (IRQ5, вектор 0Dh). Следует отметить также, что IRQ5 используется XT-контроллером жестких дисков для генерации своих прерываний. Обычно этот бит не используется (сбрасывается), а проверка готовности принтера производится на основании опроса регистра состояния.
3.	Все сигналы имеют ТТЛ уровни, поэтому длина соединительного кабеля не превышает 3-х метров.
Несмотря на простоту управления, принтер представляет из себя достаточно сложное устройство, имеющее свой микропроцессор, ПЗУ и ОЗУ. Микропроцессор используется для обработки управляющих последовательностей и управления печатью. ПЗУ содержит описание рисунков символов в зависимости от их кода и выбранной таблицы и программы на языке используемого микропроцессора. ОЗУ используется для временного хранения введенных данных и спроектированных пользователем символов. Ряд принтеров, помимо интерфейса Centronix, могут подключаться и к последовательному интерфейсу (COM-порт или USB).
Принтер обрабатывает ряд спецсимволов (таких, как звонок, забой, горизонтальная и вертикальная табуляция), а также имеет достаточно сложную систему команд для изменения режимов работы и управления печатью.

4.6.1  ПАРАЛЛЕЛЬНЫЙ  ПРОГРАММИРУЕМЫЙ  ПОРТ  I8255
I8255 (отечественный аналог – КР580-ВВ-55) – программируемое устройство ввода/вывода информации, с помощью которого возможна организация обмена в параллельном формате практически с любым периферийным оборудованием; может быть использовано для организации синхронного и асинхронного программно-управляемого обмена, а также обмена в режиме прерывания программы.

Выводы Данных D0_D7 (см. рис. 4.6) подключаются к Системной Шине Данных.
Сигнал   (Выбор кристалла) низким уровнем активизирует выводы Шины Данных (D0..D7). Высокий уровень   переводит выводы ШД в высокоомное состояние (Z-состояние). Это необхо-димо при работе с несколь-кими портами.
Сигнал RES (сброс) устанавливает все выходные регистры каналов в “0”; настраивает все каналы на “Ввод” в режиме “0”.
Сигналы   (строб ввода),   (Строб вывода) (активные уровни – низкие) подаются от системного контроллера.
С Внешними Устройствами ввода/вывода параллельный порт общается через 4 канала: 
- 2 канала по 8 бит (А0_А7, В0_В7); 
- 2 канала по 4 бит (С0_С3, С4_С7).

Все каналы содержат регистры, в которые записывается информация от Шины Данных при выводе. Информация сохраняется до следующего вывода.
При вводе – информация передается от выбранного канала на Шину Данных.
Нужный канал при вводе или выводе выбирается сигналами А0, А1 (младшие биты Системной Шины Адреса). В Регистр Режима возможна только запись УПРАВЛЯЮЩЕГО СЛОВА
Параллельный порт I8255 может работать в трех режимах. Перед началом работы необходимо запрограммировать порт, записав в Регистр Режима управляющее слово (рис. 4.7).

Режим 0 – синхронный ввод/вывод – необходим для обмена информацией с устройствами более быстродействующими, чем МПС, или для однократного приема (выдачи) байта информации.
В этом режиме можно вводить и выводить информацию через 4 канала (А0..А7, В0..В7, С0..С3, С4..С7). Сигналом синхронизации для внешних устройств являются сигналы : ~WR - при выводе, ~RD при вводе. СИГНАЛ СИНХРОНИЗАЦИИ при обмене ВСЕГДА передается от менее быстродействующего устройства к более быстродействующему.
Режим 1 – асинхронный ввод или вывод данных через Каналы А0..А7 или В0..В7. Линии канала С используются для приема и выдачи управляющих сигналов синхронизации (сигналов квитирования).
При работе порта в Режиме 2 – обеспечивается возможность асинхронного обмена информацией с внешними устройствами только по 8-ми разрядному двунаправленному каналу А. Для обеспечения протокола обмена используется пять линий канала С.
Обмен информацией в Режимах 1 или 2 можно проводить не только по запросам прерывания, но и по программному опросу регистра С, в котором фиксируются сигналы состояния от внешних устройств.

4.7  ПОСЛЕДОВАТЕЛЬНЫЙ  ИНТЕРФЕЙС  RS-232
В состав IBM PC могут входить до четырех последовательных интерфейсов, работающих в стандарте RS-232 (отечественный аналог СТЫК–С2) и именуемых СОМ1 – СОМ4. Им выделены следующие адреса в области портов ввода-вывода:

СОМ1:  3F8h-3FFh     COM3:  338h-33Fh
COM2:  278h-2FFh     COM4:  238h-23Fh

(интерфейсы СОМ3 и СОМ4 поддерживаются только в моделях PS/2).
Каждый интерфейс связан с определенным уровнем контроллера прерываний:
СОМ1 вызывает прерывание IRQ4 (Int 0Ch)
COM2 вызывает прерывание IRQ3 (Int 0Bh)
СОМ3 и СОМ4 не имеют стандартных векторов прерываний.

Каждое из устройств RS-232 представляет собой контроллер i8250, оснащенный 25- или 9- штырьковым разъемом на задней стенке корпуса ПЭВМ. Этот разъем может использоваться для подключения мыши, графопостроителя, организации связи между ПЭВМ или с другими устройствами. Контакты стыка RS-232 (СОМ-порта) описаны в табл. 4.5.
При отсутствии передачи – на выходе последовательного порта TxD устанавливается сигнал «логической 1» (напряжение –12В). Передача каждого символа (от 5 до 8 бит) начинается со Старт-бита, имеющего всегда нулевой логический уровень – напряжение +12В (рис. 4.8). Символ передается «младшим битом – вперед». 
В конце каждого символа можно запрограммировать передачу бита контроля на четность (или на нечетность). Завершается передача символа одним или двумя Стоп-битами (для 5-ти битового символа вместо двух Стоп-битов – используют 1,5). После этого может передаваться Старт-бит следующего символа (а может и не переда-ваться).


Таблица 4.5 – Назначение сигналов СОМ-портов
Назван. сигнала	Имя цепи	Номер контакта	Назначение	Направ-ление
	EIA	CCITT	9-шт	25-шт		
DCD
	CF
	109
	1
	8
	Связь модемов
установлена	В ПЭВМ

RX	BB	104	2	3	Принимаемые данные	В ПЭВМ
TX	BA	103	3	2	Передаваемые данные	Из ПЭВМ
DTR
	CD
	108/2
	4
	20
	Готовность ПЭВМ к
работе	Из ПЭВМ

SG	AB	102	5	7	Сигнальная земля	
DSR
	CC
	107
	6
	6
	Готовность модема к
работе	В ПЭВМ
RTS	CA	105	7	4	Запрос на передачу	Из ПЭВМ
CTS
	CB
	106
	8
	5
	Готовность модема 
к передачи	В ПЭВМ
RI	CE	125	9	22	Индикатор вызова	В ПЭВМ
FG	AA	101	--	1	Защитная земля	


Контроллер стыка RS-232 является полностью программируемым устройством; можно запрограммировать следующие параметры обмена: количество битов данных и стоп-битов, вид четности и скорость обмена в бодах (бит/с). Максимальная скорость обмена информацией по последовательному СОМ-порту – 115,2 кбит/с.

4.8  ПОДСИСТЕМА  КОНТРОЛЛЕРА  КЛАВИАТУРЫ
В архитектуре IBM PC AT+ имеется однокристальный микроконтроллер i8042, который представляет собой контроллер универсального периферийного интерфейса (UPI) и обеспечивает выполнение следующих функций:
•	управление определенными системными функциями и интерфейсом клавиатуры;
•	чтение информации о конфигурации системы для процедур BIOS.

В контроллере i8042 имеется внутренняя ROM (2 Кбайта), которая программируется с учетом кодов сканирования клавиатуры и рабочих команд. Контроллер i8042 взаимодействует с клавиатурой в двунаправленном последовательном формате с синхронизацией данных. Контроллер i8042 последовательно принимает данные, проверяет их паритет, преобразует коды сканирования в системные коды и прерывает процессор для передачи данных системе.
Контроллер i8042 подключен к системе через шину периферийного устройства при помощи программно-доступных входного и выходного буферов (портов).
Выходной буфер представляет собой 8-ми разрядный регистр, который доступен системе только как читаемый порт с адресом  60h. Контроллер i8042 использует выходной буфер для передачи системе кодов сканирования, полученных от клавиатуры, и байтов данных, прочитанных по команде системы.
Входной буфер представляет собой 8-ми разрядный регистр, который доступен системе только как записываемый порт с адресом 60h или 64h. Операция записи по адресу 60h устанавливает флажок, который указывает на последующую запись данных. Запись по адресу 64h устанавливает флажок, который указывает на последующую запись команды. Данные, записанные по адресу 60h, отсылаются клавиатуре, если не являются командой для контроллера.
Контроллер i8042 и клавиатура связаны четырехпроводным экранированным кабелем, включающим линию питания (+5 В), линию заземления, линии сигналов данных и синхронизации (рис. 4.9).

Контроллер i8042 и клавиатура взаимодействуют с помощью механизма квитирования, используя линии данных и синхронизации для синхронного последовательного интерфейса. Клавиатура передает и принимает данные в последовательном формате : первый бит – стартовый, за ним следуют  8  информационных разрядов, разряд паритета и стоповый бит. Максимальное время передачи одной посылки – 2 мс.
Выносной модуль клавиатуры содержит внутренний контроллер (i8042), осуществляющий сканирование матрицы клавиш, управление индикаторами, внутреннюю диагностику и связь с системной платой.

При нажатии на клавишу контроллер передает ее скан-код, который можно считать из порта 60h. При отпускании клавиши контроллер клавиатуры передает 2 байта: в первом содержится префикс 0F0h, а во втором – скан-код. Прием байта от клавиатуры вызывает аппаратное прерывание IRQ1 (вектор 09h).
Прерывание BIOS  INT 09h обрабатывается по нажатию и отпусканию клавиш, анализируя принятый скан-код с учетом состояния флагов и комбинации клавиш альтернации:  Shift,  Ctrl,  Alt,  Caps Lock,  Num Lock.
Результат обработки (ASCII-символ и скан-код) помещается в клавиатурный буфер ОЗУ. В случае переполнения буфера очередное слово не записывается, а подается звуковой сигнал.
Перехват обработчика INT 9h обычно используется для русификации клавиатуры.
Прерывание BIOS INT 16h – интерфейс прикладного уровня для клавиатуры. Основное назначение – извлечение слов из клавиатурного буфера.


4.9  ОТКАЗ  ОТ  НАСЛЕДУЕМЫХ  ИНТЕРФЕЙСОВ
4.9.1  ШИНА  U S B
Сегодня, как и в первых моделях IBM PC, на задней панели компьютера можно найти разъемы стандартных интерфейсов :
•	СОМ-порты,
•	LPT- порт,
•	интерфейсы клавиатуры и PS/2-мыши.

Каждый интерфейс имеет свой контроллер, который использует «свой» запрос IRQ и свое АДРЕСНОЕ ПРОСТРАНСТВО портов вво-да/вывода, что нередко приводит к конфликтам и требует «ручной конфигурации периферии». Количество имеющихся портов и разъемов для подключения внешних устройств не соответствует нарастающему количеству внешней периферии. Кроме этого производительность существующих интерфейсов проектировалась под «очень древние» конкретные устройства и, например, подключение  сканера к LPT-порту принтера определяет низкую скорость обмена и медленную работу всей системы.
Выход из положения, который нам предлагают, – шина USB (Universal Serial Bus – универсальная последовательная шина). К ней можно одновременно подключить до 127-ми внешних устройств : клавиатуру, мышь, принтер, сканер, модем, цифровые аудиоколонки, внешний CD-ROM или CD-RW, видеокамеру и многое другое.
Основные преимущества подключения периферии через шину USB :
•	дешевое решение, поддерживающее скорость передачи до 12 Мб/с;
•	полная поддержка в реальном времени передачи аудио- и сжатых ви-деоданных;
•	динамическое подключение/отключение внешних устройств в процес-се работы без выключения питания, даже без перезагрузки ОС;
•	универсальность и простота самого процесса подключения - любое устройство может быть включено в любой свободный разъем;
•	получение питания прямо от компьютера через унифицированный разъем без дополнительного шнура;
•	USB-контроллер, к которому подключаются все устройства, использует только один запрос IRQ.

USB обеспечивает обмен данными между ХОСТ-КОМПЬЮТЕРОМ (управляющим, основным компьютером) и множеством одновременно доступных периферийных устройств. Распределение пропускной способности шины между подключенными устройствами планируется хостом и реализуется им с помощью посылки МАРКЕРОВ.
Основные термины, относящиеся к USB :
•	УСТРОЙСТВА (Device) USB должно иметь интерфейс USB, обеспе-чивающий:
o	полную поддержку протокола USB, 
o	выполнение стандартных операций (конфигурирование и сброс) и
o	стандартное представление информации, описывающей устрой-ство. 
УСТРОЙСТВА могут являться «ХАБАМИ», «ФУНКЦИЯМИ» или их комбинацией.
•	ХАБ (Hub) обеспечивает дополнительные точки подключения устройств к шине. ХАБ – ключевой элемент системы Plug-and-Play в архитектуре USB. Хаб является кабельным концентратором, точки подключения называются ПОРТАМИ ХАБА. Каждый хаб преобразует одну точку подключения – в их множество.
У каждого хаба имеется один ВОСХОДЯЩИЙ ПОРТ (upstream port), предназначенный для подключения к хосту или хабу верхнего уровня. Остальные порты являются НИСХОДЯЩИМИ (downstream ports) и предназначены для подключения функций или хабов нижнего уровня. Хаб может распознавать подключение или отключение устройств к этим портам и управлять подачей питания на их сегменты. 
•	ФУНКЦИИ (Function) представляют собой устройства USB, способные передавать или принимать данные или управляющую информации по шине. Типично ФУНКЦИИ представляют собой отдельные периферийные устройства с кабелем, подключаемым к ПОРТУ ХАБА.
•	Работой всей системы USB управляет ХОСТ-КОНТРОЛЛЕР (host controller), являющийся программно-аппаратной подсистемой ХОСТ-КОМПЬЮТЕРА.
•	ФИЗИЧЕСКОЕ СОЕДИНЕНИЕ устройств USB осуществляется по топологии МНОГОЯРУСНОЙ ЗВЕЗДЫ.
•	Центром каждой ЗВЕЗДЫ является ХАБ, каждый кабельный сегмент соединяет две точки – ХАБ с другим ХАБОМ или ФУНКЦИЕЙ. В системе USB имеется только один ХОСТ-КОНТРОЛЛЕР, расположенный в вершине пирамиды УСТРОЙСТВ и ХАБОВ.
Каждая ФУНКЦИЯ предоставляет ХОСТ-КОНТРОЛЛЕРУ конфигурационную информацию, описывающую ее возможности и требования к ресурсам. Перед использованием ФУНКЦИЯ должна быть сконфигурирована ХОСТОМ – ей должна быть выделена полоса в канале и выбраны специфические опции конфигурации.
Примерами функций являются:
•	Указатели – мышь, планшет, световое перо и др.
•	Устройства ввода – клавиатура, сканер цифровая фотокамера и др.
•	Устройства вывода – принтер, звуковые колонки (цифровые).
•	Телефонный адаптер ISDN.
•	Накопители информации на магнитных и оптических носителях.

Информационные сигналы и питающее напряжение +5В передаются по четырехпроводному кабелю. Для сигнала используются дифференциальный способ передачи по двум проводам:  D+  и  D–.  Уровни сигналов передатчиков в статическом режиме должны быть: низкий логический уровень – ниже 0,3В, высокий логический уровень – выше 2,8В. Передатчики должны иметь возможность перехода в высокоимпедансное состояние для обеспечения двунаправленной полудуплексной передачи данных по одной паре проводов.
Шина USB имеет два режима передачи: ПОЛНАЯ СКОРОСТЬ передачи сигналов – 12 Мбит/с и НИЗКАЯ СКОРОСТЬ – 1,5 Мбит/с. Для полной скорости используется экранированная витая пара с импедансом (волновым сопротивлением) 90 Ом и длиной сегмента – до 5 м, для низкой – неэкранированный и невитой кабель при длине сегмента – до 3 м. Одна и та же система может использовать оба режима.
Скорость, используемая устройством, подключенным к конкретному порту, определяется хабом по уровням сигналов на линиях D+ и D–, смещаемых нагрузочными резисторами приемомпередатчиков.
Сигналы синхронизации и данных кодируются по методу NRZI (Non Return to Zero Invert). Каждому пакету предшествует поле синхронизации SYNC, позволяющее приемнику настроиться на частоту передатчика.
Новая спецификация USB-2.0 дополняет новые режимы передачи со скоростями в 40 раз большими. При этом появляется возможность передавать через шину USB потоки аудио и видеосигналов без сжатия.

4.9.2  ШИНА   IEEE 1394  –  FIRE-WIRE
Стандарт для высокопроизводительной последовательной шины (High Performance Serial Bus), получивший официальное название IEEE 1394, был принят в 1995 году. Целью разработки являлось создание шины, не уступающей по производительности современным стандартным параллельным шинам, при существенном удешевлении и повышении удобств подключения, достижимом при переходе на последовательный интерфейс. Стандарт основан на шине FireWire, используемой фирмой APPLE COMPUTER в качестве дешевой альтернативы шины SCSI в компьютерах MACINTOSH и POWERMAC. Название FireWire (огненный провод) теперь применяется и к реализациям IEEE1394, это название сосуществует и кратким обозначением 1394.
Преимущества FireWire перед другими последовательными шинами:
•	Многофункциональность: шина обеспечивает цифровую связь до 63 устройств без применения дополнительной аппаратуры (хабов). Устройства – цифровые камкодеры, сканеры, принтеры, дисковые накопители и др – могут обмениваться данными не только с компьютером (который не является обязательным для шины), но и между собой.
•	Высокая скорость обмена (100, 200 и 400 Мбит/с) и изохронные передачи позволяют передавать по шине одновременно несколько каналов «живого видео» без компрессии и аудиосигналы с качеством CD.
•	Относительно низкая цена компонентов и кабеля.
•	Легкость установки и использования. FireWire расширяет систему Plug and Play. Устройства автоматически распознаются и конфигурируются при включении и отключении.
•	Питание внешних устройств от шины током до 1,5 А.
•	Управлять шиной может не только компьютер, но и другие «интеллектуальные» устройства.
•	В отличие от USB, управляемой одним хост-контроллером, стандарт 1394 предполагает соединение возможно равноправных устройств в сеть.
•	В отличие от USB (в которой соединение двух и более компьютеров не предусмотрено) шины 1394 можно использовать и для объединения нескольких компьютеров и периферийных устройств в сеть

Стандарт 1394 определяет две категории шин : КАБЕЛЬНЫЕ ШИНЫ и КРОСС-ШИНЫ (backplane). Под КРОСС-ШИНАМИ подразумеваются обычно параллельные интерфейсы, объединяющие внутренние подсистемы устройства, подключенного к кабелю 1394.
Сеть может состоять из множества ШИН, соединенных МОСТАМИ. В пределах одной ШИНЫ устройства объединяются соединительными кабелями без применения каких-либо дополнительных устройств. МОСТЫ представляют собой специальные интеллектуальные устройства, например, интерфейс РС с шиной FireWire представляет собой мост PCI – 1394. Мостами являются также и соединения кабельной шины 1394 с кросс-шинами устройств.
16-ти битовая адресация УЗЛОВ сети допускает до 63-х устройств в каждой шине, адресуемых 6-ти битовым полем идентификатора узла. 10-ти битовое поле идентификатора шины допускает использование в системе до 1023 мостов, соединяющих шины возможно разного типа.
Стандарт IEEE 1394 предусматривает связь узлов с помощью 6-ти проводного кабеля, заключенного в общий экран. Две витые пары используются для передачи сигналов (раздельные для приемника и передатчика), два провода используются для питания устройств (8-40 В, до 1,5 А). Для гальванической развязки интерфейса используются трансформаторы или конденсаторы (в дешевых устройствах). Некоторые устройства имеют только 4-х контактный разъем меньшего размера, у которого имеются только сигнальные цепи.
Система допускает динамическое (горячее) подключение и отключение устройств. Идентификаторы подключаемым устройствам назнаются автоматически, без участия пользователя. Изменение топологии (состава подключенных устройств) автоматически отслеживается шиной и передается управляющему ПО.

4.10  ПРОГРАММИРУЕМЫЙ  ТАЙМЕР  I8254
Программируемый таймер (ПТ) I8254 предназначен для генерации времязадающих функций, программно-управляемых временных задержек с возможностью программного контроля их выполнения.
Программируемый таймер I8254 включает три независимых канала, каждый из которых может быть запрограммирован на работу в одном из шести режимов для двоичного или двоично-десятичного счета. Структурная схема ПТ приведена на рис. 4.10.

Каждый канал включает :
	16-ти разрядный счетчик-таймер СЕ, работающий в режиме вычитания. Декремент содержимого СЕ осуществляется по спадающему «1-0» фронту на входе CLK. Максимальная частота входного сигнала - 8 МГц.
	16-ти разрядный параллельный регистр констант пересчета CR. Содержимое регистра CR загружается в счетчик СЕ в зависимости от запрограммированного режима.

	16-ти разрядный буферный регистр ОL, служащий для запоминания и хранения мгновенного значения счетчика СЕ, которое в любой момент может быть записано командой ЗАЩЕЛКА (CLC) или ЧТЕНИЕ СОСТОЯНИЯ КАНАЛА (RBC). После выполнения этих команд содержимое ОL можно считать в МП без остановки дальнейшего счета в СЕ.
	Схема управляющей логики канала  CL – осуществляет управление входными и выходными сигналами канала – CLK, GATA, OUT – в зависимости от запрограммированного режима.
	8-ми разрядный регистр управляющего слова  RSW – загружается при программировании каждого канала. Формат управляющего слова приведен на рис. 4.11.
	8-ми разрядный регистр состояния канала RS, содержимое которого можно считывать в МП с помощью команды RBC - чтение состояния канала. Формат регистра состояния аналогичен формату управляющего слова (рис.4.14), за исключением старших двух разрядов, что позволяет контролировать правильность загрузки управляющего слова.
Разряд D7 слова состояния канала отображает состояние выхода канала OUT в момент выполнения команды RBC.
Разряд D6 является флагом обновления регистра констант CR. Этот разряд равен нулю, если регистр CR свободен или произошла загрузка из CR в CE.

Выводы данных программируемого таймера D0..D7 подключаются к системной шине данных ПЭВМ.
Строб чтения данных из порта ~RD и строб записи данных в порт ~WR подаются от системного контроллера.
Строб выбора микросхемы ~CS формируется при дешифрации сигналов системной адресной шины SA2..SA15. Обычно для этой цели применяют Программируемые Логические Матрицы (ПЛМ). При нулевом уровне на входе ~CS микропроцессор обменивается информацией с ПТ. Если на входе ~CS – логическая 1, выводы данных таймера переводятся в Z-состояние и не мешают другим устройствам обмениваться с МП.

На адресные входы программируемого таймера А0, А1 подаются младшие разряды системной шины адреса SA0, SA1. Эти сигналы осуществляют адресацию к одному из каналов :

А1	А0	Выбор  канала
0	0	Канал  0
0	1	Канал  1
1	0	Канал  2
1	1	Адрес загрузки управляющего слова или команд

CLK0..CLK2 – входы тактовых сигналов. Состояние счетчиков СЕ0..СЕ2 декрементируется по спадающему фронту тактовых сигналов.
GATA0..GATA2 – входы разрешения счета.
OUT0..OUT2 – выходы счетчиков/таймеров.

Программирование ПТ начинается с загрузки в каждый канал управляющего слова (рис. 4.11) и констант пересчета. При работе в двоичном коде (BCD = 0) константа пересчета может быть в диапазоне 0..65536, в двоично-десятичном коде (BCD = 1) константа задается в диапазоне 0..9999. Команды программирования каналов таймера приведены в табл. 4.6.


Таблица 4.6 - Команды программирования таймера
~CS	~RD	~WR	A1	A0	Команда
0
0
0
0
0
0
0
0
1
0	1
1
1
1
0
0
0
0
X
1	0
0
0
0
1
1
1
1
X
1	0
0
1
1
0
0
1
1
X
X	0
1
0
1
0
1
0
1
X
X	Запись константы в канал 0
Запись константы в канал 1
Запись константы в канал 2
Запись управляющего слова, команд
Чтение состояния канала 0
Чтение состояния канала 1
Чтение состояния канала 2
Нет операции (Z-состояние)
То же
То же


Для чтения содержимого счетчиков имеется три метода:
•	простое чтение;
•	чтение на лету (защелкивание содержимого счетчиков командой CLC в регистр OL и последующее чтение этого регистра);
•	обратное чтение (защелкивание содержимого счетчиков и регистров состояния командой RBC и последующее считывание).
При простом чтении содержимого счетчика, выбираемого адресами А0, А1, работа счетчика должна быть приостановлена подачей  GATE = 0.
Перед чтением по второму методу – «чтение на лету» – необходимо записать команду CLC для канала, определяемого старшими битами команды (см. рис. 4.11).
Третий метод предполагает использование команды «Обратное чтение» – RBC. Формат управляющего слова для этой команды приведен на рис. 4.12. По команде могут выполняться две операции : защелкивание текущего значения счетчика(ов) и(или) защелкивание текущего значения регистра(ов) состояния – RS. Эта команда эквивалентна нескольким командам «Чтения на лету» – CLC (по одной на каждый счетчик).


Если защелкнуто текущее значение счетчиков (в регистры OL) и регистров состояния RS, то по первой операции считывания канала (см. табл. 4.6) будет считываться регистр состояния RS выбранного канала. Следующие одна или две операции (считывание одного или двух байтов) реализуют считывание защелкнутого счета.

РЕЖИМ 0 – ждущий мультивибратор с программным запуском, формирует отрицательный импульс после программной записи константы. 
Низкий уровень сигнала на выходе OUT устанавливается сразу после загрузки управляющего слова (рис. 4.13). Счет разрешается единичным логическим уровнем на входе GATA. На время, пока GATA = 0, счет останавливается. Изменение состояния счетчика СЕ осуществляется по спадающему фронту сигнала на входе CLK, причем по первому тактовому сигналу CLK происходит загрузка счетчика СЕ константой из регистра CR, и только второй тактовый сигнал CLK декрементирует состояние счетчика СЕ.
После отсчета загруженного числа устанавливается сигнал OUT = 1. Таким образом, сигнал OUT = 0 удерживается на время N периодов входной тактовой частоты (где N – загруженная константа).


РЕЖИМ 4 – формирователь временной задержки с программным запуском.
После загрузке управляющего слова выход OUT устанавливается в единичное состояние. Режим 4 отличается от режима 0 тем, что выходной сигнал OUT устанавливается в нуль на один период входной тактовой частоты CLK по окончании счета (рис. 4.16).

РЕЖИМ 1 – ждущий мультивибратор с аппаратным запуском импульсами со входа GATA
После загрузки управляющего слова на выходе OUT устанавливается высокий логический уровень. Загрузка константы пересчета не изменяет состояние выхода. По спадающему фронту сигнала CLK после окончания импульса на входе GATA выход OUT устанавливается в низкий логический уровень и возвращается в единичное состояние после окончания счета (рис. 4.14). Режим 1 является режимом с перезапуском. Каждый импульс на входе GATA загружает константу пересчета из регистра CR в счетчик СЕ и начинается формирование нового отрицательного импульса на выходе OUT. Длительность импульса пропорциональна константе N.


РЕЖИМ 5 – формирователь временной задержки с аппаратным запуском.
РЕЖИМ 5 отличается от режима 1 тем, что отрицательный импульс, длительность которого равна периоду входной тактовой частоты CLK, формируется по окончании счета.

РЕЖИМ 2 – делитель входной частоты CLK на коэффициент пересчета N (делитель с программируемым коэффициентом деления).
Сразу после загрузки управляющего слова на выходе OUT устанавливается единичный сигнал. После загрузки константы пересчета и при единичном уровне на входе GATA начинается формирование на выходе OUT отрицательных импульсов, длительностью в один период сигнала CLK, и частотой в N раз меньше (рис. 4.15). Режим 2 является режимом с автозагрузкой, т.е. после окончания счета содержимое регистра СR загружается в счетчик СЕ и продолжается его декремент.
РЕЖИМ 3 аналогичен режиму 2, но отличается тем, что выходной сигнал OUT имеет скважность 2 (длительность отрицательного импульса равна расстоянию между импульсами).  При нечетном коэффициенте пересчета длительность единичного уровня на выходе OUT на один период больше длительности нулевого уровня.

Архитектура IBM PC AT+ использует подсистему трехканального 16-ти разрядного программируемого таймера i8254 в качестве системного таймера (рис 4.16):
	Выход КАНАЛА 0 (OUT0), использующего режим 3, связан с IRQ0 контроллера прерываний i8259А и обеспечивает прерывание системных часов реального времени.
	Выход КАНАЛА 1 (OUT1), использующего режим 2, генерирует сигнал запроса регенерации динамической RAM.

	Выход КАНАЛА 2, используя режим 3, генерирует тональный сигнал для громкоговорителя.

Таблица 4.7 – Порты, используемые для программирования таймера
Адрес порта	Функция
40h	Чтение или запись счета для канала 0
(системные часы)
41h	Чтение или запись счета для канала 1
(запрос регенерации)
42h	Чтение или запись счета для канала 2
(тональный сигнал громкоговорителя)
43h	Запись управляющего слова и команд CLC, RBC


4.11  СИСТЕМА  ПРЕРЫВАНИЙ  

Все микропроцессоры х86 имеют два входа, по которым внешние устройства могут привлечь их внимание: вход NMI – немаскируемое прерывание и вход INTR – маскируемое прерывание.
При поступлении внешних запросов прерывания по входу INTR процессор ЗАКАНЧИВАЕТ ВЫПОЛНЕНИЕ ТЕКУЩЕЙ КОМАНДЫ, затем, если установлен флаг разрешения прерываний (IF=1), сохраняет в стеке содержимое регистра флагов (Е)FX и регистров CS и (Е)IP (адрес возврата) и сбрасывает флаг IF = 0.
После этого процессор получает от внешнего устройства (запросившего прерывание) ВЕКТОР (или ТИП) ПРЕРЫВАНИЯ – однобайтовое число (от 32 до 255) и загружает из таблицы прерываний новые значения для CS и (Е)IP. Поэтому для каждого типа (вектора) прерывания в таблице отведено 4 байта. Вся таблица в реальном режиме занимает первый Килобайт (4 * 256) адресного пространства. Для системных целей зарезервированы типы (векторы) внутренних прерываний от 0 до 31.
Сброс флага прерывания IF не позволяет прервать выполнение процедуры прерывания до ее окончания (после восстановления из стека регистра флагов) или явного разрешения командой EI (Enable Interrupt).
Процедура прерывания заканчивается выполнением команды IRET (возврат из прерывания), которая восстанавливает из стека адрес возврата в (Е)IP и CS, а также регистр флагов (Е)FX. (Обычная команда RET не восстанавливает регистр флагов).
Если флаг разрешения прерываний сброшен IF=0, процессор игнорирует прерывания от внешних устройств по входу INTR (но не внутренние системные программные прерывания). Немаскируемое внешнее прерывание по входу NMI не может быть запрещено и в таблице прерываний ему отведен элемент с типом 2. Обработка немаскируемого прерывания не может быть прервана до выполнения команды IRET.
Команда внутреннего прерывания INT n (где n – однобайтовое число от 0 до 255) загружает в стек содержимое регистра флагов (Е)FX, после чего запоминает в стеке адрес возврата (CS и (Е)IP) и выбирает из таблицы типов прерываний новые значения для CS и (Е)IP. Состояние флага разрешения прерывания IF не влияет на выполнение команды INT n.
Прерывание 1 вырабатывается после выполнения каждой команды при установленном флаге трассировки TF.
Однобайтовая команда INT (без указания типа) выполняет прерывание по типу 3.
Команда INTO вызывает прерывание по типу 4, если установлен флаг арифметического переполнения OF=1.
Обычно с прерываниями ассоциируется и команда останова HLT. Она прекращает действия процессора, причем содержимое регистров CS и (Е)IP показывает на команду после HLT. Когда возникает прерывание, процессор выполняет его и после команды IRET (возврат из прерывания) продолжает выполнять последующую программу. По существу, команда HLT превращается в средство запуска процессора процедурой прерывания.
Процессоры 286+, как и I8086/88, могут обслужить до 256 типов прерываний. Прерывания подразделяются на:
	АППАРАТНЫЕ (маскируемые и немаскируемые), вызываемые электрическими сигналами на выводах процессора;
	ПРОГРАММНЫЕ, выполняемые по команде INT xx;
	ИСКЛЮЧЕНИЯ ИНСТРУКЦИЙ.
АППАРАТНЫЕ И ПРОГРАММНЫЕ ПРЕРЫВАНИЯ работают так же, как и в  МП   I8086/88.
ИСКЛЮЧЕНИЯ ИНСТРУКЦИЙ (Instruction Exceptions), или просто исключения, случаются при появлении особых условий при выполнении операций (в I8086 аналогом исключений являлись прерывания процессора). После обработки исключений (кроме исключения 9, относящегося к сопроцессору) управление возвращается снова к той же инструкции (включая все префиксы), которая вызвала исключение. Набор и обработка исключений реального и защищенного режимов различны. Под исключения Intel резервирует векторы 0 – 31 в таблице прерываний, однако, в самом компьютере часть из них перекрывается системными прерываниями BIOS и DOS.
Процедура, обслуживающая прерывание или исключение, определяется по таблице с помощью номера (типа) – однобайтового указателя (вектора) прерывания.
Однобайтовый указатель для аппаратных прерываний вводится аппаратно от внешней схемы КОНТРОЛЛЕРА ПРЕРЫВАНИЙ, немаскируемое прерывание имеет фиксированный вектор 2.
Указатель для программных прерываний задается командой, а исключения генерируют и передают вектор внутри процессора.
В ЗАЩИЩЕННОМ РЕЖИМЕ ВИРТУАЛЬНОЙ АДРЕСАЦИИ каждому номеру (типу) прерывания соответствует элемент в ТАБЛИЦЕ ДЕСКРИПТОРОВ ПРЕРЫВАНИЙ – IDT (Interrupt Descriptor Table).
В РЕАЛЬНОМ РЕЖИМЕ таблица прерываний организована так же, как и у I8086/88, – она содержит двойные слова (дальние логические адреса переходов, обслуживающих процедур). После сброса эта таблица располагается, начиная с нулевых адресов. Однако командой LIDT можно изменять ее положение в пределах первого мегабайта, а размер может быть уменьшен с 03FFh до 007Fh. При попытке обслуживания прерывания с номером, выходящим за установленный размер таблицы, генерируется исключение 8.
В ЗАЩИЩЕННОМ РЕЖИМЕ таблица IDT содержит 8-ми байтовые ДЕСКРИПТОРЫ ПРЕРЫВАНИЙ. Она может иметь размер от 32 до 256 дескрипторов и располагаться в любом месте физической памяти.
В 64-битном режиме (long mode) дескрипторы имеют новую 16-байтную структуру, и здесь иные правила переключения стека. Кроме того, в этом режиме не выполняется аппаратное переключение задач.
Обычно на вход INTR подается выходной сигнал программируемого контроллера прерываний (ПКП) i8259А, а не запросы прерываний отдельных устройств.

4.11.1   ПРОГРАММИРУЕМЫЙ  КОНТРОЛЛЕР  ПРЕРЫВАНИЙ   I8259А

I8259A является устройством, специально разработанным для микрокомпьютерных систем с прерываниями. Он управляет восемью уровнями или запросами и имеет встроенные средства расширения другими i8259A (до 64 уровней). Он программируется системным матобеспечением как устройство обмена. Доступный программисту выбор приоритетных режимов таков, что порядок, по которому запросы обрабатываются i8259А, может конфигурироваться в соответствии с системными требованиями. Приоритетные режимы могут изменяться или переконфигурироваться динамически в любое время в главной программе.
ПКП может использоваться как для организации обмена информацией в режиме прерывания, так и для организации программно-управляемого обмена. В первом случае ПКП на приоритетной основе формирует запрос на прерывание для МП – INTR – и номер (вектор) прерывания. Во втором – МП считывает слова состояния ПКП и программно определяет устройство с наивысшим приоритетом, запросившее прерывание.
Контроллер позволяет реализовать :
•	простой приоритетный режим – всем восьми входам запросам присваиваются фиксированные приоритеты, причем наивысший  приоритет присваивается входу IR0, наинизший – IR7;
•	режим циклического приоритета – после окончания обслуживания любого устройства приоритеты входов ПКП циклически изменяются таким образом, что устройству, обслуженному последним, присваивается низший приоритет; в режиме циклического приоритета низший приоритет может быть присвоен программным способом любому входу запроса.
ПКП принимает запросы прерываний от внешних устройств (IR0..IR7), запоминает их в регистре запросов прерываний IRR (рис. 4.20), устанавливая в единицу соответствующий бит регистра, различает – какое из входных требований более важное (приоритетное), устанавливает – выше ли приоритет входного запроса значения текущего обслуживаемого уровня прерывания – и выдает сигнал требования прерывания INT на вход INTR в МП, основываясь на этом определении.
Реагируя на сигнал INTR, МП заканчивает выполнение текущей команды, а затем инициирует два цикла шины ПОДТВЕРЖДЕНИЯ ПРЕРЫВАНИЯ – ~INTA.
Первый цикл шины ~INTA информирует ПКП о том, что МП распознал запрос прерывания. Он также отводит время контроллеру для взаимодействия с подключенными к нему другими контроллерами. В течение второго цикла шины ~INTA контроллер выдает в МП по шине данных 8-ми битовый номер (вектор) прерывания. После этого МП сбрасывает флаг разрешения прерываний IF, запоминает в стеке регистр флагов (E)FLAGS а также адрес возврата CS : (E)IP, затем загружает из таблицы векторов прерываний адрес подпрограммы обслуживания:  в командный сегментный регистр – CS и в регистр указатель команд – (Е)IP.



Прерывания с входных линий IRn (см. рис. 4.17) обрабатываются двумя каскадированными регистрами: регистром запросов на прерывание – IRR – и регистром занятости (регистром обслуживаемых прерываний – ISR). IRR используется для хранения прерываний всех уровней, которые запросили обслуживание, а в ISR переписываются все уровни прерываний, которые обслуживаются (этих уровней может быть несколько при вложенных прерываниях). После переписи запроса прерывания в ISR соответствующий бит в IRR сбрасывается в нуль, и когда поступит новый запрос на этот же вход, он будет зафиксирован и обработан.
Установленный запрос в регистре ISR остается неизменным до поступления на 8259А от процессора команды окончания прерывания (EOI). В режиме полного вложения, пока установлен разряд ISR, все последующие запросы с таким же или более низким приоритетом не вызывают запрос на прерывание процессора (INTR). Однако запросы более высокого приоритета могут сформировать запрос на прерывание процессора и установить свой бит в регистре ISR. Прерывания в этом случае возможны, если внутри процедуры обработки прерывания будет программно установлен флаг разрешения прерывания IF.
Регистр масок прерываний IMR содержит единицы в разрядах, соответствующих маскируемым (запрещенным) в настоящий момент уровням запросов.
ПКП I8259А имеет два порта ввода-вывода, чтобы программы могли считывать и устанавливать через шину данных – D0..D7 – разнообразные режимы его работы, обращаться к его внутренним регистрам и сообщать об окончании процедуры прерывания. Вход А0 определяет, какой из двух портов адресуется, а управляющие сигналы ~RD, ~WR, ~CS действуют так же, как и в таймере.

Для контроллера i8259А существует два способа распознавания активного запроса на прерывание: распознавание запроса по уровню и распознавание запроса по фронту. Выбор способа осуществляется программно командами инициализации.
При распознавании запроса по уровню контроллер i8259А реагирует на любой активный (высокий) уровень на входе IRQ. Запрос на входе IRQ должен длиться до заднего фронта первого импульса INTA.
Если на каком-либо из входов запрос на прерывание будет отменен до первого импульса INTA, контроллер будет действовать так, словно был активным вход IRQ7. Это позволяет уменьшить влияние помех по входам запросов прерываний, используя подпрограмму по входу IRQ7 в качестве программы «подчистки» или перепроверки состояния ПКП i8259А.
Если вход IRQ остается активным после выполнения команды EOI (окончание обработки прерывания), будет сформировано еще одно прерывание.
При распознавании запроса по фронту активным считается переход от низкого уровня к высокому. Целесообразно для запуска запросов использовать положительный уровень IRQ с коротким отрицательным импульсом (активным считается задний фронт импульса).

4.11.2  КАСКАДИРОВАНИЕ  КОНТРОЛЛЕРОВ  ПРЕРЫВАНИЙ
Чтобы обрабатывать более восьми видов прерываний, требуется несколько ПКП I8259А. Только один из них, называемый ВЕДУЩИМ (главным, MASTER), соединяется со входом INTR  процессора. Остальные контроллеры, называемые ВЕДОМЫМИ (подчиненными, SLAVE), подключаются ко входам запросов прерываний ведущего контроллера. 
При максимальном количестве запросов на прерывание (64 запроса) необходим один ПКП – MASTER и восемь ПКП – SLAVE.
На рис. 4.18 показана подсистема аппаратных прерываний IBM PC AT+.


Чтобы все ПКП действовали согласовано, каждый из них должен знать свое предназначение. Нулевой сигнал на входе SP/~EN сообщает контроллеру, что он ведомый (SLAVE). Единичный сигнал подается на вход SP/~EN ведущего (MASTER) контроллера (см. рис. 4.18). Кроме того во внутреннем регистре ведущего ПКП зафиксировано, какие входы запросов прерывания IR подсоединены к ведомым контроллерам, а какие непосредственно к устройствам.
Во внутреннем регистре каждого ведомого контроллера хранится номер входа IR ведущего контроллера, к которому он (ведомый ПКП) подсоединен. Если устройство запрашивает прерывание через один из ведомых контроллеров, последний сформирует запрос прерывания через ведущий ПКП. МП х86 отреагирует на это двумя циклами шины подтверждения прерывания ~INTA.
В течение первого цикла шины ~INTA ведущий ПКП подтверждает запрос прерывания ведомого ПКП, выдавая его номер входа IR на линии каскадирования CAS. Эти линии соединяют ведущий контроллер со всеми ведомыми. Такое подтверждение необходимо потому, что запросить прерывание могут одновременно несколько ведомых ПКП.
Во втором цикле шины ~INTA выбранный ведомый контроллер помещает номер прерывания на свою шину данных, чтобы его смог прочитать МП.
После включения питания оба ПКП (MASTER, SLAVE) инициализируются BIOS, в результате чего каждому запросу на прерывание устанавливается приоритет и присваивается код вектора (см. табл. 4.8).


Таблица 4.8 – Источники прерываний, их приоритеты и коды векторов
Master/ Slave	За-прос на прерывание	Источник прерывания	Прио-ритет	Код
век-тора
-

	NMI

	Ошибка паритета па-мяти или другая неисправи-мая ошибка в системе	1	02h
Master	IRQ0	Системный таймер	2	08h
Master	IRQ1	Клавиатура	3	09h
Slave	IRQ8	Часы реального времени	4	70h
Slave	IRQ9	Рeзерв	5	71h
Slave	IRQ10	Резерв	6	72h
Slave	IRQ11	Резерв	7	73h
Slave	IRQ12	Резерв	8	74h
Slave	IRQ13	Ошибка сопроцессора	9	75h
Slave	IRQ14	НМД	10	76h
Slave	IRQ15	Резерв	11	77h
Master	IRQ3	СOM 2	12	0Bh
Master	IRQ4	COM 1	13	0Ch
Master	IRQ5	LPT 2	14	0Dh
Master	IRQ6	НГМД	15	0Eh
Master	IRQ7	LPT1	16	0Eh

4.12  УСТРОЙСТВА  ОТОБРАЖЕНИЯ  ИНФОРМАЦИИ - ДИСПЛЕИ
4.12.1  ВИДЕОКОНТРОЛЛЕРЫ
Развитие видеоконтроллеров связано с историческими этапами совершенствования самих РС.
К стандартным видеоконтроллерам РС относятся:
•	монохромный дисплейный адаптер (Monochrome Display Adapter – MDA);
•	цветной графический адаптер (Color Graphics Adapter – CGA);
•	монохромный графический адаптер (Monochrome Graphics Adapter – MGA);
•	улучшенный графический адаптер (Enhanced Graphics Adapter – EGA);
•	видеографическая матрица (Video Graphics Array – VGA);
•	лучшая видеографическая матрица (Super Video Graphics Array – SVGA) и др.
Одним из основных элементов любой видеоситемы является собственная память, которая хранит информацию, выводимую на монитор (регенерируемую на экране с частотой кадровой развертки). Хотя видеопамять (или оперативная память для хранения изображения), как правило, физически находится на плате видеоадаптера, она составляет часть общей памяти компьютера, т.е. эта память лежит в адресном пространстве базового микропроцессора. В IBM PС совместимых компьютерах для нее зарезервирован диапазон адресов:
A0000h – BFFFFh (128 Кбайт).
Все видеосистемы могут работать в одном из двух основных видеорежимах: текстовом (TXT) или графическом (GR). В текстовом (символьном) режиме экран монитора разбивается на отдельные символьные позиции, в каждой из которой может выводиться один символ. Символьной позиции соответствует номер столбца Х и номер строки Y. В видеопамяти для каждой такой позиции отводится по два байта, причем первый (четный байт) содержит код самого символа, а следующий – его атрибуты (т.е. способ отображения символа – яркость, цвет, мерцание).
Для каждого символа на экране отведен прямоугольник (символьная позиция, знакоместо), например, 9 точек (пикселов) по горизонтали и 14 пикселов по вертикали. Чем больше пикселов отводится под символьную позицию, тем выше качество отображаемых символов.
Для преобразования кодов символов, хранимых в видеопамяти, в точечные изображения на экране служит, так называемый, знакогенератор – набор кодов в ПЗУ или ОЗУ, где хранятся изображения символов, «разложенные» по строкам. Синхронно с движением луча по экрану монитора коды символов (выбираемые из видеопамяти) преобразуются в коды видеоизображения (с помощью знакогенератора) и поступают на вход монитора.
В графическом режиме для каждого пиксела отводится от одного (для монохромного режима) до нескольких бит (в цветном режиме от 4 до 24). Графический режим часто называют режимом с адресацией всех точек (All Points Addresable), потому что в этом случае имеется доступ к каждой точке изображения.
Максимальное разрешение и количество воспроизводимых цветов видеосистемы зависят от объема видеопамяти и количества бит, приходящихся на один элемент изображения (пиксел).

Таблица 4.8– Минимальный объем видеопамяти  (в МБ) в зависимости 
от разрешения и количества цветов
Разрешающая способность	Бит на пиксел  (количество цветов)
	4  (16)	8  (256)	16  (64К)	24  (16М)
640 *480	0,25	0,5	1,0	1,0
800 * 600	0,25	0,5	1,0	1,5
1024 * 768	0,5	1,0	1,5	2,5
1280 * 1024	1,0	1,5	2,5	4,0
1600 * 1200	1,0	2,0	4,0	6,0

MDA  –  МОНОХРОМНЫЙ  ДИСПЛЕЙНЫЙ  АДАПТЕР
Этот адаптер является старейшим среди аналогичных видеоконтроллеров. Работает только в текстовом (символьном) режиме. Величина матрицы символа – 14 * 9 (14 точек в высоту и 9 в ширину). Сам символ формируется из 9 * 7 точек.
Размер экрана MDA – 80 колонок (символов) по 25 строк (2000 символов на экран) – стандартный для текстового режима. Разрешающая способность составляет 720 * 348 точек.
Достоинствами этого видеоконтроллера являются: высокое качество изображения и низкая цена, недостатками – невозможность работы в графическом режиме и отсутствие цвета.
Знакогенератор MDA (блок программного описания внешнего вида воспроизводимых символов) расположен в ПЗУ видеоконтроллера и не может изменяться программно. Поэтому в MDA зарубежного производства нельзя ввести символы русского алфавита, – это требует замены ПЗУ.

CGA  –  ЦВЕТНОЙ  ГРАФИЧЕСКИЙ  АДАПТЕР
В отличие от своего предшественника CGA имеет возможность работать как в текстовом, так и в графическом режимах, формируя в обоих случаях цветное изображение. Размер матрицы символа при работе в текстовом режиме – 8 * 8 точек (разрешающая способность – 640 * 200 точек). Количество цветов – 16 (точнее, 8 цветов двух градаций яркости каждый).
Разрешающая способность в цветном графическом режиме – 320 * 200 точек. Количество цветов для каждой точки – по 4 из палитры в 16 цветов.
Разрешающая способность в режиме монохромной графики – 640 * 200. Объем видеопамяти адаптера CGA составляет 16 Кбайт.
Работать с таким видеоконтроллером тяжело и вредно, т.к. из-за низкого качества изображения быстро утомляется зрение.
Знакогенератор CGA нельзя загружать программно, поэтому ввод символов русского алфавита требует замены ПЗУ на плате видеоконтроллера.

MGA  –  МОНОХРОМНЫЙ  ГРАФИЧЕСКИЙ  АДАПТЕР
MGA был разработан компанией Hercules Computer Technology, по имени которой и был назван – Hercules Graphics Adapter. В настоящее время под термином «монохромный графический адаптер» принято подразумевать второй вариант видеоконтроллера – Hercules Plus, отличие которого состоит в возможности программной загрузки кодов знакогенератора, что делает возможным введение в него символов русского алфавита программно, без аппаратных переделок.

ЕGA  –  УЛУЧШЕННЫЙ  ГРАФИЧЕСКИЙ  АДАПТЕР
EGA позволяет отобразить на экране в текстовом режиме 80 колонок (символов) по 25 строк или графические изображения с разрешением 640 * 350 точек с использованием 16 цветов. Размер матрицы символа составляет 14 * 8 точек.
Объем видеопамяти составляет 112 Кбайт для каждого графического изображения.
Благодаря принципиально новой организации управления памятью и формированием изображения, можно смешивать цветовые составляющие в разных комбинациях, подбирая оптимальный цветовой тон и насыщенность из палитры в 64 оттенка для каждого из 16 цветов.
EGA позволяет производить загрузку кодов символов знакогенератора программным путем, поэтому введение букв русского алфавита не вызывает никаких затруднений у пользователя.
Имеются усовершенствованные варианты видеоконтроллера EGA, позволяющие при использовании специального программного обеспечения получать разрешение до 640 * 480 точек или в текстовом режиме – 43 строки на экран. Эти варианты улучшенного графического адаптера носят названия: Ultimate EGA, HEGA, PEGA и др.
Все перечисленные адаптеры формируют видеосигналы ТТЛ-уровней.

VGA  –  ВИДЕОГРАФИЧЕСКАЯ  МАТРИЦА
VGA в текстовом режиме отображает 80 символов по 25 строк (размер матрицы символов 14 * 8 точек) или 80 символов по 43 строки, а в графическом режиме имеет разрешающую способность 640 * 480 точек с использованием 16 цветов (выбранных из палитры 4096 оттенков) или 320 * 200 точек при воспроизведении 256 цветов в каждой точке.
Отличительная особенность этого видеоадаптера – формирование аналоговых выходных сигналов управления яркостью каждого из трех основных цветов – R, G, B. Поэтому изображение на экране монитора приближается по качеству к обычному телевизионному.
Абсолютное большинство производителей VGA обеспечивают возможность аппаратной эмуляции (т.е. совместимости на аппаратном уровне) адаптеров CGA, EGA, MGA с автоматическим переключением в требуемый режим, задаваемый программой.
Знакогенератор видеоконтроллера VGA (символы русского алфавита, в частности) может быть загружен программно.
Более современные адаптеры VGA имеют повышенную разрешающую способность:
•	VGA Vagic, VGA-16, TVGA-16 и др. – 800 * 600 точек при 256-ти цветной палитре;
•	VGA Profeccional, Genoa VGA и др. – 800 * 600 точек при 256-ти цветной палитре и 1024 * 786 точек при 16-ти цветной палитре.
•	Super VGA (SVGA) – 800 * 600 и более точек при палитре в 224 цветовых оттенков в каждой точке;
•	XGA – разрешение 1024 * 768 точек;
•	SXGA – разрешение 1280 * 1024 точек.
Хотя общий объем памяти и ограничивает количество цветов, которые может создавать видеоадаптер, сам спектр оттенков, получаемых на экране монитора, зависит от используемого RAMDAC (см. рис. 4.19). Например, в адаптере VGA  8-ми битовое значение цвета используется как адрес для выбора одного из 256 регистров (RAM) в таблице цветов RAMDAC. 
Каждый из регистров цвета RAMDAC является 18-ти разрядным и состоит из 6 битов для красной, 6 для зеленой и 6 для синей состав-ляющей. Каждая 6-ти битовая составляющая цвета преобразуется в аналоговые сигналы своим цифро-аналоговым преобразователем (DAC). Значения регистров в этой таблице программируются процессором.
Таким образом, выходной каскад VGA (RAMDAC), по сути, является 18-ти разрядной системой цветопередачи и позволяет отображать:  218 = 262 144 оттенка цветов, но поскольку объем памяти ограничивает использование только 8 бит на пиксел, то одновременно могут отображаться 256 цветов.
В SVGA-контроллерах сигналы для поддержки режимов HIGH-COLOR (15 или 16 бит для кодирования цвета каждого пиксела) или TRUE-COLOR (24-х разрядное кодирование цвета) формируются в обход таблицы цветов RAMDAC и поступают непосредственно на цифро-аналоговые преобразователи (DAC) цветов.
HDR
На данный момент принята цветовая модель передачи изображений RGB (red, green, blue), которую еще называют LDRi (Low Dynamic Range image). Она разрабатывалась для современных устройств, таких как телевизоры, мониторы и т. д. Суть этой схемы состоит в том, что любой оттенок можно выразить сочетанием трех основных цветов – красного, зеленого и синего – с правильно подобранной интенсивностью свечения, которая представляется в виде 256 градаций на цветовой канал. Само число 256 появилось как компромисс между производительностью видеоподсистемы, требованиями к реалистичности изображения и двоичной природой компьютерных вычислений (256 = 28). В результате исследований было выявлено, что 16,7 млн (256x256x256) оттенков вполне достаточно для правильной передачи изображений фотографического качества.
Но одна из недоработок данной модели всплыла только сегодня, когда компьютерные игры развиваются особенно интенсивно и выдвигаются высокие требования к реалистичности картинки. Модель RGB не может передать многие эффекты, к которым человек настолько привык в повседневной жизни, что не обращает на них внимания – например, временное ослепление при выходе из темного помещения, солнечные зайчики на блестящих поверхностях и др. В ПК-играх, в частности в современных шутерах, такие эффекты просто оживляют виртуальный мир.
Именно для получения правдоподобной графики и предназначена модель HDRi (High Dynamic Range image), где каждая точка изображения описывается реальными физическими параметрами. Если одна точка в действительности ярче другой в два раза, то и на картинке она должна быть именно вдвое ярче. Основным отличием HDRi от RGB является манипулирование вещественными, а не целыми числами, и здесь уже не обойтись одним байтом на канал цвета. Естественно, это приводит к возрастанию требований к графическим акселераторам и снижению уровня fps.
Новая технология задействуется в так называемом HDR-рендеринге. Суть процесса состоит в том, что при применении чисел с плавающей запятой получается намного более реалистичный результат, нежели при расчетах с целочисленной моделью RGB. В современных играх преобладает формат OpenEXR, разработанный студией Industrial Light and Magic. С учетом использования 16-битовых вещественных чисел на каждый канал в итоге получается 48 битов на пиксел, что, согласитесь, немало. И именно благодаря этому мы видим на мониторе не блеклое грязно-желтое солнце и сероватое небо, а яркую картинку, очень приближенную к реальности.
Стоит упомянуть, что применение HDR-рендеринга и формата Open-EXR допустимо только в случае поддержки игровым акселератором Shader Model 3.0 и выше. 

SHADER  MODEL  3.0
В играх в последнее время появилось огромное количество эффектов, которые позволяют создавать реалистичные и запоминающиеся фрагменты. В связи с этим было решено позволить игре управлять графическим процессором посредством понятных ядру наборов команд. Свод таких команд назвали шейдерами (shader). 
Существует два типа шейдеров: вершинные (vertex) и пиксельные (pixel). Первые отвечают за построение отдельных вершин полигонов, помогают реализовать скелетную анимацию, рельефы земли и воды, используются в создании эффекта морфинга. Вторые заведуют отдельными пикселами (точками) картинки и их обработкой перед самым выводом на экран, с их помощью получаются затемнение и освещение, преломление лучей света, полноэкранные и HDR-эффекты.
Довольно долгое время разработчики довольствовались Shader Model 2.0, но на данный момент все большую популярность приобретает расширенный набор инструкции из пакета DirectX 9.0 – Shader Model 3.0. В нем имеется поддержка последовательностей длиной в 65 535 команд (против 96 у предыдущей модели), реализованы плавные динамические переходы, есть возможность применения шейдеров при включении антиалиасинга, интерполяция и рендеринг изображений с использованием чисел с плавающей запятой в диапазоне до 32 битов (в то время как Pixel Shader 2.0 работает только с целыми числами и 8-битовым диапазоном).
Все эти нововведения позволяют получить более красивую и реалистичную картинку в современных играх, нежели при задействовании предыдущей версии шейдеров. Но если игра требует поддержки шейдеров третьего поколения, это вовсе не означает, что в системе с видеокартой, не использующей Shader Model 3.0, она не будет работать. Просто движок станет применять ту версию программы, которая совместима с данным акселератором.

Direct3D 10
DirectX занимает важное место в архитектуре Windows. Этот набор системных компонентов отвечает за все мультимедийные задачи в системе: видео, звук, графику. Наибольшие изменения появились в десятой версии Direct3D – компонента, ответственного за трехмерную графику. Тем более что в Microsoft Vista на его плечи легла визуализация графического интерфейса операционной системы – Aero.
В Microsoft Vista значительным, даже кардинальным изменениям подвергся только Direct3D. Прочие крупные компоненты (а из актуальных их теперь лишь два: Directlnput и DirectSound) остались без изменений, еще несколько уже довольно давно считаются устаревшими (DirectDraw, DirectMusic и DirectPlay) либо предназначенными для мультимедийных, а не игровых задач (DirectShow).
Хотя такой компонент, как Direct3D (D3D), адресован разработчикам ПО и игр и обычные пользователи напрямую с ним не работают, знать о нем им не помешает. Ведь каждая новая версия D3D устанавливает некую планку технических возможностей, которые должен поддерживать 3D-aкceлератор аппаратно (т. е. без эмуляции видеодрайвером), чтобы называться совместимым с ней, – и эта информация поможет в выборе модели видеокарты. К тому же по поддержке той или иной игрой определенной версии Direct3D можно примерно судить о техническом потенциале графического движка игры, по крайней мере на переходном этапе между версиями (т. е. в ближайшие год-полтора), так как в первую очередь новую версию D3D стараются поддержать наиболее технологичные и современные проекты. И наконец, та или иная игра делается в расчете на определенную минимальную версию Direct3D и без поддержки ее системой (ОС и видеокартой) просто не запустится – это может послужить толчком к апгрейду либо уберечь от покупки несовместимой игры для старого компьютера.
Direct3D 10 стал первым крупным обновлением данного API за последние четыре года – со времен появления D3D 9.0 в 2002 г. И это первый случай, когда его новая версия поддерживается только самой последней операционной системой Microsoft Vista. Поддержка D3D10 в Windows XP официально не планируется, к тому же она трудно осуществима технически. Причина кроется в значительном изменении архитектуры дисплейного драйвера, т.е. уходе от принципа его совместимости с прошлым семейством Windows NT 5.x (Windows 2000, XP, 2003 Server). Новая архитектура называется WDDM (Windows Display Driver Model), и переход на нее во многом вызван появлением нового графического интерфейса в Vista – Aero, базирующегося на Direct3D и в немалой степени «нагружающего» 3D-акселератор. Aero не использует для рендеринга GUI старый двумерный GDI API, применявшийся в Windows для этих целей еще с первых версий, и при использовании которого перерисовываются только части экрана, изменившиеся или «затертые» другими окнами, например, при их перемещении. Многие эффекты Aero являются динамическими и истинно трехмерными, что GDI не под силу. В Aero пересмотрена сама концепция рендеринга интерфейса программ: вместо непосредственного рисования на экране происходит сборка изображения из отдельных частей с применением эффектов на лету, несколько раз в секунду, как это осуществляется в играх. В свою очередь рендеринг трехмерного изображения параллельно несколькими программами, а также самой ОС без возникновения задержек требует лучшего управления его ресурсами, что и достигается с помощью WDDM-совместимых драйверов.
От общеархитектурных изменений в Vista для поддержки D3D10 перейдем к новым возможностям этого API и акселераторов, аппаратно совместимых с ним. На рис. 4.20 изображена общая схема 3D-конвейера в Direct3D, округлые блоки являются гибко программируемыми с помо-щью шейдеров, прямоугольные же по-прежнему управляются путем ус-тановки набора состояний, задающих режим их работы.
Input Assembler (IA) предназначен для задания набора входных данных, размещенных в видеопамяти, для использования их последующими этапами конвейера и интерпретации нужным образом. Следующий за ним этап вершинного шейдера (vertex shader, VS) не претерпел особых изменений по сравнению с прошлой версией и служит для трансформации информации отдельных вершин-точек ЗD-объектов, изменяя такие их параметры, как координаты или освещенность.
Одним из самых интересных и наиболее мощных нововведений D3D-10 являются геометрические шейдеры (geometry shader, GS). Вершинные шейдеры ничего не знают о связях отдельных вершин объекта, над которым работают, т.е. геометрической топологии объекта, и не могут вмешиваться в эти связи, добавляя или удаляя вершины. 
В отличие от них геометрические шейдеры работают уже с целыми примитивами (точка, линия либо треугольник) и их связями с соседними примитивами, но главное – могут более произвольно с ними обращаться, генерируя на выходе новые примитивы на лету в любом количестве либо пропуская ненужные, в зависимости от входных данных и своего алгоритма. Такие богатые возможности в обращении с геометрией позволяют перенести полностью на GPU многие вещи, которые ранее делались частично под управлением CPU, что снижало скорость параллельной работы процессора и видеокарты за счет частых блокировок 3D-pecypcoв для произведения операций над ними на CPU. К примеру, стало возможным полностью перенести на GPU системы частиц, расчет теневых объемов для ряда алгоритмов динамических теней, реализовать наконец честный displacement mapping, некоторые прогрессивные техники motion blur, визуальные эффекты (мех, волосы, растительность), однопроходное создание кубических карт отражения (cubemap).
 

Рис. 4.20 – Схемы конвейеров Direct3D

Стадия геометрического шейдера в ЗD-конвейере является опциональной и расположена между этапами вершинного шейдера и растеризации. Кроме того, как видно из схемы, выход геометрического шейдера может быть отправлен и просто в буфер памяти, а затем повторно подан на вход конвейера в произвольный момент, даже на другом кадре. Это позволяет, к примеру, однократно вычислить скелетную анимацию или морфинг для очень сложной модели, сохранить результат операции в видеопамяти, после чего многократно подавать ее на рендеринг на том же или последующих кадрах, реализуя таким образом новый метод инстансинга (instansing) объектов.
Все прочие стадии конвейера не являются чем-то новым: растеризатор преобразует трехмерную сцену в двумерное изображение с учетом перспективы и вызывает пиксельный шейдер (pixel shader, PS) для расчета цвета и Z-глубины каждого пиксела. После чего на последнем этапе сборки и вывода производятся окончательные проверки на глубину (Z test) и соответствие буферу шаблонов (stencil test, может применяться для самых разных алгоритмов, чаще для теней и отражений), в случае успеха результат пиксела сохраняется в буфер кадра или текстуру (render target).
В Direct3D 10 используется очередное поколение шейдеров – Shader Model 4.0 (SM 4.0). Среди новых возможностей: целочисленные и побитовые команды для лучшего управления логикой шейдера, снятие ограничений на количество инструкций в шейдере, увеличение лимитов на количество используемых шейдером текстур. Разработчики отказались и от поддержки низкоуровневого ассемблерного языка программирования шейдеров, теперь все шейдеры должны быть написаны на высокоуровневом языке HLSL. Сама функциональность HLSL в четвертой версии разбита на некую базовую, которую поддерживают все три типа шейдеров (VS, GS и PS), и специфическую для каждого из них. 
Легко видно, что такие изменения, как введение третьего типа шейдеров и унификация их базовой функциональности, лишний раз послужили толчком к переходу в новом DЗD-10-совместимом поколении акселераторов к унификации архитектуры GPU, когда в зависимости от нагрузки на ту или иную часть 3D-конвейера отдельные вычислительные блоки GPU временно берут на себя функции по работе над одним из трех типов шейдеров. И хотя подобная архитектура GPU не является непременным требованием со стороны спецификаций Direct3D, она оказалась вовремя поддержанной как NVIDIA в GeForce 8 series, так и AMD/ATI в R600.
В SM 4.0 было уделено особое внимание передаче константных данных в код шейдера. Через них в шейдер передавались самые разные наборы данных, например о костях модели для скелетной анимации, информация об источниках света, позиции, повороте и масштабе модели. Ранее у каждого шейдера имелся один довольно небольшой блок константных данных, его приходилось часто менять, иногда перед каждым вызовом рендеринга, постоянно перекачивая весь блок между системной и видеопамятью. 
В SM 4.0 константные данные разбиты на наборы, которыми можно управлять независимо и подключать к шейдеру до 16 таких наборов. Подобный подход дает немалый выигрыш в производительности, поскольку разные наборы констант можно обновлять независимо и с разной частотой. Некоторые загружаются в видеопамять единожды, сразу после загрузки уровня (например, список статических источников света), другие будут изменяться лишь один раз за кадр (положение и параметры динамических источников света в сцене), а третьи – с каждым выводимым объектом (позиция, ориентация, анимационные данные).
Кроме того, в десятой версии наконец ликвидированы пережитки, которые оставались еще с шестой-седьмой версии. Так, произошел окончательный отказ от механизмов Fixed Function Pipeline (FFP) – конвейера с фиксированной функциональностью, методики рендеринга «дошейдерной» эпохи. Это был большой набор состояний, флагов и функций для их установки, который и так уже долгое время в новых акселераторах эмулировался с помощью шейдеров и существенно «раздувал» как код видеодрайвера, так и саму библиотеку Direct3D. Под нож пошла и «развесистая» система опроса драйвера видеокарты через сам D3D о возможностях и ограничениях аппаратуры – capabilities (или кратко – caps). Зачастую данные, полученные подобным образом, были неполны или просто неверны.
Разработчикам также приходилось нередко использовать всевозможные «хаки» как для отдельных поколений графически чипов, так и для некоторых особенностей архитектур видеокарт ATI и NVIDIA. Microsoft пытается в очередной раз привести все к единому, поддерживаемому всеми стандарту, и видеокарты, которые хотят называться DЗD-10-совместимыми, должны попросту поддерживать все возможности, оговоренные в документации на Direct3D от и до, без отклонений в сторону меньшей функциональности. Были исключены медленные вызовы рендеринга объектов из системной памяти (DrawPrimitiveUp), как и весь механизм работы с пулами памяти.
На практике даже в играх топ-компаний часто злоупотребляли этими возможностями, что сильно снижало производительность. Теперь все ресурсы должны быть явно размещены в видеопамяти перед использованием. Исчезла давно критикуемая концепция «потери и восстановления устройства» (device lost & restore) – к такому состоянию Direct3D приходил после нажатия Alt+Tab, Win+L (блокировка сессии) или Alt+Enter (переключение между полноэкранным и оконным режимами). При возникновении подобной ситуации игра должна была освободить все занятые ею ресурсы Direct3D, произвести сброс устройства, затем пересоздать эти ресурсы заново. Что происходило, во-первых, медленно, во-вторых, код обработки описанной ситуации (иногда достаточно сложный) был рассредоточен по всему графическому движку, и в случае допущенной где-то ошибки игра просто «падала» после Alt+Tab. С такой проблемой, наверное, сталкивался каждый.
Сейчас из Direct3D выделен отдельный модуль под названием DXGI (DirectX Graphics Infrastructure), который отвечает за общие вопросы управления 3D-адаптерами, дисплеями и экранными режимами, гаммой, презентацией финального изображения, а также обработку ситуаций переключения режима пользователем по Alt+Enter. И наконец, за счет избавления от всех устаревших возможностей, а значит, облегчения Direct3D runtime, вместе с переносом многих проверок правильности данных с этапа рендеринга на этап создания ресурсов, были облегчены многие вызовы Direct3D, т. е. теперь можно выводить на экран больше объектов в каждом кадре при прежней производительности.
Итак, мы видим, что Microsoft учла многие недостатки и ограничения прошлых поколений своего 3D API и постаралась их исправить, зачастую путем простого отказа от накопленного «балласта». Особое внимание было уделено повышению гибкости программирования ЗD-конвейера, перспективе обеспечения еще большего параллелизма между CPU и GPU, снижению объемов передаваемых в видеокарту данных, улучшению менеджмента ее ресурсов. 

Таблица 4.9 – Даты выхода различных версий DirectX
Версия DirectX	Операционная система	Дата выпуска
DirectX 1.0	Windows 95a	30 сентября 1995
DirectX 2.0/2.0a	Windows 95 0SR2 и NT 4.0	5 июня 1996
DirectX 3.0/З.0а	Windows NT 4.0 SP3 (последняя версия с поддержкой DirectX для Windows NT 4.0)	15 сентября 1996
DirectX 4.0	-	-
DirectX 5.0	Была доступна в бета-версии под Windows NT 5.0, инсталлировалась под Windows NT 4.0	16 июля 1997
DirectX 5.1	Windows 95/98/NT 4.0	1 декабря 1997
DirectX 5.2	Windows 95	5 мая 1998
DirectX 6.0	Windows 98/NT 4.0	7 августа 1998
DirectX 6.1	Windows 95/98/98SE	3 февраля 1999
DirectX 7.0	Windows 95/98/985E/2000	22 сентября 1999
DirectX 7.0a	Windows 95/98/98SE/2000	1999
DirectX 7.1	Windows 95/98/98SE/Me/2000	16 сентября 1999
DirectX 8.0	Windows 95/98/98SE/Me/2000	30 сентября 2000
DirectX 8.0	Xbox	3 ноября 2000
DirectX 8.0a	Последний вариант под Windows 95	7 ноября 2000
DirectX 8.1	Windows 98/98SE/Me/2000/XP	12 ноября 2001
DirectX 9.0	Windows Server 2003	19 декабря 2002
DirectX 9.0a	Windows 98/98SE/Me/2000/XP	26 марта 2003
DirectX 9.0b	RC2	13 августа 2003
DirectX 9.0c	Windows XP SP2, Windows Server 2003 SP1, Xbox 360	13 декабря 2004
DirectX 9.0c	Совместимые с DX9.0c версии Windows, впервые включены D3DX DLL	9 декабря 2005
DirectX 9.0c (Shader Model 3.0)	Windows XP 
Последнее обновление с поддержкой Windows 98/98SE/Me/2000 – в августе 2005 
Версии декабря 2005 и февраля 2006 – с поддержкой формата XML для некото-рых классов	Ежемесячные 
обновления 
с августа 2005
DirectX 9.0L	DirectX 9 API – только для Windows Vista	-
DirectX 10.0	Новая версия DirectX – только для Win-dows Vista	-



Добавление некоторых возможностей, таких как геометрические шейдеры, открывает путь к реализации многих систем и алгоритмов полностью на GPU (системы частиц, displacement mapping). Хотя ничто не дается даром – Direct3D 10 будет работать только с Vista и только с новым поколением ускорителей. Для всего остального придется использовать девятую версию.

4.12.2  МОНИТОРЫ
Параметры изображения зависят в конечном счете не только от характеристик видеоконтроллеров, но и от параметров монитора. Вполне естественно предположить, что его разрешающая способность и уровни входных напряжений должны соответствовать разрешению видеоадаптера и его выходным напряжениям. Поэтому, как правило, каждый тип видеоконтроллера требует своего типа монитора.
В ранних моделях РС плата адаптера CGA имела специальный формирователь сигнала и выход для подключения к бытовому цветному или черно-белому телевизору.
Параметры первых мониторов для IBM PC были близки к параметрам телевизоров, но отличались более четким изображением, особенно в графическом режиме.
Черно-белые мониторы имеют лучшую разрешающую способность, чем цветные – вследствие наличия у последних дискретной цветоделительной маски перед экраном. Расстояние между отверстиями цветоделительной маски или размер «цветовой триады» на экране кинескопа определяют разрешающую способность цветного кинескопа в мониторе.

Таблица 4.10 – Зависимость между разрешением и расстоянием между точками люминофора

Размер экрана, дюйм	Количество точек на экране (разрешение)
	640 * 480	800 * 600	1024 * 768	1280 * 1024
	Расстояние между точками, мм
14	0,32	0,28	0,22	0,18
15	0,38	0,30	0,24	0,19
17	0,43	0,34	0,27	0,22
21	0,50	0,40	0,31	0,25


Необходимо также учитывать, что черно-белые мониторы имеют меньший уровень радиации из-за меньшего напряжения, подаваемого на анод кинескопа. Поэтому с точки зрения санитарии и утомляемости зрения предпочтительнее использовать черно-белые мониторы.
Параметры развертки телевизионного изображения 50 кадров в секунду и 625 строк (европейский стандарт) или 60 кадров в секунду и 525 строк (американский стандарт) при чересстрочной развертке не позволяют реализовать высокое разрешение по вертикали. Поэтому современные видеомониторы с повышенной разрешающей способностью имеют большую в несколько раз частоту строчной развертки (от 30 кГЦ до 100 кГц), чем бытовые телевизоры (15,625 кГц). Частота кадровой развертки должна обеспечивать незаметность мельканий формируемого изображения. В большинстве мониторов РС частота кадровой развертки составляет от 50 Гц до 120 Гц.
Формирование кадра изображения без чересстрочной структуры растра (non interline – NI) также уменьшает заметность мелькания изображения и, в конечном итоге, уменьшает утомляемость зрения.
Несовпадение стандартов развертки мониторов и телевизионного вещания порождает дополнительные трудности при воспроизведении на экране компьютера видеофильмов с CD-ROM или DVD-проигрывателей, а также непосредственного приема телевизионных программ. Поэтому современные адаптеры имеют дополнительный выход «композитного» PAL-видеосигнала для подключения к видеовходу цветного телевизора.
Размеры экрана монитора и соотношение высоты и ширины изображения примерно соответствуют размерам бытовых телевизоров. Поэтому размер экрана монитора определяется так же – по размеру диагонали: 12-ти дюймовые (31см), 14-ти дюймовые (36см) ... 19-ти дюймовые (49см), 21-о дюймовые (54см) и более.
В некоторых мониторах имеется возможность перевода в вертикальную ориентацию – Full-Page (полностраничный). Они по-зволяют выводить на экран изображение в размере полной стандартной страницы текста формата А4.
Современные мониторы реализуются не только на привычных электронно-лучевых трубках, а используют также плазменные технологии, жидкие кристаллы (с малым потреблением электроэнергии, что особенно важно для переносных компьютеров – ноутбуков), светодиодные технологии, проекционные экраны и др.

AMOLED – новое обличье OLED
AMOLED означает тип экрана, а точнее принцип, по которому этот экран работает. Слово расшифровывается как Active Matrix Organic Light Emitting Diode (органические светодиоды с активной матрицей) и является названием одного из подвидов хорошо знакомого OLED.
Обычный OLED с пассивной матрицей представляет собой две (или даже больше) полимерные полупроводниковые пластинки, размещенные между двумя проводниками, на которые подается напряжение определенной полярности – обычное дело для полупроводников. Если нужно отобразить цвет, то следует использовать ячейки, излучающие красный, синий и зеленый цвета.
При подаче напряжения на такую микроячейку она (а точнее, верхний излучающий слой) будет излучать свет, как и любой другой светодиод. В матрице их много, каким же образом можно заставить светиться тот, который нужен нам? На помощь приходит координатный принцип (как, например, в сенсорных экранах и клавиатурах) – электроды расположены сеткой, и, подавая сигнал на нужный столбец и строчку, мы включим необходимую ячейку-светодиод.
Разработчики активноматричных экранов пошли еще дальше. Пленки контактов и полупроводников решено было соединить с массивом тонкопленочных транзисторов, чтобы те непосредственно занимались управлением яркости свечения светодиодов. Эти транзисторы хорошо всем известны под английской аббревиатурой TFT. Они стали особо популярными, когда начали использоваться для управления ЖКИ-матрицами, которые впоследствии и позаимствовали этот термин. Светодиоды могут размещаться как над массивом TFT, так и быть интегрированными непосредственно в него – это вопрос техники. Транзисторы непрерывно контролируют ток. Кстати, сами транзисторы тоже могут быть органическими – соответствующие разработки уже ведутся.
Преимущества обычных пассивных OLED очевидны – это отличные цветопередача, контрастность и углы обзора, высокая скорость обновления и отсутствие необходимости в подсветке.
При сохранении всех достоинств OLED – главное отличие AMOLED – меньшее потребление энергии. Причем чем больше диагональ, тем больший выигрыш в автономности мобильного устройства можно получить. Особенно перспективным применение данной технологии может быть для экранов ноутбуков. Вместе с тем делать крупные панели пока что тяжело и дорого – чем больше диагональ, тем больше в экране бракованных транзисторов, а значит – неактивных пикселов.
Второе важное преимущество – возможность создавать очень тонкие матрицы-пленки, которые буквально можно свернуть в рулон. Правда, если матрицу слишком сильно согнуть, то при превышении так называемого критического радиуса произойдет надлом слоев, что приведет к выходу участка экрана из строя. Однако справедливости ради следует заметить, что с помощью привычной технологии ЖКИ гибкость экрана реализовать весьма непросто.

 
Да и стоимость обычных AMOLED, например для мобильных телефонов, на сегодня нельзя назвать приемлемой. В этом плане они пока что проигрывают жидкокристаллическим TFT, хотя по потребительским характеристикам выше их на голову. Второй недостаток – невысокий срок службы (причем было установлено, что синие светодиоды выходят из строя быстрее, чем красные и зеленые). В среднем он составляет около 10-15 тыс. часов непрерывной работы – на первый взгляд, много, но если вспомнить, что в году около 9 тыс. часов, то становится понятно, почему сейчас активно ищут новые, долговечные полупроводники для AMOLED.

4.12.3   МУЛЬТИМЕДИЙНЫЕ ПРОЕКТОРЫ

ТЕХНОЛОГИЯ    LCD

Белый свет лампы раскладывается на три составляющие с помощью дихроичных зеркал (пропускается только один цвет, а остальные отражаются). После этого каждый из цветов проходит сквозь жидкокристаллическую матрицу, а с помощью призмы все цвета собираются в один поток и через объектив попадают на экран (рис. 4.21).

 
Рис. 4.21 – Схема работы LCD-проектора

ТЕХНОЛОГИЯ   DLP

Белый свет лампы проходит через вращающееся колесо, сегменты которого окрашены в цвета RGB. После этого световой поток попадает на чип DMD, поверхность которого покрыта тысячами микрозеркал, каждое из которых создает отдельную точку исходного изображения (рис. 4.22). Зеркала способны изменять угол и отражают свет либо в объектив, либо в "ловушку". Благодаря высокой скорости работы и природе человеческого зрения, необходимые оттенки формируются в каждой точке, из которых и складывается изображение.
Благодаря тому, что в LCD технологии свет преодолевает значительную преграду на пути – ЖК-матрицу, а в DLP проходит лишь через цветовой фильтр, изображение DLP-проектора получается ярче и контрастнее. Однако благодаря особенностям технологии DLP, здесь иногда отсутствует плавность перехода между цветами, и при просмотре видео движущиеся объекты могут быть обрамлены "радугой", либо оставлять за собой цветной шлейф. Кроме того, в результате особенности технологии при продолжительном просмотре могут уставать глаза.
В свою очередь LCD-проекторы благодаря использованию матриц отличаются лучшей цветопередачей и плавными переходами между цветами, а при просмотре динамических сцен отсутствуют заметные артефакты.
Поэтому DLP-проекторы рекомендуется использовать для презентаций и демонстрации статических изображений, а LCD-проекторы, в свою очередь, для построения домашних кинотеатров с последующим просмотром видео.

 

Рис. 4.22 – Схема DLP-проектора
4.13  НАКОПИТЕЛИ
Устройства для долговременного хранения информации обозначаются, обычно, терминами: «накопитель» или «внешнее запоминающее устройство». В англоязычных источниках по отношению к накопителям  большого объема чаще всего используется термин «Maas Storage Device» (устройство массового хранения). Объемы информации, хранимые в таких накопителях, на 1..3 порядка превышают емкости оперативной памяти. Основное назначение накопителей – хранение информации после выключения питания компьютера.
Накопители конструктивно оформляются как:
•	внешние накопители (External Devices) – располагаются снаружи (вне системного блока компьютера), имеют собственный наружный корпус, источник питания с собственным кабелем и выключателем.
•	внутренние накопители (Internal Devices) – располагаются в монтажной стойке системного блока ПЭВМ; не имеют собственного корпуса, подключаются непосредственно к контроллеру накопителей и к источнику питания ПЭВМ.
В зависимости от способа записи на носитель, накопители делят на:
•	накопители на магнитной ленте – используют в качестве носителя информации магнитную ленту, которая перемещается относительно головки чтения/записи; запись на ленту является, как бы одномерной – запись на отрезок прямой. Накопители на ленте бывают двух видов:
•	на катушечной магнитной ленте;
•	на кассетах с магнитной лентой – стримеры (streamers); накопители на магнитных лентах предназначены, в основном, для долговременного хранения резервных копий (архивировании информации);
•	накопители на дисках – в качестве носителя информации используют диски (магнитные, оптические или магнитооптические) – являются двух приводными носителями, поскольку для их работы требуется:
•	постоянно приводить диск во вращение;
•	при операциях чтения/записи перемещать относительно носителя головки.
Таким образом, запись на диск является как бы двухмерной запи-сью (запись на плоскость в круговых координатах).
Накопители на дисках являются УСТРОЙСТВАМИ ПРОИЗВОЛЬ-НОГО ДОСТУПА – это означает, что пользователь может получить интересующие его данные без обязательного прочтения предыдущих фрагментов информации: накопитель устанавливает головку в нужное место и начинает чтение (или запись).
Формат записи на диск подразумевает расположение информации на концентрических дорожках (треках). Количество дорожек на диске определяется диаметром диска и плотностью расположения дорожек (шириной дорожек в микронах). Каждая дорожка  разбивается на несколько секторов.
4.13.1  ДИСКОВОДЫ  ГИБКИХ  ДИСКОВ
В зависимости от размеров дискет и конструктивных особенностей – дисководы гибких дисков (Floppy Disk Drives) разделяются на 8-ми, 5,25- и 3,5- дюймовые.
Гибкий диск, установленный в дисковод, приводится во вращение электродвигателем со скоростью 300 оборотов в минуту. Магнитная головка чтения/записи, расположенная на специальном кронштейне, может передвигаться по радиусу диска.
При обращении к диску накопитель вначале приводит его во вращение, затем устанавливает головку чтения/записи в ту область, где записана информация о файлах диска, считывает физические координаты местоположения требуемого файла и, переместив головку сразу в нужное место, считывает данные. Дисководы гибких дисков – двухсторонние, поэтому для каждой поверхности дискеты в нем имеется своя головка чтения/записи.
Накопители для 5,25- дюймовых дискет бывают следующих видов:
•	одинарной (обычной) плотности – позволяют хранить на одной дискете до 360 Кбайт информации;
•	двойной плотности – обладают информационной емкостью 720 Кбайт;
•	высокой плотности – обеспечивают запись до 1,2 Мбайт на дискету повышенного качества.
Все накопители имеют совместимость «сверху – вниз». Это означает, что на дисководе двойной плотности можно прочесть данные, которые были записаны головкой дисковода одинарной плотности. Правда, для этого требуется специальная программа (драйвер дисковода), управляющая перемещением головки по дорожкам и секторам диска.
Накопители для 3,5- дюймовых дискет бывают двух видов:
•	накопители двойной плотности – емкость 720 Кбайт;
•	накопители высокой плотности – обеспечивают хранение до 1,44 Мбайт (см. табл. 4.11).

Таблица 4.11 – Сравнительная характеристика дисководов

Параметр	5,25-дюймов, дисковод	3,5-дюймов, дисковод
	Одинарной плотности	Высокой плотности	Двойной плотности	Высокой плотности
Дорожек	40	80	80	80
Секторов на 1 дорожку	9	15	9	18
Сторон	2	2	2	2
Емкость, Кбайт	360	1200	720	1440
Ширина дорожки	0,33 мм	0,16 мм	0,115 мм	0,115 мм

Качество гибких дисков (дискет) определяется технологией изготовления магнитного покрытия. Их пригодность для использования в дисководе каждого типа определяется маркировкой:
•	DS/SD (2S/1D) – Double Sided / Single Density - двухсторонние / одинарной плотности;
•	DS/DD (2S/2D) – Double Sided / Double Density - двухсторонние / двойной плотности;
•	DS/HD (2S/HD) – Double Sided / Hidh Density - двухсторонние / высокой плотности
Перед первым использованием новая дискета должна быть размечена (форматирована), т.е. необходимо записать в определенных местах метки начала дорожек и метки начала секторов. Недостатком гибких дисков является значительная подверженность отрицательным факторам эксплуатации: температурным перепадам, механическим и электромагнитным воздействиям, загрязнению, потеря информации при осыпании магнитного слоя.

4.13.2  ДИСКОВОДЫ  ЖЕСТКИХ  МАГНИТНЫХ  ДИСКОВ
Большая информационная емкость запоминающих устройств реализована на дисководах с несменяемыми жесткими магнитными дисками типа «Винчестер» Жесткий диск представляет собой не один, а несколько металлических или стеклянных дисков, закрепленных на одной оси вращения и помещенных в металлический корпус. Поверхности дисков с двух сторон покрыты магниточувствительным слоем, причем каждая поверхность имеет свою головку чтения/записи, закрепленную на общем приводе.
Жесткие диски вращаются с гораздо большей скоростью (чем гибкие) – 3 600..10 000 об/мин и более. Зазор между головкой и поверхностью диска меньше, а скорость перемещения головок выше, что позволяет хранить информацию на жестком диске в более плотном формате, тем самым многократно увеличивая ее объем (от десятков Мбайт до сотен Гбайт). Скорость перемещения головок также намного выше, что сокращает время доступа к блокам информации на диске. Поскольку все головки движутся одновременно, их положение по отношению к общему центру вращения называют «цилиндром».
Достоинствами жесткого диска являются:
•	большая информационная емкость;
•	малое время доступа для получения информации.
К недостаткам жестких дисков следует отнести:
•	несменяемость – замена жесткого диска требует разборки системного блока и не может выполняться так же просто, как и гибкого;
•	высокая чувствительность к механическим воздействиям (вибрациям и толчкам), так как это может привести к повреждению магниточувствительного слоя головками.

4.13.3  НАКОПИТЕЛИ  БЕРНУЛЛИ
Накопители по технологии Бернулли (Bernoulli), названные по имени фирмы-производителя – Zip Iomega – базируются на эффекте Бернулли. Его суть в том, что участки вращающегося гибкого диска из-за разности давления приподнимаются, приближаясь к магнитной головке, а когда диск перестает вращаться, зазор опять увеличивается. Именно естественное регулирование зазора и дает этой технологии ряд преимуществ перед другими.
Информационная емкость сменной Zip дискеты размером 3,25 дюйма достигает 100 Мбайт, средняя скорость обмена – 330 Кбайт в сек.
Накопители Zip поставляются как с интерфейсом SCSI-2, так и с возможностью подключения к параллельному порту, причем оба варианта могут быть во внешнем исполнении (с собственным источником питания) или внутреннем.

4.13.4  НАКОПИТЕЛИ  СО  СМЕННЫМИ  ЖЕСТКИМИ  ДИСКАМИ
Накопители со сменными жесткими дисками (Removable Hard Disk Drives) на основе винчестерской технологии – по внешнему виду напоминают дисковод гибких дисков, только щель для установки картриджа (cartridge) с жестким диском – значительно шире.
По сравнению с традиционными несменяемыми жесткими дисками – картридж является значительным шагом вперед. Сменяемость носителей обеспечивает практически неограниченную емкость устройства.
Поскольку в этих устройствах используется та же технология, что и в жестких винчестерских дисках, они столь же критичны к условиям работы. Например, попадание пылинки на считывающую головку может привести к разрушению как диска, так и головки. Однако многие проблемы решены за счет обеспечения герметичности картриджа.
Емкость картриджей с одним диском – Nomai MCD (Multimedia Cartridge Drive) может составлять до 540 Мбайт, а картридж с двумя пластинами – Iomega Jaz – имеет информационную емкость до 1 Гбайт.

4.13.5  СТИРАЕМЫЕ  МАГНИТООПТИЧЕСКИЕ  ДИСКИ
Магнитный носитель в магнитооптических дисках (МОД) по сравнению с обычными магнитными имеет некоторые особые свойства: он обладает низкой способностью перемагничиваться при комнатной температуре.
При записи лазерный луч фокусируется на небольшом участке рабочего магнитного слоя и разогревает его до температуры примерно 150 градусов Цельсия, а магнитное поле записывающей головки изменяет намагниченность битовых полей.
Процесс записи является двухпроходным – во время первого прохода накопитель стирает информацию с того участка, на который во втором проходе будет произведена запись (современные магнитооптические накопители позволяют производить новую запись и стирание предыдущей за один проход).
При считывании данных фотодетектор воспринимает изменение плоскости поляризации светового луча, отраженного намагниченным слоем (эффект Керра). В зависимости от направления намагниченности плоскость поляризации поворачивается по часовой стрелке или наоборот. Это позволяет легко разделить двоичные данные. Чтение производится маломощным лазером без разогрева магнитного слоя.
Недостатком МОД является длительное время записи и поиска, потому что головка записи/чтения имеет большую массу, чем в накопителях с жесткими дисками.
Магнитооптический диск (МОД) представляет собой матрицу из алюминиевого сплава, покрытую специальным слоем и заключенную в пластиковый корпус. В отличие от обычных магнитных носителей, МОД менее подвержены отрицательным факторам: температурным  перепадам, ударным и электромагнитным воздействиям, загрязнению. Средний период эксплуатации МОД – не менее 30 лет.
Известны накопители на МОД с объемом памяти: 230 Мбайт, 640 Мбайт – для 3,5 дюймовых дискет и 2,6 Гбайт, 4,6 Гбайт – для 5,25 дюймовых носителей.

4.13.6  НАКОПИТЕЛИ  НА КОМПАКТ-ДИСКАХ
Эти накопители используют компакт-диски (CD) диаметром 4,72 дюйма (120 мм), которые стали широко известны благодаря их наступлению на рынок бытовой грамзаписи. Информация на CD-ROM (Compact Disk, Read Only Memory – компакт диск, память только для чтения) наносится механическим выдавливанием выемок на алюминиевом светоотражающем диске, т.е. обычной штамповкой. Для защиты поверхности от механического воздействия – алюминиевый диск покрывается прозрачным слоем.
Считывание осуществляется лучом маломощного лазера.
Скорость считывания обычно в несколько раз больше, чем скорость считывания в лазерных дисках грамзаписи – 150 Кбайт в сек. Поэтому обозначение скорости дисковода CD-ROM указывает: во сколько раз быстрее читается оптический диск с компьютерной информацией, чем аналогичный диск грамзаписи.
Объем памяти у одностороннего CD-ROM достигает 650..750 Мбайт.
Преимущества CD-ROM – дешевый процесс тиражирования методом штамповки, и высокая устойчивость к неблагоприятным факторам: перепады температур, электромагнитные воздействия, механическая прочность и др.
В настоящее время существуют компакт-диски с возможностью однократной записи – CD-R (Compact Disk Recordable) или CD-WORM (Compact Disk, Write Once, Read Many – писать единожды, читать многократно). Запись осуществляется не на заводе методом штамповки, а сам пользователь специальным лазером обесцвечивает пятна в слое из органического материала, нанесенного на поверхность алюминиевого диска под защитным покрытием.
Чередование темных и светлых пятен формирует информационное наполнение диска. Обесцвеченные «выемки» не отражают свет, на чем основана процедура считывания. Обесцвечивание, которое реализуется путем выжигания рабочего слоя, – процесс необратимый и может проводиться только один раз.
Стоит отметить, что диски CD-R более подвержены разного рода внешним воздействиям, чем стандартные CD-ROM, – это обусловлено технологией их создания.
Многократно перезаписываемые диски CD-RW имеют специальное покрытие отражающего слоя, которое под действием высокой температуры переходит из кристаллического состояния в аморфное, т.е. плохо отражает свет (рассеивает его в разные стороны). А не нагретые участки поверхности находятся в кристаллическом состоянии и хорошо отражают свет. Таким образом записываются на диск бинарная информация. Имеется возможность переводить всю поверхность органического покрытия в кристаллическое состояние, т.е. стирать ранее записанную информацию и после этого производить повторную запись новой информации.

4.13.7  НАКОПИТЕЛИ   D V D
Digital Versatile Disc (цифровой универсальный многофункциональный диск) – это оптические носители информации, имеющие размеры такие же, как и CD, но обладающие информационной емкостью от 4,7 Гбайт до 17 Гбайт. Благодаря большой емкости DVD-ROM и большой скорости считывания (не менее 9-ти кратной скорости CD-ROM) – отпадает необходимость в смене дисков при многочасовой работе.
На разработку стандарта DVD оказали влияние не только компьютерная индустрия, но и крупнейшие киностудии, которые заинтересованы в замене дисками DVD с защитой от копирования видеокассет VHS. Производство таких дисков обходится значительно  дешевле (около 80 центов – вместо $2,20 для видеокассет), они обеспечивают видео высокого качества, меньше по размеру, не требуют обратной перемотки, лучше противостоят отрицательным внешним воздействиям, на них можно размещать звуковое сопровождение на 8-ми языках и 32-х разных субтитров.
Для достижения высокой плотности записи в дисках DVD используются 4 метода. Первые два основываются на более совершенной технике производства дисков и применении лазеров с меньшей длиной волны. CD и DVD хранят данные в форме микроскопических углублений, обозначающих двоичные нули, и ровной зеркальной отражающей поверхности для двоичных единиц.
В CD-ROM минимальная длина углублений составляет 0,834 мкм, а в DVD – 0,4 мкм. Это позволяет при производстве дисков размещать выемки более компактно. Кроме того, содержащая данные спиральная дорожка в дисках DVD имеет шаг 0,74 мкм (в CD-ROM – 1,6 мкм). Для считывания информации с DVD используется красный лазер с длиной волны 635..650 нм, дисководы CD-ROM оснащены инфракрасным лазером с длиной волны 780 нм. При этом увеличение емкости дисков может достигать почти в 7 раз – от 682 Мбайта в CD-ROM до 4,7 Гбайта в DVD.
Еще большее увеличение емкости достигается использованием для записи информации двух слоев. Традиционно все CD-ROM состоят из одного слоя отражающего материала (обычно это алюминий), на который нанесена содержащая углубления углеродистая пленка (polycarbonate substrate). Луч лазера отражается от этого слоя и попадает на фотодетектор. В двухслойных дисках DVD поверх отражающего слоя нанесен полупрозрачный слой со своими информационными выемками на поверхности. Поверх этого слоя имеется обычный защитный прозрачный слой. Разные лазеры обеспечивают фокусировку луча на поверхности своего слоя и счи-тывание информации с каждого из этих слоев.
Такой подход позволяет увеличить емкость диска почти в два раза: отражающий слой обеспечивает 4,7 Гбайт, а полупрозрачный – еще 3,8 Гбайт (емкость меньше из-за более низкой отражающей способности этого слоя).
Емкость диска можно еще увеличить вдвое, если хранить информацию с двух сторон диска. Имеется также двухсторонний стандарт DVD с однослойными поверхностями. Информационная емкость при этом равна 9,4 Гбайт. Возможна ситуация, когда одна сторона содержит один, а другая – два отражающих слоя. Таким образом, емкость двухсторонних DVD может достигать от 9,4 до 17 Гбайт.
Следует отметить, что двухсторонние диски DVD более чувствительны к повреждениям поверхности, поскольку в них как углеродистая пленка, так и отражающие слои тоньше.
Кроме дисков диаметром 120 мм, стандартом DVD также предусмотрена перспектива изготовления дисков диаметром 80 мм. Несмотря на то, что их емкость почти на 70 % меньше, они могут найти широкое применение в мобильных системах.
Кроме рассмотренных физических форматов DVD, т.е. физических методах хранения данных на диске, все диски должны соответствовать единому логическому стандарту, определяющему структуру файлов на диске. Все диски DVD будут соответствовать стандарту Universal Disk Format (UDF), являющемуся частью определяющего методы обмена данными стандарта ISO-13346.

4.13.8  СТАНДАРТЫ  ЗАПИСИ  DVD
На сегодняшний день существует 9 стандартов для записи DVD. Причем эти стандарты несовместимы между собой, да и с бытовыми DVD-плеерами тоже.

Формат DVD–RAM – весьма специфичный, мало распространен и не совместимый ни с бытовыми, ни с компьютерными DVD-плеерами.

DVD–R
Существует две версии этого формата – DVD–R Authoring (DVD–R(A) – профессиональная версия) и DVD–R General (DVD–R(G) – бытовая версия). Эти версии несовместимы на физическом уровне из-за разных длин волн лазеров.
Приводы стандарта DVD–R(G) физически не могут побайтно скопировать диск, защищенный CSS. Т.е. копируется только контент, без ключа, а следовательно, дубликат оригинала при воспроизведении не может быть расшифрован.
В настоящий момент все пишущие DVD-приводы, доступные на потребительском рынке, поддерживают только формат DVD–R(G). 

DVD–RW
В качестве активного слоя применяется материал с изменяемым фазовым состоянием (как в CD–RW).
Имеется три версии этого формата. В версии DVD–RW 1.0 зона Lead-In на носителе физически «пропечатывается» изготовителем. Это делается для невозможности копирования на такую заготовку дисков, защищенных CSS.
В версии DVD–RW 1.1 зона Lead-In уже не «выбивается» на диске в процессе его производства, а записывается (pre–record) после изготовления.
В версии DVD–RW 1.1В каждый диск имеет уникальный ID-код, записанный в BCA (Burst Cutting Area – служебная область заготовки, в которую при изготовлении заносится уникальный для каждого диска штрих-код). Механизм CPRM (Content Protection for Recordable Media) предусматривает наличие на каждой заготовке уникального 64-х битового ID-кода в области BCA, позволяющего однозначно идентифицировать носитель. Когда на диск записываются данные, подлежащие защите, они могут быть зашифрованы с помощью 52-х битового ключа, зависящего от ID-кода  носителя. Если этот диск будет скопирован, ID-код носителя в BCA будет другой, что сделает невозможным генерацию ключа для расшифровки и приведет к неработоспособности копии.

DVD+RW
В качестве активного слоя также используется материал с «изменяемой фазой». Но в отличие от DVD–RW этот стандарт имеет ряд существенных преимуществ:
1.	Lossless linking – механизм точного связывания различных участков записи на диске. Это позволяет обеспечить как повышенную совместимость с бытовой DVD-техникой, так и посекторное редактирование записанного диска – произвольные участки на носителе могут быть изменены без перезаписи всей заготовки.
2.	Поддержка формата DVD+VR. В отличие от формата VR, реализованного в приводах стандарта DVD–RW, эта технология позволяет создавать видеодиски, полностью совместимые с существующими плеерами.
3.	Технология адресации секторов во время записи. В процессе создания диска DVD+RW-привод может определить адрес сектора, записываемого в данный момент. Это позволяет в случае сбоя продолжить запись с прерванного участка.
4.	Поддержка технологии фонового форматирования чистой заготовки и поддержка формата Mount Rainier.
5.	Обеспечение записи дисков в двух режимах – CLV (с постоянной линейной скоростью) и CAV (с постоянной угловой скоростью).

DVD+R
Подмножество вышеописанного формата для носителей с однократной записью

4.13.9    BLU-RAY    и     HD DVD
Причиной постепенного ухода от DVD была совсем не IT-индустрия, а рынок бытовой электроники и производители видеоконтента. С появлением нового формата – HDV (цифрового видео высокого разрешения) – стало очевидно, что DVD-Video практически исчерпал себя. Для хранения HDV требовались объемы дискового про-странства на порядок большие, чем мог предложить DVD. И даже выпуск двухслойных DVD-носителей уже не мог спасти ситуацию.
Еще одной причиной, побудившей начать разработку нового стандарта оптических дисков, стала слабая система кодирования, применявшаяся в DVD для защиты цифрового контента от копирования. Как известно, алгоритм CSS (Content Scrambling System), использовавшийся для шифрования DVD-Video, был достаточно быстро взломан, что породило новую волну пиратства.
Как и в случае с переходом от CD к DVD, разработчики разделились на два противоборствующих лагеря. Одни из них, во главе с Sony и Philips, предложили формат, который в итоге трансформировался в то, что мы сейчас видим под названием Blu-ray (BD). Другие же, под предводительством компании Toshiba, отстаивали свой стандарт, впоследствии названный HD DVD.
Увеличение емкости оптических дисков достигается повышением плотности записи при сохранении геометрических размеров самого диска. В случае с BD и HD DVD ситуация аналогичная – по сравнению с DVD и в том и в другом стандарте была увеличена продольная плотность записи – количество дорожек на единицу площади поверхности носителя. В терминологии, применяемой для жестких дисков, данный параметр именуется TPI – число треков на дюйм. Реализовано это с помощью использования синего лазера с меньшей длиной волны – 405 нм вместо красного лазера (650 нм), применявшегося в DVD. Отметим, что именно такой подход использовался и при переходе от CD к DVD.

BLU-RAY
Данный стандарт был анонсирован еще в 2002 г. компаниями Sony и Philips. По сути, этот формат разрабатывался практически с нуля. Его создатели не стремились сохранить максимальную преемственность с DVD, что в итоге позволило не только повысить емкость по сравнению с HD DVD, но и достичь большей масштабируемости в будущем.
Основные особенности Blu-ray:
•	для работы используется синий лазер с длиной волны 405 нм; 
•	регистрирующий слой переместился гораздо ближе к рабочей поверхности диска: для BR-HOсителей этот зазор составляет 0,1 мм, тогда как у HD DVD – 0,6 мм, как и у обычного DVD;
•	в BR-приводах применяется линза с увеличенной числовой аперту-рой, что вместе с приближением регистрирующего слоя, обеспечившим расширение угла обзора OPU накопителя, существенно повысило стабильность считывания данных с носителя, позволив повысить плотность размещения дорожек при сохранении соотношения сигнал/шум. 
•	расстояние между треками для BD составляет 0,32 мкм, тогда как у HD DVD оно равняется 0,4 мкм.

Увеличение числовой апертуры привело к необходимости переработки механической части накопителя и, как следствие, его удорожанию. Но в то же время снизило требования к качеству самих заготовок, существенно повысив процент выхода годных дисков, что впоследствии приведет к удешевлению BR-HOсителей.
Однако приближение регистрирующего слоя к рабочей поверхности диска имеет и отрицательные стороны, увеличивая риск повреждения данных при механических воздействиях. Производители встали перед необходимостью использовать специальные защитные покрытия, повышающие устойчивость BR-дисков к царапинам и загрязнению. Так, механическая прочность рабочей поверхности BD в 100 раз больше, чем DVD.
И наконец, третьим следствием уменьшения защитного слоя стало увеличение масштабируемости BR-заготовок. Так, разработчики планируют в скором времени поднять число регистрирующих слоев до 8, тем самым нарастив общую емкость до 200 GB.

Таблица 4.12 – Сравнительные характеристики оптических 
носителей разных форматов
Характеристики	HD DVD	BD	DVD	CD
Емкость	15GB	25GB	4,7GB	0,7GB
Длина волны лазера, нм	405
(голубой)	405
(голубой)	650
(красный)	780 (инфра-красный)
Численная апертура линзы	0,65	0,85	0,6	0,5
Размер пятна лазера, нм 	550	580	1320	2110
Расстояние между треками, нм	400	320	740	1600
Минимальная длина пита, нм	204	149	400	800
Плотность записи, Gb/кв.дюйм	8,8	14,7	2,77	0,41
Алгоритмы защиты от копирования
	AACS	AACS,
BD Plus,
ROM Mark	CSS, CPPM, CPRM, VCPS	–

Также был существенно переработан и механизм защиты контента от копирования. Теперь в Blu-ray реализована поддержка AACS (Advanced Access Content System), использующая 128-битовый ключ, меняющийся через каждые 6 Kb записанных на диск данных. Кроме того, AACS включает в себя механизм ММС (Mandatory Managed Copy), позволяющий создать копию лицензионного диска для воспроизведения его с HDD домашнего медиацентра или на портативном плеере, но предотвращающий ее распространение. 
Рис. 4.23 – Размер пятна лазера для разных типов дисков

Рис. 4.24 – Сравнение различных однослойных оптических дисков

Для дополнительной защиты служит функция ROM-Mark, с помощью которой каждому BR-диску присваивается свой уникальный идентификатор, что препятствует созданию его нелегальных копий, так как делается это на этапе изготовления и только на сертифицированном оборудовании.
В случае маловероятного, но все же взлома алгоритма шифрования в дело вступает функция BD Plus, динамически меняющая ключи шифрования, что делает невозможным создание программ, подобных DeCSS, с помощью которых, однажды раскрыв алгоритм шифрования информации, можно наладить массовое производство пиратских копий всего контента, выпущенного на данном типе но-сителей.

HD DVD

Этот стандарт, являющийся совместной разработкой компаний NEC и Toshiba, изначально разрабатывался с учетом максимальной преемственности с DVD. Структуры данных, алгоритмы коррекции ошибок, схема модуляции – все это перешло по наследству к новому формату от DVD. Даже глубина залегания активного слоя в НD DVD осталась неизменной. Да и числовая апертура линзы, используемой в OPU соответствующих приводов, хоть и увеличилась по сравнению с DVD-накопителями, но, тем не менее, меньше, чем у Blu-ray-устройств. Все это ограничило максимальную емкость HD DVD-носителей 15 GB на один слой.
Но, с другой стороны, такая преемственность позволила разработчикам быстрее освоить новый формат, к тому же затраты на производство приводов оказались несколько ниже, чем продуктов Blu-ray, что в итоге отразилось и на их рыночной стоимости.
Разумеется, алгоритм шифрования в HD DVD был переработан, и теперь за защиту контента, как и вслучае с Blu-ray, отвечает AACS, правда, без дополнительных возможностей.


4.13.10  КОНТРОЛЛЕРЫ  ДИСКОВОДОВ

КОНТРОЛЛЕРЫ   FDD
На современных материнских платах контроллер FDD интегрирован в южный мост Chipset, и на материнской плате имеется специальный разъем для подключения 34-х жильного кабеля. 
В этом кабеле между разъемами для подключения к дисководам перекручены 6 жил для присвоения разных имен приводам FDD (А – дальний разъем, после перекрутки, В – ближний разъем). По этим жилам передаются сигналы выбора накопителя и включения двигателя.
Помимо подключения одного или двух дисководов в определенной последовательности нужно сообщить системе тип каждого FDD и его объем.

КОНТРОЛЛЕРЫ  ВИНЧЕСТЕРОВ
РЕЖИМЫ  ПЕРЕДАЧИ  ДАННЫХ
Для передачи данных между винчестером и памятью РС используются два основных режима:
	Режим программного ввода/вывода (Programmed Input/Output, PIO);
	Режим прямого доступа к памяти (Direct Memory Access, DMA).

РЕЖИМ   PIO

В режиме PIO каждый байт информации с жесткого диска сначала считывается центральным процессором и только потом записывается в оперативную память (ОЗУ). Это замедляет скорость считывания и не позволяет процессору проводить в это время другие расчеты.
Этот режим используется в однозадачных операционных системах, когда процессор компьютера производит обращение к диску, а затем обрабатывает новые данные.

РЕЖИМ   DMA

В многозадачных операционных системах целесообразно использовать режим прямого доступа к памяти (DMA). Ввод/вывод данных в этом режиме осуществляется в оперативную память РС, минуя CPU. Этот процесс происходит под управлением специального ЕIDE-контроллера в паузах между обращениями CPU к оперативной памяти. 
В этом случае процессор программирует контроллер ЕIDE, указывая откуда он должен взять данные и в какую область памяти их поместить. После получения этих указаний контроллер захватывает управление шиной PCI и выполняет операции без участия CPU.
Максимальная скорость передачи данных в стандарте Ultra DMA/33 достигает 33 МБ/с. Современные Chipset поддерживают режимы: Ultra DMA/66   и   Ultra DMA/100.

ATA  и  SATA

Первые стандарты для винчестеров IDE были разработаны компаниями Western Digital и Compaq Computer в 1986 г. Тогда для подключения использовался 40-проводной кабель и имелась возможность одновременного обслуживания двух устройств. Первые IDE-накопители управлялись центральным процессором, отвлекая значительные вычислительные ресурсы, и обладали множеством других недостатков, главный из которых - слишком малая емкость. Несмотря на это, IDE стал очень популярным стандартом и был зарегистрирован Национальным институтом стандартизации США (ANSI), получив название АТА (а также ATAPI). Первая версия интерфейса, АТА-1, обладала следующими возможностями:
•	РIO mode 0, 1 и 2 (до 8,3 MBps) (программируемый ввод/вывод);
•	Singleword DMA mode 0, 1 и 2(до 8,3 MBps) (одиночная передача в режиме прямого доступа кпамяти);
•	Multiword DMA mode 0 (до 4,2 MBps) (групповая передача в режиме прямого доступа к памяти).
Единственным различием между IDE и АТА является то, что IDE определяет спецификацию на электронику винчестеров, а АТА – на интерфейсное соединение между HDD и ПК; тем не менее, данные термины используются как слова-синонимы.
Вскоре после появления IDE вышла усовершенствованная версия – Enhanced IDE (EIDE), которая была разработана той же компанией Western Digital. Соответствующий стандарт от ANSI назывался АТА-2. Он позволял превысить традиционный предел емкости жесткого диска в 528 MB. При включенном режиме LBA в BIOS он мог поддерживать HDD объемом до 8,4 GB. 
EIDE также допускал обслуживание до четырех винчестеров при использовании двух кабелей. Кроме того, появились следующие новые режимы: РIO mode 3 и 4 (до 16,6 MBps), Multiword DMA mode 1 и 2 (до 16,6 MBps), а также Block Transfer для повышения производительности (данный режим делает возможной передачу нескольких команд чтения/записи за одно прерывание).
Чтобы получить конкурентное преимущество, компания Quantum совместно с Intel разработала новую версию интерфейса для настольных жестких дисков – спецификацию Ultra ATA, также известную под названиями Ultra ATA/33, Ultra DMA33, ATA/ATAPI-4, Ultra DMA 2. Благодаря использованию обоих фронтов передаваемого сигнала эффективная рабочая частота возросла в два раза, соответственно и скорость передачи данных по интерфейсу увеличилась с 16,6 до 33,3 MBps. 
Кроме того, для повышения надежности в Ultra АТА был введен циклический контрольный код (CRC). Этот стандарт определял следующие режимы: Ultra DMA Mode 0,1 и 2 (скорости 16,6; 25,0 и 33,3 MBps). Параллельно разрабатывался стандарт РIO Mode 5, но он обеспечивал скорость передачи всего 22,2 MBps и не имел режима прямого доступа к памяти, а потому так и не был реализован.
Увеличение пропускной способности оказалось очень кстати ввиду возрастания скорости чтения с пластин. Уже в 1998 г. была разработана следующая версия – Ultra ATA/66 (ATA/ATAPI-5). Стандарт предусматривал очередное увеличение скорости (до 66,6 MBps), а также смену кабеля с 40- на 80-жильный, в котором 40 дополнительных проводников заземлены для снижения высокочастотных помех и повышения надежности канала передачи данных. Также были добавлены новые режимы: Ultra DMA Mode 3 и 4 (скорости 44,4 и 66,6 MBps). Тем не менее, стандарт оказался полностью обратносовместимым, т. е. к материнским платам с контроллером Ultra АТА/66 можно было подключить диск хоть АТА-1, и наоборот, диск стандарта Ultra АТА/66 работал на плате с АТА-1.
На рынке Ultra АТА/66 появился в 1999 г., однако скорость жестких дисков продолжала расти такими темпами, что спустя всего год потребовалась очередная версия АТА. В результате летом 2000 г. появился стандарт Ultra ATA/100 (ATA/ATAPI-6). Используя преимущества нового кабеля и разъема, пропускную способность повысили до 100 MBps посредством сокращения длительности такта передачи сигнала. 
Впоследствии в стандарт ATA/ATAPI-6 был включен еще и режим Ultra АТА/133, разработанный фирмой Maxtor в 2001 г. Данный режим не приобрел популярности среди производителей жестких дисков, несмотря на поддержку его разработчиками чипсетов для материнских плат. Причина этого достаточно проста: остальные компании уже ориентировались на другой стандарт – Serial ATA, поскольку недостатки обычного АТА (параллельного АТА) проявились еще при разработке Ultra ATA/100. Дальнейшее наращивание пропускной способности ограничивалось физически многожильным IDE-кабелем.
Вернемся теперь к Serial ATA. На прошедшем весной 2000 г. Intel Developer Forum (IDF) корпорация Intel и другие производители ПК и дисков (IBM, Dell, Seagate, Quantum, Maxtor, APT Technologies и пр.) образовали группу по выработке спецификации и продвижению на рынок нового интерфейса — Serial ATA. Официально он был представлен широкой общественности в сентябре 2001 г., когда на IDF компании Seagate (при деятельном участии Intel и APT Technologies) были впервые продемонстрированы винчестеры, совместимые с Serial ATA Revision 1.0. 
Активный переход на новый последовательный интерфейс SATA планировался в 2002 г., однако этого не произошло. Основной проблемой стало отсутствие для конечного пользователя видимых преимуществ от данного стандарта – материнские платы с контроллерами SATA стоили значительно дороже, и их было сложно найти. То же касалось и жестких дисков, поскольку производители (за исключением Seagate и, в одном случае, WD) не стали специально разрабатывать винчестеры под новый стандарт, а просто установили на старые Parallel АТА-диски мост PATA-to-SATA. По той же причине не возрастала и скорость при переходе от РАТА к SATA (справедливости ради заметим, что и Seagate Barracuda 7200.7, несмотря на родной интерфейс, не получила прибавки в скорости). Переплачивать только за более тонкие кабели решились немногие, да и существовала проблема с переходниками питания для SATA – их было очень сложно достать. Из-за этого часть компаний оснастили свои HDD двумя разъемам питания – обычным и SATA. Возросшая до 150 MBps пропускная способность интерфейса также оказалась невостребованной. Переломным стал 2003 г. – именно тогда производители чипсетов для материнских плат представили продукты с интегрированной поддержкой SATA, что позволило начать продвижение стандарта в массы.
Работа над SATA продолжалась, к стандарту 1.0 начали выпускаться дополнения, и в 2004-м на их основе появилась вторая версия SATA.
Посмотрим, что же в ней было нового.
Во-первых, увеличилась пропускная способность (со 150 до 300 MBps). Учитывая, что скорость чтения с одиночного диска на данный момент приближается к 70 MBps, пропускной способности первой версии стандарта скорее всего с головой хватит на ближайшие несколько лет. С другой стороны – запас карман не тянет, да и лучше такая ситуация, чем то, что творилось несколькими годами ранее со стандартами АТАЗЗ/66/100/133.
Во-вторых, поддержка Native Command Queuing (NCQ), или технологии маршрутизации команд, стала фактически неотъемлемой частью стандарта SATA II, до этого же NCQ являлась необязательным дополнением SATA 1.0. NCQ позволяет переупорядочивать до 32 команд чтения/записи жесткого диска с целью достижения оптимальной производительности и снижения износа его механизмов. 
Для использования данной технологии необходимы три условия: контроллер SATA II или SATA 1.0 с поддержкой NCQ (на плате или отдельный), драйверы для операционной системы с поддержкой команд NCQ и жесткий диск с NCQ. С первым и вторым на данный момент проблем нет – контроллеры SATA II имеются на всех материнских платах с чипсетами i915/925 и выше а также nForce4, соответствующие драйверы для них уже есть.
Однако в связи с тем, что часть работы с NCQ выполняет драйвер, при включении данной технологии может наблюдаться некоторое повышение загрузки процессора. Производители жестких дисков заняли разные позиции: Maxtor и Seagate представили свои винчестеры с поддержкой NCQ еще в 2005 году, Samsung и Hitachi сделали это сравнительно недавно, a WD поступила достаточно странно – ее новые диски серии JS, несмотря на логотип SATA II, несовместимы с NCQ! Это пока единственный случай отклонения от стандарта, но перед покупкой стоит внимательно изучить спецификации на товар.
И, в-третьих, добавлена функция горячего подключения, ранее являвшаяся опциональной. После установки соответствующих драйверов жесткий диск стандарта SATA II в системе определяется как съемное устройство и может быть в любой момент безопасно отключен. Что еще более удобно – в комплекте с некоторыми материнскими платами поставляется специальная планка на заднюю стенку с двумя SATA-разъемами и разъемом питания, благодаря чему можно подключить SATA II винчестер, не вскрывая системный блок и не используя дополнительные приспособления вроде USB- или FireWire-карманов.
В целом, вторая версия SATA является скорее стандартизацией тех возможностей SATA, которые ранее были отданы на откуп производителям жестких дисков/контроллеров, а не чем-то радикально новым. Тем не менее, на данный момент уже имеет смысл обращать внимание на тип и версию интерфейса винчестера, а при покупке отдавать предпочтение более новой версии, не забывая, конечно, и о цене.

NCQ

Несмотря на значительный рост производительности жестких дисков, они по-прежнему остаются самым медленным компонентом в системе, ответственным за задержки в выполнении программ. Экстенсивный путь развития HDD, предполагающий увеличение плотности записи данных и повышение частоты вращения шпинделя, ведет к значительному удорожанию продукции или же не дает ожидаемого прироста быстродействия. Поэтому разработчикам приходится изыскивать новые пути решения проблемы, одним из которых является внедрение технологии СОРТИРОВКИ ОЧЕРЕДИ КОМАНД – Native Command Queuing (NCQ), в последнее время ставшей довольно популярной.
При обращении к жесткому диску значительная часть времени уходит на поиск необходимых дорожки и сектора для считывания/записи данных. С помощью технологии NCQ очередь поступивших запросов динамически перестраивается в буфере контроллера таким образом, чтобы позиционирование головок осуществлялось максимально быстро. Эта функция приобретает наибольшее значение, когда речь идет о многозадачной среде, в которой несколько приложений независимо обращаются к участкам жесткого диска (процесс не приостанавливается до окончания текущей операции ввода/вывода), физически расположенных довольно далеко друг от друга. Упорядочивание запросов позволяет уменьшить количество перемещений головок для считывания/записи запрашиваемой информации, тем самым сокращая суммарное время выполнения этой операции.
В упрощенном варианте алгоритм NCQ можно представить как схему работы лифта, где так называемая транспортная задача решается не в порядке поступления запросов от пассажиров, а по ходу спуска/подъема кабины. К тому же очередь динамически перестраивается в зависимости от требований входящих людей.
На рис. 4.25 иллюстрируется работа винчестера с технологией NCQ и без нее. Здесь жесткому диску нужно получить данные, находящиеся в секторах 1, 2, 3 и 4. Использование NCQ способствует существенному упрощению траектории движения головки и уменьшению количества оборотов шпинделя, необходимых для завершения всей операции, по сравнению с последовательным выполнением этой же команды. Применение данной технологии позволяет также несколько снизить механическую нагрузку на блок головок чтения/записи, тем самым теоретически уменьшая его износ и увеличивая срок службы.
Ситуация существенно улучшилась после создания интерфейса Se-rial ATA (SATA). Внедрение NCQ не потребовало значительного изменения базового протокола SATA, к тому же появилась возможность идентификации поддержки устройством очереди команд (для SATA она составляет 32 запроса). Это позволило контроллеру без каких-либо проблем одновременно взаимодействовать с дисками, имеющими NCQ и нет.

 

Рис. 4.25 – Иллюстрация технологии NCQ

Технология NCQ была объявлена дополнительной функцией в SATA-1.0а, а в SATA-II предполагалась как обязательная составляющая. Однако, к сожалению, в новой спецификации она осталась в качестве рекомендуемого пункта. Для ее работы необходимо выполнение следующих условий: поддержка NCQ жестким диском и контроллером SATA (интегрированным или внешним), а также наличие драйвера для ОС.
Если с программной частью у пользователей, имеющих доступ в Интернет, проблем обычно не возникает, то с аппаратными возможностями все не так просто. Поддержкой NCQ обладают контроллеры, интегрированные в южные мосты чипсетов Intel 9xx (ICH6R/M и ICH7R/M). В то же время, согласно информации с сайта компании Intel, базовые версии ICH6 и ICH7 и более ранние не имеют этой функции. Также обеспечивается работа данной технологии в серии чипсетов NVIDIA nForce4, a платы с наборами логики от VIA получают поддержку NCQ в случае применения южного моста VT8251. SIS включила NCQ в свой южный мост SIS966, а чипсеты с «югами» от ULi обзаведутся NCQ после установки М1575. Потому, если вы хотите иметь в своей системе технологию сортировки команд, при покупке новой материнской платы следует учитывать и этот момент. В случае использования внешних контроллеров SATA нужно внимательно изучить спецификацию.
Для включения NCQ в BIOS платы необходимо выставить режим контроллера AHCI (Advanced Host Controller Interface) и во время инсталляции операционной системы установить (по нажатии F6) соответствующие драйверы (в нашем случае это Intel Matrix Storage Manager 5.5.0.1035), предварительно записав их на дискету.
Результаты тестов показали, что при повседневной работе сортировка очереди запросов не дает никакого преимущества. Более того, в ряде случаев производительность жесткого диска может даже незначительно снижаться. Линейные операции копирования не требуют сортировки, в то время как NCQ работает независимо от этого, затрудняя функционирование контроллера. Практическая ценность технологии сортировки команд, вероятно, возрастет с повсеместным внедрением двухъядерных процессоров. Применение таких CPU зачастую несколько меняет модель использования компьютера, позволяя владельцу ПК безбоязненно работать одновременно с несколькими ресурсоемкими приложениями. При этом в подавляющем большинстве случаев в подобных системах по-прежнему будет один жесткий диск, что даст возможность технологии NCQ в условиях повышенной нагрузки на HDD в полной мере реализовать свое предназначение.

SCSI-КОНТРОЛЛЕР
Интерфейс SCSI (Small Computer System Interface) обеспечивает скорость передачи данных до 80 МБ/с и предусматривает подключение к одному адаптеру до 8-ми устройств, в том числе винчестеров, приводов CD-ROM, сканеров и др. Однако его реализация значительно дороже, требует дополнительного контроллера и сами устройства со SCSI-интерфейсом дороже, чем с интерфейсом EIDE.
В настоящее время известно несколько стандартов интерфейса SCSI. Первый стандарт SCSI появился в 1986 г., стандарт SCSI-II был опубликован в 1994 г. и в 1999 г. принят стандарт SCSI-III.
Для подключения к шине SCSI используются специальные кабели. Стандартный 50-ти жильный 8-ми разрядный кабель называют кабелем типа А. В стандарте SCSI-II предусмотрен специальный 68-ми жильный кабель типа В, предназначенный для использования совместно с кабелем типа А для расширения шины. Кабель типа В не получил распространения и был вытеснен 68-ми жильным кабелем типа Р, который обеспечивает полный набор функций для  16-ти  и  32-х разрядной шины.
В настоящее время повсеместно используется последовательный интерфейс SCSI – SAS.

4.13.11  RAID-МАССИВЫ НАКОПИТЕЛЕЙ НА ЖЕСТКИХ ДИСКАХ

RAID расшифровывается как «Redundant Array of Inexpensive Disks», (Избыточный массив недорогих дисков). В современном RAID-массиве могут находиться диски разных ценовых категорий, поэтому образованный в 1992 году консорциум RAID Advisory Board заменил «Inexpensive» на «Independent» («независимый»).
В большинстве RAID-массивов данные разделяются на блоки по нескольку килобайт (от 8 до 64) и, в зависимости от вида массива, распределяются по физическим дискам. Набор блоков, записанных с первого по последний диск массива, называют страйпом. Для того, чтобы получить обратно какой-либо файл, записанный в страйп, нужно последовательно считать все блоки страйпа, относящиеся к этому файлу.
RAID-контроллер превращает любое количество подключенных к нему винчестеров в один большой диск, который воспринимается операционной системой как физический. Скорость чтения и записи, а также скорость обработки обращений к такому «виртуальному» винчестеру зависит от типа (уровня) RAID-массива а также от параметров тех дисков, из которых он состоит. Полученный при помощи RAID диск можно переразбить на логические разделы, отформатировать каждый раздел в подходящую файловую систему и использовать как обычный винчестер.
RAID-массив собирается только из одинаковых винчестеров (один производитель, одна модель и, желательно, одна партия). Благодаря этому диски могут работать синхронно, и если при записи файлы разделялись на несколько равномерных частей и каждая часть записывалась на отдельный диск массива, то время на запись (в сравнении с одиночным диском) уменьшалось ровно во столько раз, сколько винчестеров было установлено в массиве. То же самое происходит и при чтении.
Самым простым и дешевым является программный способ организации RAID-массива, который зачастую можно реализовать даже средствами самой ОС. В пользу этого варианта говорит его абсолютная бесплатность — вы покупаете только винчестеры, из которых, собственно, и будет состоять ваш RAID-массив. Минусами можно назвать дополнительную нагрузку на процессор, а также ограниченную расширяемость массива. Вы сможете объединить ровно столько дисков, сколько позволяют ваши IDE- или SATA-контроллеры.
Более удачным можно назвать внутренний аппаратный RAID-контроллер. Материнские платы с такими устройствами могут стоить $100 или даже меньше. А отдельные платы (как правило — PCI) стартуют с $20. Соразмерно цене различается и их функциональный набор, но в любом случае аппаратный контроллер снимает с процессора всю дополнительную нагрузку.
Третий вариант — это внешние контроллеры, которые поставляются в корпусах с местом для установки винчестеров и подключаются к компьютеру по USB, FireWire или через оптоволоконную сеть. Нередко в таком устройстве присутствует штатный блок бесперебойного питания. Цена таких устройств вполне соответствует их надежности и функциональности. Самые простые внешние устройства могут стоить $100-200 (без учета дисков), контроллеры среднего класса — $300-400.

RAID 0.  ДИСКОВЫЙ МАССИВ БЕЗ ОТКАЗОУСТОЙЧИВОСТИ

В таком массиве информация разбивается на блоки и равномерно распределяется на все диски, которые его составляют, в виде страйпов. Нетрудно догадаться, что при такой организации производиельность всего массива будет тем быстрее, чем больше дисков он будет в себе объединять. Ограничение накладывается уже не возможностями самого диска, а пропускной способностью интерфейса, через который подключен контроллер RAID 0. В случае PCI-контроллера, работающего на частоте шины 66 МГц, эта цифра может достигать 266 Мб/с. Для наглядности нетрудно подсчитать, что при такой скорости пе-рекачка одного видеофайла в формате divX (700 Мб) займет менее трех секунд. И достичь таких результатов можно относительно малой кровью: RAID 0, состоящий из четырех современных SATA-накопителей со средними характеристиками, будет обеспечивать эту скорость в полном объеме.
Однако, как и в каждой порядочной ложке меда, в RAID 0 имеется своя бочка дегтя. Имя ей — надежность. Если хоть один из винчестеров, составляющих RAID 0, выходит из строя, то в тот же миг разом теряются все данные, которые находились во всем массиве. Таким образом мы расплачиваемся за скорость — с каждым новым диском, подключенным в массив, вероятность отказа системы возрастает в прямой пропорции.

RAID 1.  ЗЕРКАЛИРОВАНИЕ
Этот уровень, если можно так выразиться, является антиподом RAID 0. В простейшем варианте вы получаете два диска, запись и чтение с которых происходит абсолютно синхронно. В случае отказа одного из дисков все данные остаются в целости и сохранности на другом, чем обеспечивается максимально возможная защита записанной информации от аппаратных проблем винчестеров. Действительно, трудно представить себе ситуацию, в которой откажут оба винчестера одновременно.
Но на этом выгоды RAID 1 не заканчиваются, если мы имеем две абсолютно идентичные копии необходимых файлов, то почему бы не использовать этот момент при чтении? RAID-контроллер распределяет чтение файла на отдельные части, что, в идеале, должно давать двукратный прирост в производительности. Однако реальный выигрыш оказывается немного ниже, поскольку проявляется лаг при начале и окончании операции чтения.
RAID уровня 1 является идеальным решением для небольшого офиса или фирмы. RAID 1 требует всего два винчестера, в то время как более сложные RAID 3, 4 и 5 запросят как минимум три диска. После выхода одного из винчестеров из строя система все равно загрузится и будет работать с оставшимися НЖМД, не требуя немедленной замены.

RAID 2.  ОТКАЗОУСТОЙЧИВЫЙ  МАССИВ  С  ИСПОЛЬЗОВАНИЕМ  КОДОВ ХЕММИНГА

Этот уровень RAID-массива представляет для нас исключительно теоретический интерес, поскольку в минимальной конфигурации он требует целых семь винчестеров, три из которых отводятся для хранения ЕСС-кодов, с помощью которых выявляются и ликвидируются ошибки. При увеличении количества устройств доля «страховочных» винчестеров уменьшается. Однако, несмотря на очевидную экономию в виде, как минимум, одного винчестера по сравнению с RAID 1. уровень RAID 2 оправдывает себя только в мейнфреймах. Основным «узким местом» такой схемы является скорость обработки запросов, которая упирается в необходимость сложного кодирования и проверки четности на каждом этапе работы для очень маленьких «порций» информации. Но взамен мы получаем скорость чтения данных выше, чем у RAID 0 аналогичной емкости.

RAID 3, 4, 5

Уровни RAID с третьего по пятый являются несколько упрощенным логическим продолжением RAID 2. Дело в том, что для хранения кодов четности в простейшей схеме RAID 2 требуется всего лишь один диск, в то время как два других нужны для определения места возникновения ошибки. Но современные контроллеры могут обойтись и без этой информации, используя специальные сигналы и дополнительные коды. Таким образом избыточность массива сводится к минимуму без особого вреда для его надежности.
В RAID 3 сохраняется принцип записи по страйпам, но при этом разбивка информации происходит на уровне бит и байт, а четность записывается на последний винчестер массива. Выигрыш очевиден — вместо 7 винчестеров, которые требовались для RAID 2 (при том, что результирующий объем равнялся всего 4-м дискам), мы можем создать массив с тем же уровнем защиты, но уже из трех винтов. И полезными будут два из них. Высокая скорость чтения данных и низкая скорость обработки запросов остаются как наследство от RAID 2, но для графических станций, оперирующих большими файлами, быстрая обработка запросов не так важна.
RAID 4 по своей структуре практически ничем не отличается от RAID 3. Разница лишь в том, что разбиение информации происходит не побайтно, а блоками по нескольку килобайт. Эта модификация значительно улучшает ситуацию с обработкой запросов при чтении, дотягивая ее до уровня RAID 0. В то же время блоковость не сильно вредит скорости чтения данных, но в скорости записи RAID уровня 4 может уступать даже одному отдельно взятому винчестеру. Очевидно, что RAID 4 является идеальной схемой для организации дискового мас-сива на файл-сервере.
Последним в этой цепочке является RAID уровня 5. При сохранении блочного принципа из RAID 4 отдельный винчестер, предназначенный для записи четности, в нем «расформирован», и четность записывается поочередно на все диски массива. Учитывая то, что при частых обращениях в RAID уровней 3 и 4 основная нагрузка ложится на винчестер, выделенный под четность, RAID 5 значительно выигрывает за счет возможности считывания и записи контрольных сумм со всех дисков одновременно. Однако в скорости чтения он уступает RAID 4, а в записи — RAID 3. В итоге получается, что RAID 5 больше всего подходит для использования в файл-серверах с частым обращением к диску или на серверах с базами данных.
Все RAID-массивы с третьего по пятый способны пережить гибель одного из своих винчестеров, не теряя записанной информации, но после отказа их работа остановится до тех пор, пока вы не замените поврежденное устройство новым. 

RAID  6, 7  и прочая экзотика

Основным недостатком RAID уровней 2-5 можно считать то, что они устойчивы только к единичным отказам. Но при увеличении массива вероятность отказов также увеличивается. Поэтому для больших массивов был разработан «перестраховочный» вариант на основе RAID пятого уровня сразу с двумя параллельными схемами проверки четности. Вот он-то и получил шестой номер в классификации RAID.
RAID 6 является очень надежной схемой. И, если адаптер позволяет, то в случае отказа одного из дисков он может «на лету» перестроиться в RAID 5 и продолжать работу.
RAID 7 является зарегистрированной торговой маркой Storage Computer Corporation и представляет собой сугубо аппаратное решение, которое в силу своей дороговизны будет интересно лишь немногим профессионалам. Однако RAID 7 обладает самыми высокими показателями скорости чтения, записи и обработки запросов при сохранении отказоустойчивости на уровне  RAID 2-5.
Также можно вспомнить различные «расширенные» вариации на тему стандартных уровней RAID. Например, фирма IBM под RAID IE подразумевает возможность установки в зеркальный режим одновременно трех дисков.

ГИБРИДНЫЕ  УРОВНИ    RAID

При высокой надежности RAID 2-5, все равно RAID 0 остается наиболее производительным и экономичным решением. И все, чего ему не хватает, — это отказоустойчивости избыточных  RAID-массивов.
Самым простым решением такой проблемы может стать организация RAID 10, при котором пары зеркальных винчестеров (массивы RAID 1) объединяются в один большой RAID 0. Возможен и обратный вариант, когда два RAID 0 объединяются в один RAID 1, однако при этом уязвимость массива повышается.
Аналогичным путем организовываются RAID 30 и RAID 50, кото-рые во всем аналогичны RAID 3 и 5, но работают вдвое быстрее.


5  НОВЫЕ  ПОКОЛЕНИЯ  МИКРОПРОЦЕССОРОВ
5.1  НОВЫЕ  ВОЗМОЖНОСТИ  МИКРОПРОЦЕССОРА   i486
Часто испо-льзуемые операции в процессоре I486 выполняются за один цикл, что сравнимо со скоростью выполнения RISC-команд. Это достигнуто применением ПЯТИСТУПЕНЧАТОГО  КОНВЕЙЕРА КОМАНД.
Восьмикилобайтный унифицированный КЭШ для кода и данных, соединенный с шиной пакетного обмена данными со скоростью 80/106 МБайт/с при частоте 25/33 МГц гарантируют высокую производитель-ность системы даже с недорогими микросхемами динамической памяти (DRAM).
Новые возможности расширяют многозадачность систем. Новые операции увеличивают скорость работы с семафорами в памяти. Оборудование на кристалле процессора гарантирует непротиворечивость КЕШ-памяти и поддерживает средства для реализации многоуровневого кэширования.
Встроенная СИСТЕМА ТЕСТИРОВАНИЯ проверяет логику процессора, КЭШ-память и внутренние ресурсы поддержки постраничного преобразования адресов памяти. Возможности отладки включают в себя установку ловушек контрольных точек в выполняемом коде и при доступе к данным.
Частота системной шины определяет тактовую частоту процессора PCLK (без деления пополам, как у предыдущих процессоров). Элементарные действия внутри процессора (микроинструкции) выполняются по нарастающему и спадающему фронтам тактовой частоты, что усложняет триггеры схем управления по сравнению с предыдущими процессорами. 
В процессорах I486 впервые применено внутреннее умножение тактовой частоты для повышения быстродействия (486 DX2, 486 DX4). Возможности процессора i486 включают в себя: 
	Полная программная совместимость с ЦПУ 386 DX, 386 SX, встраиваемым 376(TM) процессором, процессорами 80286, 8086 и 8088;
	КОНВЕЙЕРНОЕ ВЫПОЛНЕНИЕ КОМАНД, перекрывающееся по времени с интерпретацией других команд;
	Модуль выполнения команд разработан так, чтобы выполнять часто встречающиеся операции за один цикл;
	32-разрядный процессор для выполнения арифметических и логических операций;
	Встроенный модуль обработки арифметических операций с плавающей точкой (FPU) для поддержки 32, 64, и 80-разрядных форматов, заданных в соответствии со стандартом IEEE 754 (объектно совместимом с 387 (TM) DX и 387 SX арифметическими сопроцессорами);
	Внутренняя 8 Кбайтовая КЭШ-память, которая обеспечивает быстрый доступ к часто используемым данным и командам;
	Сигналы управления шиной позволяют поддерживать непротиво-речивость КЭШа в многозадачных системах;
	СЕГМЕНТАЦИЯ, одна из форм управления памятью для создания независимых, защищенных адресных пространств;
	ПОСТРАНИЧНОЕ РАЗБИЕНИЕ, одна из форм управления памятью, которая обеспечивает доступ к структурам данных, большим, чем доступное пространство памяти, путем хранения данных частично в памяти, частично на диске;
	Перезапускаемые операторы, которые позволяют перезапуск программы после исключения (необходимы для поддержки постраничного доступа к виртуальной памяти);
	Регистры отладки для аппаратной поддержки контрольных точек в командах и данных;

Режимы работы процессора i486 определяют, какие команды и какие архитектурные возможности доступны. Процессор i486 предусматривает три режима выполнения программ:
	РЕЖИМ РЕАЛЬНОЙ (прямой) АДРЕСАЦИИ (называемый также «реальным режимом») эмулирует программную среду процессора 8086, с некоторыми дополнительными возможностями (такими, как возможность прервать данный режим). При перезагрузке процессор устанавливается именно в этот режим.
	ЗАЩИЩЕННЫЙ РЕЖИМ использует естественное множество 32-разрядных команд процессора. В данном режиме доступны все команды и все архитектурные возможности.
	ВИРТУАЛЬНЫЙ РЕЖИМ 86 (называемый также «режим V86») является другой формой эмуляции режима 8086. В отличие от режима прямой адресации, ВИРТУАЛЬНЫЙ РЕЖИМ 86 совместим с защитой и управлением памятью. Процессор может установить виртуальный режим 86 из защищенного режима, чтобы выполнить программу, написанную для процессора 8086, а затем, выйдя из виртуального режима 86 и перейдя в защищенный режим, продолжить выполнение программы, которая использует множество 32-разрядных команд.

КЭШИРОВАНИЕ
Процессор i486 имеет встроенный в микросхему внутренний КЭШ для хранения 8 Кбайт команд и данных. КЭШ увеличивает быстродействие системы, отвечая на внутренние запросы чтения быстрее, чем при выполнении цикла чтения оперативной памяти по магистрали. Это средство уменьшает также использование процессором внешней магистрали. Внутренний КЭШ прозрачен для работающих программ.
Процессор i486 может использовать внешний КЭШ второго уровня вне микросхемы процессора. Обычно внешний КЭШ позволяет увеличить быстродействие при использовании относительно медленной DRAM.
КЭШи в МУЛЬТИПРОЦЕССОРНЫХ СИСТЕМАХ требуют особого рассмотрения. Если один процессор выполняет доступ к данным, кэшируемым в другом процессоре, требуется обеспечить правильность (достоверность) принимаемых им данных. Если же он выполняет модификацию данных, то все остальные процессоры, обращающиеся к этим данным, должны верно принять модифицированные данные. Это свойство называется НЕПРОТИВОРЕЧИВОСТЬЮ КЭША. Процессор i486 обеспечивает механизм, гарантирующий непротиворечивость КЭШа при наличии не-скольких процессоров и внешних КЭШей.
Работа внутреннего и внешнего КЭШей прозрачна для прикладного программного обеспечения, но знание поведения этих КЭШей может быть полезным с точки зрения оптимизации быстродействия программного обеспечения. В многопроцессорных системах обеспечение непротиворечивости КЭШа может потребовать вмешательства со стороны системного программного обеспечения.
КЭШ доступен во всех режимах работы: реальном режиме, защищенном режиме и виртуальном режиме 8086. Для правильно разработанных однопроцессорных систем КЭШ после инициализации не требует дальнейшего управления своей работой.
Процессор I486 имеет внутренний первичный КЭШ (Cache Level 1) размером 8 Кбайт. КЭШ имеет 4-х канальную наборно-ассоциативную архитектуру и работает на уровне физических адресов памяти.
КЭШ содержит 128 наборов по четыре строки размером по 16 байт (128 бит) каждая. Нежелательно, чтобы внешние КЭШи работали со строками, меньшими по размеру, чем строки внутреннего КЭШа.
Строки в КЭШ-памяти выделяются только при чтении. Политика записи первых процессоров I486 – Write Through (сквозная запись) – полностью программно прозрачна; более поздние модификации позволяют переключаться на политику Write Back (обратная запись).
В регистре управления CR0 (доступном только программам с высшим уровнем приоритета) имеются биты управления КЭШ-памятью:
•	CD (Cache Disable) – запрещение КЭШ-памяти. Этот бит разрешает (CD = 0) или запрещает (CD = 1) внутреннюю КЭШ-память. Когда CD = 1, КЭШ-промахи не вызывают заполнение ее строки, однако, КЭШ-попадания не запрещаются; для полного запрещения КЭШ-памяти необходимо ее очистить.
•	NW (Not Write-through) - не сквозная запись. Этот бит в состоянии 0 разрешает сквозную запись и циклы недостоверности КЭШ-памяти, а в состоянии 1 запрещает циклы недостоверности КЭШ-памяти и сквозные записи, вызвавшие КЭШ-попадания.

БУФЕРА  ОТЛОЖЕННОЙ  ЗАПИСИ
Процессор I486 имеет 4 внутренних буфера для операций записи. Если во время внутреннего запроса процессора на запись все буфера свободны и шина не занята, запись выполняется сразу без буферирования. Если шина занята, запрос направляется в буфер, занимая для записи только один внутренний такт, а из буфера данные выгружаются в оперативную память или устройства ввода-вывода (порты) по мере освобождения внешней шины. Внешние операции записи из буферов будут производиться в том же порядке, что и поступившие запросы. Для операций ввода-вывода изменение порядка невозможно, Чтение порта никогда не может обгонять запись в память (иначе отказались бы работать многие периферийные устройства).

5.2  ПРОЦЕССОРЫ   PENTIUM
В марте 1993 года фирма INTEL объявила о начале промышленных поставок 60-ти и 66-ти Мегагерцовых версий процессора PENTIUM. Название нового микропроцессора является зарегистрированной торговой маркой корпорации INTEL, поэтому в системах INTEL INSIDE микропроцессор 586 фигурировать не будет.
Процессор PENTIUM, являясь программно совместимым с предыдущими процессорами, в то же время определяет новую точку отсчета в развитии архитектур фирмы INTEL. Именно с этого процессора активно начинает использоваться идеология параллельных систем, т.е. достижение высокой производительности будет обеспечиваться в первую очередь за счет мультимикропроцессорных средств процессора.
Использование субмикронной технологии в процессорах PENTIUM позволяет разработчикам фирмы INTEL располагать больше транзисторов на каждой подложке. Это сделало возможным увеличение количества транзисторов для семейства x86 от 29 000 в 8086 процессоре до 1,2 миллионов в процессоре Intel486 DX2, с наивысшим достижением в PENTIUM процессоре. Выполненный по 0,8 микронной BiCMOS технологии, он содержит 3.1 миллиона транзисторов.
Процессор PENTIUM включает все особенности процессора INTEL486 и имеет ряд новых существенных черт, таких как:
	СУПЕРСКАЛЯРНАЯ АРХИТЕКТУРА, включающая два конвейера и позволяющая за один такт процессора выполнить более одной команды;
	ПРЕДСКАЗАНИЕ ВЕТВЛЕНИЙ В ПРОГРАММЕ, что реализуется специальными логическими схемами, определяющими точку передачи управления в программе и обеспечивающими предварительную подготовку к выполнению определенных фрагментов программы;
	КОНВЕЙЕРНОЕ УСТРОЙСТВО для обработки данных с плавающей точкой (FPU);
	РАЗДЕЛЬНЫЕ КЭШ-ПАМЯТИ КОМАНД И ДАННЫХ емкостью 8 Кбайт каждая; для КЭШ-памяти команд (программ) не нужно производить запись в основную память при обновлении строк КЭШа;
	поддержка протокола обратной записи MESI (Modified/Exclusive/ Shared/Invalid) для кэш-памяти данных;
	64-х битовая ШИНА ДАННЫХ обеспечивает обмен данными с системной платой со скоростью 28 МБайт/с;
	32-х битовая ШИНА АДРЕСА;
	конвейеризация цикла магистрали;
	внутренний контроль на четность;
	контроль на основе функциональной избыточности;
	расширение виртуального режима 8086, обеспечивающее увеличение производительности системы в данном режиме;
	текущий контроль ("МОНИТОРИНГ") производительности;
	режим управления системой (SYSTEM MANAGEMENT MODE);
	дополнительные возможности по тестированию, поддержка стандарта IEEE 1149.1 (Test Access Port and Boundary Scan);
	поддерживающее программное обеспечение, работающее с операционными системами MS-DOS, WINDOWS, OS/2, UNIX, NEXTSTEP 486, SOLARIS.
В процессор PENTIUM встроены средства самотестирования, обеспечивающие контроль устройств процессора, средства отладки программного обеспечения на основе механизма контрольных точек для останова процессора при выборе команд и обращений к данным.
Процессор PENTIUM включает полный набор команд процессора INTEL486 и содержит ряд новых команд, обеспечивающих расширение его функциональных возможностей.
СУПЕРСКАЛЯРНАЯ АРХИТЕКТУРА PENTIUM процессора представляет собой совместимую только с INTEL двухконвейерную индустриальную архитектуру, позволяющую процессору достигать новых уровней производительности, посредством выполнения более, чем одной команды за один период тактовой частоты. Термин «СУПЕРСКАЛЯРНАЯ» обозначает микропроцессорную архитектуру, которая содержит БОЛЕЕ ОДНОГО ВЫЧИСЛИТЕЛЬНОГО БЛОКА. Эти вычислительные блоки, или конвейеры, являются узлами, где происходят все основные процессы обработки данных и команд.
Устройство управления памятью на кристалле процессора совместимо с процессорами  INTEL386  и  INTEL486.  Два конвейера команд и устройство с плавающей точкой (FPU) функционируют независимо. Каждый конвейер обеспечивает выполнение часто используемых в программах команд в течение одного такта синхронизации. Кроме того, имеется возможность выполнения двух команд в одном такте при обработке данных целого типа или одной, а иногда и двух команд с плавающей точкой.
Для ПРЕДСКАЗАНИЯ ВЕТВЛЕНИЙ в программе процессор PENTIUM содержит ДВА БУФЕРА ПРЕДВЫБОРКИ КОМАНД, один из которых обеспечивает предвыборку команд на линейном участке, а другой служит для предвыборки команд в соответствии с алгоритмом функционирования буфера целевого ветвления BTB (Branch Target Buffer).
При выполнении программ с циклами – в небольшой АССОЦИ-АТИВНОЙ ПАМЯТИ, называемой буфером целевого ветвления – ВТВ, запоминаются адреса команд ветвления (как ТЭГ ячейки) и адреса, на которые необходимо переходить (ИНФОРМАЦИОННАЯ ЧАСТЬ ячейки). При каждом последующем обращении к КЭШ-памяти команд для заполнения ОЧЕРЕДИ КОМАНД (буфера предвыборки команд) адрес ячейки памяти сравнивается с ТЕГами в ассоциативной памяти. Если произошло совпадение, – это означает, что в ОЧЕРЕДЬ КОМАНД записана команда условного перехода (в конце цикла). Еще до выполнения этой команды начинает заполняться вторая очередь команд с адреса, выбираемого из ИНФОРМАЦИОННОЙ ЧАСТИ ячейки ассоциативной памяти. Поэтому к моменту выполнения команды условного ветвления две очереди уже готовы выполнить:  или ВОЗВРАТ К НАЧАЛУ ЦИКЛА  или ЛИНЕЙНЫЙ УЧАСТОК ПРОГРАММЫ при выходе из цикла, т.е. переход выполняется без задержки.
Использование новых алгоритмов в устройстве обработки чисел с плавающей точкой (FPU) и методов конвейерной обработки позволили повысить быстродействие FPU по сравнению с процессором INTEL486 до 5 раз для многих команд, включая сложение, умножение, загрузку.
Каждая КЭШ-память емкостью 8 Кбайт имеет длину строки 32 байта и является 2-х канальной наборно-ассоциативной памятью для преобразования линейных адресов в физические. Обращение к КЭШ-памяти команд и данных может быть программно или аппаратно запрещено или разрешено. Каждая КЭШ-память имеет специальный буфер ассоциативной трансляции TLB (Trnslation Lookaside Buffer) для преобразования линейных адресов в физические.
КЭШ-память данных обеспечивает режим обратной (Write back) или сквозной (Write through) записи строка за строкой и поддерживает протокол MESI.
Отдельные страницы могут быть определены как кэшируемые или не кэшируемые программным или аппаратным путем. Процессор PENTIUM использует 64-х битовую шину данных для увеличения скорости передачи данных. В процессоре поддерживаются режимы пакетного чтения и обратной записи для КЭШ-памяти (Burst Writeback). Кроме того, имеется возможность выполнения в конвейерном режиме двух циклов магистрали одновременно. Устройство управления памятью в процессоре PENTIUM обеспечивает поддержку страниц 4 кБайт или 4 МБайт.
Хорошая защита данных и обеспечение их целостности посредством внутренних средств становится крайне важным в приложениях, критичным к потерям данных, благодаря распространению современного окружения клиент-серверов. PENTIUM процессор содержит два усовершенствования, традиционно присущих большим ЭВМ – внутреннее определение ошибок и контроль за счет функциональной избыточности ( FCR ) – это помогает обеспечить целостность данных.
Внутреннее определение ошибок дополняет битом четности внутренний код и кэширование данных, сдвиговую ассоциативную таблицу страниц, микрокод, а также целевой буфер перехода, помогая определять ошибки таким образом, что это остается незаметным и для пользователя, и для системы. В то же время контроль с помощью функциональной избыточности оптимизирован для приложений, критических к потерям данных, где процессор PENTIUM может работать в конфигурации основной/контролирующий. Если между двумя процессорами обнаруживаются разногласия, система извещается об ошибке. В результате происходит обнаружение более, чем 99% ошибок.
Кроме того, на подложке процессора расположено устройство встроенного тестирования. Самотестирование охватывает более 70% узлов процессора PENTIUM, не требует выполнения сброса кристалла и представляет собой процедуру, обычно используемую при диагностике систем.
Другими встроенными решениями является реализация стандарта IEEE 1149.1, позволяющая тестировать внешние соединения процессора и отладочный режим, дающий возможность программному обеспечению просматривать регистры и состояние процессора.
Структура процессора PENTIUM приведена на рис. 5.3. Процессор содержит два КОНВЕЙЕРА КОМАНД U и V. U-конвейер может выполнять команды над данными целого и вещественного типов. V-конвейер выполняет простые команды над целыми, и команды FXCH над данными вещественного типа.


КЭШ-ПАМЯТЬ ДАННЫХ имеет два порта, по одному для каждого из конвейеров и содержит буфер ассоциативной трансляции TLB для преобразования линейных адресов в физические, используемые КЭШ-памятью данных.
КЭШ-ПАМЯТЬ КОМАНД, буфер целевого ветвления BTB и буферы предвыборки команд обеспечивают передачу выбранных команд в устройство обработки процессора PENTIUM. Адреса ветвления команд запоминаются в буфере целевого ветвления BTB. Буфер ассоциативной трансляции TLB кэш-памяти команд преобразует линейные адреса в физические, используемые кэш-памятью команд.
Устройство декодирования расшифровывает предвыбранные команды. Устройство управления на базе ROM содержит микрокоманды для управления выполнением операций в процессоре. Устройство микропрограмного управления на основе ROM осуществляет прямое управление двумя конвейерами.

5.2.1  ОРГАНИЗАЦИЯ  КОНВЕЙЕРА  И  ПОТОК  КОМАНД
Подобно процессору INTEL486, в процессоре PENTIUM используется ПЯТИСТУПЕНЧАТЫЙ КОНВЕЙЕР для обработки команд:
	предвыборка команд (PF-Prefetch);
	декодирование команд (D1-Instruction Decode);
	формирование адреса (D2-Address Generate);
	выполнение команды в  АЛУ  и  доступ  к  кэш-памяти (EX-Execute);
	обратная запись (WB-Write Back).
На рис. 5.4 показана пятиступенчатая структура конвейерного устройства в процессоре INTEL486, а на рис. 5.5 – структура конвейера процессора PENTIUM.
В процессоре PENTIUM ММХ в конвейер добавлены новые стадии.
Процессор PENTIUM, в отличие от процессора INTEL486, использует суперскалярную архитектуру, позволяющую выполнять параллельно две выбранные команды. Два пятиступенчатых конвейера работают параллельно, обеспечивая реализацию команд над целочисленными данными в одном такте в каждом конвейере. Конвейеры в процессоре называются U- и V-конвейерами, а процесс параллельного выполнения двух команд – «СПАРИВАНИЕМ» ("pairing"). U-конвейер может выполнять любую команду процессоров архитектуры INTEL, тогда как V-конвейер – «простые» ("simple") команды, определенные в соответствии с правилами «спаривания» команд (Instrtuction Pairing Rules). При формировании «спаренных» команд команда, выполняемая в V-конвейере, является всегда следующей после команды, реализуемой в U-конвейере.
Команды поступают в первую ступень конвейера PF из КЭШ-памяти команд процессора или оперативной памяти. Так как процессор PENTIUM имет раздельные КЭШ-памяти команд и данных, конфликты при предвыборке команд и выборке данных отсутствуют. При отсутствии в КЭШ-памяти запрашиваемой строки происходит обращение к основной памяти. В предвыборке команд принимают участие два независимых 32-байтовых буфера предвыборки и буфер целевого ветвления ВТВ.


В любой момент времени предварительную выборку команд выполняет только один из буферов предвыборки. Предвыборка выполняется последовательно до выборки команды передачи управления. При этом буфер целевого ветвления BTB определяет возможность выполнения перехода. Если предсказание соответствует случаю отсутствия перехода, то последовательная предвыборка команд будет продолжаться.
Если имело место предсказание перехода, включается в работу другой буфер предвыборки команд, который начинает выборку с команды, на которую должен произойти переход. При ошибочном предсказании перехода конвейеры команд обнуляются, и предвыборка команд начинается заново.


В ступени D1 два параллельных декодера обрабатывают соответствующие две команды, определяя при этом возможность выполнения одной или двух команд в соответствии с правилами объединения команд в пары. Процессор PENTIUM, подобно процессору INTEL486 требует дополнительного такта для декодирования префиксов.
Ступень D2, выполняющая обработку после D1, обеспечивает вычисление адресов операндов резидентной памяти. В процессоре INTEL486 команды, включающие смещение и непосредственный операнд, и команды, имеющие базовый и индексный режимы адресации, требуют дополнительного такта для выполнения декодирования. В процессоре PENTIUM подобные команды реализуются за один такт.
Ступень EX используется для выполнения операций в АЛУ и обращения к КЭШ-памяти данных. В ступени EX команды для обоих конвейеров, за исключением команд ветвления, проверяются с целью корректного предсказания ветвлений. В процессоре PENTIUM микропрограммное обеспечение разработано таким образом, чтобы можно было использовать два конвейера, что повышает быстродействие при выполнении команд, использующих микрокомандное управление.
Если в одном из каналов возникла задержка, то команды, следующие за застрявшей командой, не смогут продвигаться дальше, даже если застрявшая команда находится в другом канале.
В последней ступени WB команды в соответствии с их назначением могут модифицировать состояние процессора, и их выполнение завершается. Загрузка следующих команд в ступень EX любого конвейера разрешается только после завершения обработки в ступени WB. В этой ступени условные переходы в V-конвейере проверяются для корректного предсказания ветвлений.
В стадии PF две независимые пары буферов предвыборки строк (32 байта) работают вместе с буфером целевого ветвления ВТВ.
Предвыборки запрашиваются последовательно до выборки команды перехода. При выборке команды перехода буфер целевого ветвления предсказывает, будет иметь место переход или нет. Если предсказание соответствует отсутствию перехода, предвыборка выполняется линейно. При предсказании перехода другой буфер начинает предвыборку, как если бы переход выполнен. Если переход оказывается не предсказанным, конвейер команд очищаются, и предвыборка команд возобновляется.

5.2.2  УСТРОЙСТВО  С  ПЛАВАЮЩЕЙ  ТОЧКОЙ
Устройство с плавающей точкой (FPU) процессора PENTIUM реализовано совместно с целочисленным устройством на одном кристалле и использует высокий уровень конвейеризации. FPU может выполнять одну операцию с плавающей точкой в каждом такте. FPU может также получать и выполнять две команды с плавающей точкой (спаривание), одной из которой должна быть команда обмена.
FPU имеет 8-ступенчатый конвейер. Первые 5 ступеней он использует совместно с устройством для обработки целых данных:
	PF (предвыборка команд);
	D1 (декодирование команд);
	D2 (формирование адреса);
	EX (чтение регистров и памяти, преобразование данных из формата с плавающей точкой в формат для хранения в памяти и запись в память);
	X1 (выполнение операции - ступень 1, включающее преобразование данного во внутренний формат FPU и запись операнда в регистры FPU);
	X2 (выполнение операции, ступень 2);
	WF (выполнение округления и запись результата в регистр);
	ER (сообщение об ошибке и модификация слова состояния).

5.2.3  КЭШ-ПАМЯТЬ  ПРОЦЕССОРА  PENTIUM
Процессор PENTIUM содержит две внутренние КЭШ-памяти, емкостью по 8 Кбайт каждая, КЭШ-память данных и КЭШ-память команд.
Использование независимых КЭШ-памяти команд и КЭШ-памяти данных обеспечивает одновременный бесконфликтный доступ к ним. За один такт можно выполнить обращение к памяти данных и прочитать 32-байтовый фрагмент кодовой последовательности команд. Данные КЭШ-памяти являются прозрачными для прикладных программ, чтобы обеспечить совместимость с предыдущими поколениями процессоров INTEL386 / INTEL486.
КЭШ-память данных полностью поддерживает протокол согласования MESI (Modified Exclusive Shared Invalid). Данный протокол обеспечивает в мультипроцессорных конфигурациях КЭШ-согласование (Cache Consistency Protocol). Это согласование означает, что при изменении некоторых данных КЭШ-памяти одним из процессоров системы остальные также будут получать при обращении к ним скорректированные данные.
КЭШ-памяти процессора обеспечивают максимальную гибкость и производительность. КЭШ-память данных поддерживает два способа построчной записи: обратную запись (Write back) и сквозную запись (Write through). Отдельные области памяти могут быть определены как некэшируемые программным способом или посредством внешней аппаратуры. Обратная запись и очистка (Invalidation) КЭШ-памяти могут быть инициированы аппаратно или программно. 
Каждая из КЭШ-памяти организована как 2-х канальная наборно-ассоциативная и содержит 128 наборов, каждый из которых, в свою очередь, включает две 32-х байтовые строки, содержащие адресные тэги. 
Каждая КЭШ-память имеет буфер ассоциативной трансляции TLB для преобразования линейных адресов в физические. КЭШ-память данных имеет 4-х канальный наборно-ассоциативный буфер ассоциативной трансляции TLB для 4-х Кбайтных страниц и отдельный 4-х канальный наборно-ассоциативный буфер ассоциативной трансляции TLB для 4-х Мбайтных страниц.
КЭШ-память команд имеет один 4-х канальный наборно-ассоциативный буфер ассоциативной трансляции TLB для 4-х кбайтных и 4-х Мбайтных страниц.
При записи в КЭШ-память данных процессор PENTIUM использует один из следующих способов модификации данных в основной памяти :
	Сквозная запись – при которой запись в строку КЭШ-памяти обновляет КЭШ-память и основную память.
	Обратная запись – при которой модифицируется только строка в КЭШ-памяти. Данный способ записи приводит к сокращению занятости внешней магистрали за счет исключения ненужной записи в основную память. Перезапись модифицированной строки из КЭШ-памяти в основную память осуществляется посредством обратной  записи, производимой при удалении строки из КЭШ-памяти или, при необходимости, для поддержания механизма КЭШ-согласования.

5.3	ОСОБЕННОСТИ  АРХИТЕКТУРЫ  ПРОЦЕССОРА
 PENTIUM-90/100
Процессоры PENTIUM-60/66 были сняты с производства после появления новых версий процессоров PENTIUM-90/100 второго поколения с внутренним умножением частоты.
Процессор PENTIUM-90/100 включает следующие нововведения по сравнению с процессором PENTIUM-60/66:
	повышение индекса производительности;
	поддержка дуального режима работы процессоров PENTIUM;
	возможность выбора соотношения частот работы процессора PENTIUM и магистрали;
	улучшенный режим управления потребляемой мощностью (SL Power Management).
Процессор PENTIUM-90/100 реализован на основе 0,6 микронной BiCMOS технологии, использует питание 3,3 В, что обеспечивает уменьшение потребляемой мощности. Данный процессор также имеет улучшение в управлении мощностью (SL Power Management). Когда поступление тактовых сигналов в процессор PENTIUM-90/100 прекращается, рассеиваемая мощность ограничивается. Использование питания 3,3 В и улучшенного управления мощностью делает этот процессор хорошим кандидатом для использования в компьютерах и системах с низким потреблением мощности. Новый тип корпуса позволил увеличить количество выводов для введения в процессор новых функций и сигналов.
Процессор PENTIUM-90/100 имеет более высокую произво-дительность и частоту работы. Входная частота тактовых сигналов в процессоре умножается на коэффициент 1,5 или 2 и используется в качестве внутренней частоты процессора. Увеличенная таким образом частота не требует модификации аппаратных или программных средств. Для выбора отношения частот тактовых сигналов в процессоре и на шине имеется сигнал BF (Bus Frequency), частота тактовых сигналов на входе CLK может быть 50 МГц или 66 МГц.
Процессор PENTIUM-90/100 включает новые возможности для построения мультипроцессорных систем. Он имеет встроенный улучшенный программируемый контроллер прерываний  APIC  (Advanced Programmadle Interrupt Controllter) для управления прерываниями в системе (с симметричным распределением прерываний для всех процессоров), а также обслуживания подсистем ввода-вывода. Контроллер APIC совместим с контроллером прерывания 8259А.
Дуальная процессорная конфигурация позволяет двум процессорам PENTIUM использовать общую КЭШ-память второго уровня для симметричных мультипроцессорных систем. Два процессора представляют в системе как один процессор PENTIUM-90/100. Мультипроцессорная операционная система обеспечивает распределение задач между процессорами системы, являющееся прозрачным для прикладных программ и конечного пользователя (End-User). Встроенная в процессоры логика обеспечивает интерфейс, упрощая проектирование системы.
Используя локальную шину, два процессора PENTIUM обеспечивают арбитраж внешней шины и поддерживают согласование КЭШ-устройств.

5.4  МИКРОПРОЦЕССОРЫ  PENTIUM PRO
1 ноября 1995 года фирма INTEL объявила о начале коммерческих поставок МП нового поколения PENTIUM PRO.
Главное преимущество и уникальная особенность МП PENTIUM PRO, именуемого «Р6», – размещенная в одном корпусе с процессором вторичная статическая КЭШ-память размером 256 КБ, соединенная с процессором специально выделенной шиной.
Кристалл ЦПУ в Р6 содержит 5,5 миллионов транзисторов, выполненных по 0,35 микронной технологии BiCMOS; кристалл КЭШ-памяти второго уровня – 15,5 миллионов. Для сравнения, последняя модель Pentium-90/100 включала около 3,3 миллиона транзисторов, а КЭШ-память второго уровня реализовывалась с помощью внешнего набора кристаллов памяти.
Столь большое число транзисторов в КЭШЕ объясняется его статической природой. Статическая память в P6 использует шесть транзисторов для запоминания одного бита, в то время как динамической памяти было бы достаточно одного транзистора на бит. Статическая память быстрее, но дороже.
КЭШ второго уровня связан с процессором специально выделенной шиной шириной 64 бита и работает на той же тактовой частоте, что и процессор.
Первые процессоры РENTIUM с тактовой частотой 60 и 66 МГц обращались к вторичному КЭШУ по 64-разрядной шине с той же тактовой частотой. Однако с ростом тактовой частоты PENTIUM для проектировщиков стало слишком сложно и дорого поддерживать такую частоту на материнской плате. Поэтому стали применяться умножители частоты. Например, у 100 МГц PENTIUM внешняя шина работает на частоте 66 МГц (у 90 МГц PENTIUM – соответственно 60 МГц). PENTIUM использует эту шину как для обращений к вторичному КЭШУ, так и для обращения к основной памяти и другим устройствам, например к набору чипов PCI.
Использование специально выделенной шины для доступа к вторичному КЭШу улучшает производительность вычислительной системы.
Во-первых, при этом достигается полная синхронизация скоростей процессора и шины; во-вторых, исключается конкуренция с другими операциями ввода-вывода и связанные с этим задержки. Шина КЭШа второго уровня полностью отделена от внешней шины, через которую происходит доступ к памяти и внешним устройствам. 64-битовая внешняя шина может работать со скоростью, равной половине, одной третьей или одной четвертой от скорости процессора, при этом шина вторичного КЭША работает независимо на полной скорости.
Объединение процессора и вторичного КЭШа в одном корпусе и их связь через выделенную шину является шагом по направлению к методам повышения производительности, используемым в наиболее мощных RISC-процессорах. Так, в процессоре ALPHA 21164 фирмы  DЕС  КЭШ второго уровня размером 96 КБ размещен в ядре процессора, как и первичный КЭШ. Это обеспечивает очень высокую производительность КЭШа за счет увеличения числа транзисторов на кристалле до 9,3 миллиона. Производительность ALPHA 21164 составляет 330 SPECint92 при тактовой частоте 300 МГц. Производительность Р6 ниже (по оценкам INTEL - 200 SPECint92 при тактовой частоте 133 МГц), однако Р6 обеспечивает лучшее соотношение стоимость/производительность для своего потенциального рынка.

PENTIUM  -  КАК  ТОЧКА  ОТСЧЕТА
PENTIUM содержит два 5-ти стадийных конвейера, которые могут работать параллельно и выполнять две целочисленные команды за машинный такт. При этом параллельно может выполняться только пара команд, следующих в программе друг за другом и удовлетворяющих определенным правилам, например, отсутствие регистровых зависимостей типа «запись после чтения».
В МП PENTIUM PRO (P6) для увеличения производительности осуществлен переход к одному 12-стадийному конвейеру. Увеличение числа стадий приводит к уменьшению выполняемой на каждой стадии работы и, как следствие, к уменьшению времени нахождения команды на каждой стадии на 33 процента по сравнению с PENTIUM. Это означает, что использование при производстве P6 той же технологии, что и при производстве 100 МГц PENTIUM, приведет к получению P6 с тактовой частотой 133 МГц. 
Возможности суперскалярной архитектуры PENTIUM, с ее способностью к выполнению двух команд за такт, было бы трудно превзойти без совершенно нового подхода. В его основе лежит комбинация технологий, известная как DYNAMIC EXECUTION. Собственно, это три уже известных технологии :
	многократное предсказание ветвлений (multiple branch prediction);
	анализ потоков данных (data flow analysis);
	эмуляция выполнения инструкций (speculative execution).
Примененный в PENTIUM PRO (P6) новый подход устраняет жесткую зависимость между традиционными фазами «ВЫБОРКИ» и «ВЫПОЛНЕНИЯ», когда последовательность прохождения команд через эти две фазы соответствует последовательности команд в программе. 
Новый подход связан с использованием, так называемого, ПУЛА КОМАНД и с новыми эффективными методами предвидения будущего поведения программы. При этом традиционная фаза «ВЫПОЛНЕНИЕ» заменяется на две: «ДИСПЕТЧИРОВАНИЕ/ВЫПОЛНЕНИЕ» и «ОТКАТ». В результате команды могут начинать выполняться в произвольном порядке, но завершают свое выполнение всегда в соответствии с их исходным порядком в программе. Ядро P6 реализовано как три независимых устройства, взаимодействующих через ПУЛ КОМАНД.

ОСНОВНАЯ ПРОБЛЕМА НА ПУТИ ПОВЫШЕНИЯ ПРОИЗВОДИТЕЛЬНОСТИ
Решение об организации P6 как трех независимых и взаимодействующих через ПУЛ КОМАНД устройств было принято после тщательного анализа факторов, ограничивающих производительность современных микропроцессоров. Фундаментальный факт, справедливый для PENTIUM и многих других процессоров, состоит в том, что при выполнении реальных программ мощность процессора не используется в полной мере. Рассмотрим в качестве примера следующий фрагмент программы, записанный на некотором условном языке: 
r1 ← mem[r0]	/* Команда 1  */
r2 ← r1 + r2 		/* Команда 2  */
r5 ← r5 + 1  		/* Команда 3  */
r6 ← r6 – r3		/* Команда 4  */
Предположим, что при выполнении первой команды фрагмента – за-грузки из памяти в регистр r1 – оказалось, что содержимое соответствующей ячейки памяти отсутствует в КЭШе. При традиционном подходе про-цессор перейдет к выполнению команды 2 только после того, как данные из ячейки  mem[r0]  основной памяти будут прочитаны через интерфейс шины. Все время ожидания процессор будет простаивать.
В то время, как скорость процессоров за последние 10 лет выросла по меньшей мере в 10 раз, время доступа к основной памяти уменьшилось только на 60 процентов. Это увеличивающееся отставание скорости работы с памятью по отношению к скорости процессора и было той фундаментальной проблемой, которую пришлось решать при проектировании  МП   PENTIUM PRO (P6).
Один из возможных подходов к решению этой проблемы – перенос ее центра тяжести на разработку высокопроизводительных компонентов, окружающих процессор. Однако массовый выпуск систем, включающих и высокопроизводительный процессор, и высокоскоростные специализиро-ванные микросхемы окружения, был бы слишком дорогостоящим.
Можно было попытаться решить проблему с использованием грубой силы, а именно увеличить размер КЭШа второго уровня, чтобы уменьшить процент случаев отсутствия необходимых данных в КЭШе.
Это решение эффективное, но тоже чрезвычайно дорогостоящее, особенно учитывая сегодняшние скоростные требования к компонентам КЭШа второго уровня. P6 проектировался с точки зрения эффективной реализации целостной вычислительной системы, и требовалось, чтобы высокая производительность системы в целом достигалась с использованием дешевой подсистемы памяти.

РЕШЕНИЕ,  ПРИНЯТОЕ  В  P6
Решение сформулированной в предыдущем разделе проблемы памяти, принятое в P6, заключается в обращении к ПУЛУ КОМАНД, извлечении из него команд, следующих за командой, требующей обращения к памяти, и выполнения до момента завершения «команды-тормоза» максимума полезной работы. В приведенном в предыдущем разделе примере процессор не может выполнить команду 2 до завершения команды 1, так как команда 2 зависит от результатов команды 1. В то же время процессор может выполнить команды 3 и 4, не зависящие от результата выполнения команды 1. Мы будем называть такое выполнение команд ОПЕРЕЖАЮЩИМ ВЫПОЛНЕНИЕМ.
Результаты опережающего выполнения команд 3 и 4 не могут быть сразу записаны в регистры, поскольку мы должны изменять состояние вычислительной системы только в соответствии с правильным порядком выполнения программы. Эти результаты хранятся в ПУЛЕ КОМАНД и извлекаются оттуда позднее. Таким образом, процессор выполняет команды в соответствии с их готовностью к выполнению, вне зависимости от их первоначального порядка в программе, то есть с точки зрения реального порядка выполнения команд P6 является машиной, управляемой ПОТОКОМ ДАННЫХ. В то же время изменение состояния вычислительной системы, например запись в регистры, производится в строгом соответствии с истинным порядком команд в программе.
Чтение из памяти данных, необходимых для команды 1, может занимать достаточно много тактов. Тем временем P6 продолжает ОПЕРЕЖАЮЩЕЕ ВЫПОЛНЕНИЕ КОМАНД, следующих за командой 1, и успевает обработать, как правило, 20-30 команд. Среди этих 20-30 команд будет в среднем пять команд перехода, которые устройство выборки/декодирования должно правильно предсказать для того, чтобы работа устройства диспетчирования/выполнения не оказалась бесполезной.
Небольшое количество регистров в архитектуре процессоров INTEL приводит к интенсивному использованию каждого из них и, как следствие, к возникновению множества мнимых зависимостей между командами, использующими один и тот же регистр. Поэтому, чтобы исключить задержку в выполнении команд из-за мнимых зависимостей, устройство диспетчирования/выполнения работает с дублями регистров, находящимися в ПУЛЕ КОМАНД (одному регистру может соответствовать несколько дублей). Реальный набор регистров контролируется устройством отката, и результаты выполнения команд отражаются на состоянии вычислительной системы только после того, как выполненная команда удаляется из ПУЛА КОМАНД в соответствии с истинным порядком команд в программе.
Таким образом, принятая в PENTIUM PRO технология ДИНАМИЧЕСКОГО ВЫПОЛНЕНИЯ может быть описана как оптимальное выполнение программы, основанное на предсказании будущих переходов, анализе графа потоков данных с целью выбора наилучшего порядка исполнения команд и на опережающем выполнении команд в выбранном оптимальном порядке.

5.5  ПРОЦЕССОРЫ  PENTIUM II,  PENTIUM III
Процессор PENTIUM-II (весна 1997г.) объединяет большинство прогрессивных свойств предшественников : PENTIUM MMX и PENTIUM PRO – и устраняет самый существенный недостаток последнего – медленную работу с 16-ти разрядными приложениями. В технологическом смысле отличительными его особенностями являются :
	Dual Independent Bus (двойная независимая шина) – впервые примененная в процессорах PENTIUM PRO для преодоления ограничений пропускной способности;
	Реализация ММХ-техногологии, повышающей скорость обработки аудио-, видео-, графической- информации – всех типов данных в современных приложениях;
	Использование технологии Dinamic Execution (динамическое выполнение команд);
	Реализация процессора в виде S.E.C.-картриджа (Single Edge Contact) для установки в SLOT 1 (см. рис. 5.7).
Архитектура двойной независимой процессорной шины подразумевает одновременную работу с двумя шинами :
•	кэш-памяти L2   и
•	системной шиной процессор-память.
Первая работает на половинной тактовой частоте процессора.
По экономическим соображениям INTEL пришлось отказаться от интегрированной в кристалл, как у PENTIUM PRO, КЭШ-памяти L2, функционирующей на частоте процессора. Но КЭШ-память первого уровня расширена до 16 Кбайт для данных и 16 Кбайт для команд, увеличено количество буферов на запись. Шина процессор-память обеспечивает одновременную конвейерную обработку параллельных транзакций.
ММХ-технология включает 57 дополнительных команд для ускорения обработки мультимедиа программ. Оба основных конкурента INTEL - AMD и CYRIX сделали ставку на процессоры К6 и 6х86МХ (М2), реализующих стандарт ММХ. Независимые производители ПО обеспечивают поддержку ММХ в своих продуктах, и не только развлекательного, но и делового применения (Adobe, Fractal, Design, Macromedia).
ММХ-приложения включают обработку изображений, проведение видео конференций, сканирование, сжатие данных и др.
Впервые примененная в процессоре PENTIUM PRO технология Dynamic Execution объединяет множественное предсказание ветвлений, анализ потоков данных (оптимизацию последовательности исполнения инструкций) и механизм условного выполнения. Все вместе позволяет процессору более эффективно манипулировать данными в сравнении с простой обработкой списка инструкций.
Новый процессор PENTIUM-III, появившийся в 1999 году, содержит дополнительные 70 команд SIMD-FP (SSE, MMX-2, NKI) и незначительные улучшения основного ядра процессора. Конструктивно процессор выполнен в «Сокетном» исполнении (т.е. КЭШ-память второго уровня расположена на кристалле процессора), что позволило в дальнейшем перевести работу КЭШ-памяти второго уровня на основную частоту процессорного ядра.

5.6  ПРОЦЕССОРЫ PENTIUM-4

В начале 21-го века появился новый процессор PENTIUM-4. Основные нововведения направлены на ускорение обработки потоковых данных, увеличено количество стадий конвейера до 20-ти. При этом каждая элементарная операция в конвейере выполняется как по восходящему, так и по спадающему фронту тактовой частоты, т.е. процессор с тактовой частотой 2 ГГц выполняет более 4-х миллиардов микроопераций в сек.
Поток в данном контексте подразумевает, что с его данными должны выполняться однотипные операции. Кроме того, данные, уже прошедшие обработку, в дальнейшем этим вычислительным процессом использоваться не будут и ими не следует засорять КЭШ. Появились инструкции загрузки данных в КЭШ, а также записи в память, минуя КЭШ.
Увеличилась тактовая частота системной шины до 200 ÷ 300 МГц. Обмен данными с памятью происходит с четырехкратной накачкой (quad pumped).
При тактовой частоте системной (фронтальной) шины процессора FSB от 100 до 300 МГц передача адресов и данных происходит быстрее. Процессор PENTIUM-4 в режиме пакетной передачи данных в пределах одного пакета через шину данных 8 * 8 = 64 бита передает 4 * 8 = 32 байта, расположенных в памяти по соседним адресам.
По шине адреса информация передается по двум фронтам стробирующего сигнала ADSTB0. По спадающему фронту передается адрес, а по нарастающему фронту – информация о типе транзакции (у предыдущих процессоров Р6 эта информация передавалась за два такта).
По шине данных информация передается с четырехкратной частотой, для чего используются пары стробирующих сигналов DSTBp и DSTBn с частотами – в два раза больше частоты системной шины FSB. Стробы сдвинуты относительно друг друга на половину своего периода (т.е. на четверть периода частоты системной шины). Передачи данных с четными адресами осуществляются по спадающим фронтам стробов DSTBp, а с нечетными адресами – по спадающим фронтам стробов DSTBn.
Таким образом за время одного периода частоты системной шины FSB через шину адреса передается начальный адрес пакета данных и тип транзакции, а через шину данных – 4 раза 8-ми байтовые передачи (т.е. один пакет 4 * 8 = 32 байта).

Основные преимущества процессоров PENTIUM-4 (Northwood)
Тактовые частоты ядра от 2 ГГц и более	Максимальная производительность для широкого спектра новых приложений для Интернета, персональных компьютеров и рабочих станций
Микроархитектура фирмы INTEL® NetBurst™	Обеспечивает максимальную производительность при обработке видео, графических изображений, работе с мультимедиа и в других сложных задачах
400, 500 и 533 МГц системная шина	Высокопроизводительный канал между процессором и остальной системой, повышающий ее пропускную способность и производительность
КЭШ-память 2 уровня 256 КБ с архитектурой Ad-vanteced Transffer Cache	Повышает производительность за счет ускорения доступа к активно используемым данным и инструкциям
Технология гиперконвейерной обработки	Увеличенная длина конвейера до 20 этапов повышает производительность процессора
Механизм ускоренного исполнения команд	Все микрооперации в конвейере выполняются по восходящему и спадающему фронтам тактовой частоты, т.е. с частотой в два раза больше
Набор потоковых SIMD-расширений SSE2	144   НОВЫЕ  КОМАНДЫ,  ускоряющие работу широкого спектра ресурсоемких приложений
128-ми разрядный блок вычислений с плавающей точкой	Высокая производительность в операциях с плавающей точкой расширяет возможности визуализации трехмерных объектов игровых приложений и научных вычислений
128-ми разрядный блок целочислен-ных вычислений с механизмом SIMD	Ускоряет обработку видео, речи, шифрование, обработку изображений и фотографий
КЭШ-память 1-го уровня с отслежи-ванием исполнения команд (Execution Trace Cache)	Значительно повышает эффективность работы КЭШ-памяти команд, обеспечивая максимальную производительность часто используем участков программного кода
Усовершенствован-ная технология динамического исполнения	Улучшенное прогнозирование ветвлений повышает производительность всех 32-х разрядных приложений за счет оптимизации последователь-ности инструкций
Контроль температуры	Используется для защиты системных плат, позволяя определить момент, когда температурный режим превышает предельно допустимый
Встроенный механизм самотестирования (BIST)	Единый механизм контроля ошибок микропрограммного ПО и больших логических матриц, а также тестирование КЭШ-памяти команд и данных, буферов трансляции (TLB) и ПЗУ
ПРОЦЕССОР   PENTIUM-4  3,06 ГГЦ   С  ТЕХНОЛОГИЕЙ
  HYPER-THREADING
14 ноября 2002 г. компания INTEL выпустила очередной процессор PENTIUM-4  с тактовой частотой 3,06 ГГц и поддержкой фирменной технологии HYPER-THREADING (НТ), с помощью которой один физический процессор представляется операционной системе как два логических CPU.
Применение двух процессоров позволяет повысить производительность всей системы. Например, «главный» процессор может заниматься основными вычислениями, а периферийный – резервным копированием данных или обменом с внешними устройствами. Расчет большого массива может быть распараллелен между всеми CPU. Или же разные процессоры будут исполнять каждый «свое» приложение, в результате чего уменьшится количество переключений между задачами и общее время выполнения программ значительно сократится.
Наиболее известны системы с «симметричным мультипро-цессированием» (SMP – Symmetric MultiProcessing) – схема с равноправными процессорами, использующими общую оперативную память. Распределение работы между ними выполняется на программном уровне (операционной системой или приложениями).

Для правильной работы двухпроцессорной системы необходима «четырехсторонняя поддержка» :
	со стороны BIOS – BIOS должна правильно опознать оба процессора, инициализировать их и заполнить соответствующие структуры данных информацией о них;
	со стороны Chipset – необходимо правильно распределить прерывания между процессорами;
	операционная система обязана поддерживать многозадачность и многопроцессорность и уметь распределять задачи между ними;
	само приложение должно уметь распараллеливать свою работу, используя несколько процессоров.

Известно, что в каждый момент времени только часть ресурсов процессора задействовано для выполнения программного кода. Например, когда выполняются операции с плавающей точкой, блок ALU простаивает (хотя мог бы считать целочисленные данные другой задачи). Поэтому можно было бы позволить параллельно выполняться еще одному процессу, используя вычислительные блоки все того же CPU. В общем случае это может быть как другое приложение, так и просто иной поток (thread) этого же приложения.
В одном физическом процессоре формируется два логических (LP –Logical Procеssor), которые разделяют между собой вычислительные ресурсы CPU. Операционная система и приложения «видят» именно два CPU и способны распределять работу между ними, как в случае полноценной двухпроцессорной системы.
На рис. 5.8 приведен пример распределения работы в одном процессоре между ALU, блоком FPU (включая команды ММХ) и блоком SIMD-FPU (8 регистров ХММ по 128 бит для работы с упакованными FP- или целочисленными данными).
Ресурсы одного физического процессора подразделяются на четыре класса:
	дублируемые;
	полностью разделяемые (Fully Shared);
	с дескрипторами элементов (Entry Tagged);
	динамически разделяемые (Partitioned).
При наличии только одного активного потока все ресурсы полностью отдаются ему, вне зависимости от того, на каком из двух логических процессоров он выполняется. Второй логический процессор в этот момент останавливается командой HALT (заведует этим операционная система).


Для реализации Hyper-Threading потребовалась небольшая модификация процессора,  и часть блоков  была дублирована (например, блоки ITLB – Instruction Translation Look-aside Buffer). Для воплощения НТ число транзисторов в процессоре увеличилось не более, чем на 5%.
Технология Hyper-Threading не является обязательной – процессор может работать и в обычном режиме; отключение НТ, как правило, производится отдельным пунктом в BIOS Setup.

5.7   ОСОБЕННОСТИ  АРХИТЕКТУРЫ  CORE

Гиперконвейерная архитектура процессоров PENTIUM 4 (NetBurst) во многих тестах не могла конкурировать с процессорами предыдущего поколения – PENTIUM ІІІ. Длинноконвейерная NetBurst, созданная для достижения высочайших тактовых частот, исчерпала свой потенциал, причем гораздо раньше, чем планировалось. Переход на более «тонкие» техпроцессы мог лишь отсрочить, но не снять проблему дальнейшего наращивания быстродействия. Особенно те ее аспекты, которые касаются значительного повышения энергопотребления и теп-ловыделения.
Теперь по инициативе INTEL важнейшей характеристикой становится – удельная производительность на Ватт потребляемой энергии. Поэтому для повышения производительности своих многоядерных процессоров CORE фирма INTEL вернулась к архитектуре PENTIUM ІІІ с увеличенным объемом кеша второго уровня до 4 Мбайт и более.
В основе архитектуры CORE лежат пять ключевых технологий. Это обусловило значительный прирост производительности при одновременном снижении частоты и энергопотребления.
Wide Dynamic Execution – под этим названием скрывается увеличение числа выполняемых микроопераций с трех до четырех за один такт, что существенно влияет на такие параметры, как «производительность на ватт» и «производительность на мегагерц».
Intelligent Power Capability представляет собой целый набор технологий, направленных на существенное снижение энергопотребления. В частности, неиспользуемые в данный момент функциональные блоки могут «засыпать», сохраняя способность очень быстро включаться в случае необходимости.
Advanced Smart Cache – оба ядра имеют возможность гибко распределять между собой общую кэш-память второго уровня, и в случае, например, если загрузка одного из них выше, оно использует весь свободный объем. Такой подход позволяет значительно снизить частоту обращений к основной RAM, что в конечном итоге вновь приводит к повышению производительности и сохранению ценных ватт энергии.
Smart Memory Access является комплексом технологий по оптимизации алгоритмов доступа к памяти и предварительной загрузки данных. Теперь они гибче и позволяют, например, в случае необходимости производить загрузку перед записью, при этом отслеживая и оперативно разрешая возникающие конфликты.
Advanced Digital Media Boost – еще одна технология оптимизации, направленная на ускорение воспроизведения мультимедиаконтента. В частности, появилась возможность исполнения за один такт любых инструкций набора SSE, использование которого становится все более популярным.
5.7.1  Процессоры  Intel  Core  i7

Процессор Intel Core i7 с ядром Nehalem появился в конце 2008 г. и базируется на наработках Core, в то время как первые Core 2 Duo очень сильно отличались от старых Pentium 4 (Netburst) на архитектурном уровне. 
До недавнего времени одним из самых мощных и несомненных преимуществ архитектуры Athlon 64 (а затем и Phenom) можно было назвать встроенный в процессорах AMD контроллер памяти, интегрированный непосредственно в CPU, тогда как платформа Intel предусматривала его размещение в северном мосту. Разумеется, благодаря этой схеме решения AMD обладают ощутимо меньшими задержками при работе с ОЗУ. Также микросхема северного моста значительно упрощается (и в ряде случаев вообще может быть объединена с южным мостом).
В большой степени благодаря встроенному контроллеру ОЗУ чипы Athlon 64 в играх (и не только) показывали лучшие результаты, нежели Pentium 4.
Как и ожидалось, это отставание наверстано в Соrе i7 – процессор содержит встроенный трехканальный (!) контроллер памяти DDR3. Вовсе не обязательно использовать все три канала – падение производительности в двухканальном режиме будет не столь велико, как между одно- и двухканальным.
Полезность и преимущества следующего нововведения, которым Intel также лишь повторяет достижение AMD, не так однозначна. Дело в том, что чип Nehalem представляет собой монолитный кристалл – все четыре ядра реализованы на одной подложке, как и у Phenom. Ранее четырехъядерные процессоры Intel Core 2 Quad были, по сути, «склеены» из двух двухъядерных. 
Новые Core i7 в рамках 45-нанометрового техпроцесса реализуют именно монолитную четырехъядерность, несмотря на сложности и подводные камни в производстве.
Говоря об архитектурных инновациях Nehalem, нельзя не продолжить параллели с CPU AMD. Помимо интегрированного контролера памяти и четырех ядер, размещенных на одном кристалле, в Соте i7 появляется общая КЕШ-память третьего уровня, как и в Phenom. 
В настольных чипах Соте i7 (с ядром Bloomfield, которые вышли па рынок первыми) ее размер составляет 8 МБ. При этом кеш LI остается неизменным – по 64 КБ на ядро, а вот кеш L2, в отличие от Penryn, становится выделенным. Каждое ядро получает в свое распоряжение собственные 256 КБ L2 Cache, латентность которого значительно снижена по сравнению с предшественником.

Структура Кэш-памяти Соте i7
32 КБ     L1 
Кэш-Кода	32 КБ     L1 
Кэш-Кода	32 КБ     L1 
Кэш-Кода	32 КБ     L1 
Кэш-Кода
32 КБ     L1 
Кэш-Данных	32 КБ     L1 
Кэш-Данных	32 КБ     L1 
Кэш-Данных	32 КБ     L1 
Кэш-Данных
256 КБ
L2  Кэш-
Данные + Код	256 КБ
L2  Кэш-
Данные + Код	256 КБ
L2  Кэш-
Данные + Код	256 КБ
L2  Кэш-
Данные + Код
8 МБ   L3  Кэш
Общий для всех ядер

Еще одно нововведение, которое, несомненно, можно характеризовать как значительное – новая шина для соединения ключевых компонентов по схеме «точка-точка» QP1 (Quick Path Interconnect). Данный интерфейс обеспечивает чрезвы-чайно высокую ско-рость передачи данных – до 12,8 ГБ/с в каждую сторону, что превосходит показатели не только предшествующей Quad Pumped Bus, но и Нурсг-Transport 3.0 в новых Phenom от AMD. Основные преимущества от QPI станут очевидны при серверном применении – прямая независимая шина между несколькими процессорами в рамках одной системы должна обеспечить большой прирост производительности.
В рамках архитектуры Nehalem вновь реализована технология Hyper-Threading, которая уже использовалась Intel в позапрошлом поколении процессоров. Теперь возврат произошел на новом технологическом витке, и сама функция подверглась некоторой оптимизации. Новое название – SMT (Simultaneous Multi-Threading), однако суть не изменилась – речь идет о возможности одновременной обработки двух потоков на одном ядре. В случае с четырехъядерным Core i7 это даст 8 (восемь!) одновременно исполняемых потоков на один физический процессор.
Дальнейшее развитие получил набор инструкций SSE – Nehalem поддерживает версию 4.2, которая содержит семь новых инструкций, ориентированных па ускорение выполнения конкретных специфических задач.
Также стал более эффективен алгоритм Loop Stream Detector, предназначенный для определения циклов небольшой длины. Теперь этот блок вынесен за пределы конвейера по декодированию инструкций и обзавелся буфером, в котором хранится 28 микроопераций.
Механизм предсказания ветвлений в архитектуре Nehaletn претерпел ряд оптимизаций и должен стать точнее, ведь теперь он состоит из двух уровней. Второй из них предназначен для более глубокого анализа ветвлений и накопления их статистики, что принесет большие плоды при выполнении серверных задач.
Энергоэффективность архитектуры Nehalem продолжает оставаться приоритетным направлением для Intel. В Core i7 содержится специальный блок PCU (Power Control Unit), предназначенный для мониторинга и управления питанием процессора. По сути, PCU – это целый микроконтроллер, т. е. процессор в процессоре. На его реализацию потрачен 1 млн транзисторов. PCU, основываясь на данных сенсоров и датчиков, может полностью выключать отдельные ядра и блоки CPU. 
Технология Turbo Boost позволяет отключать часть ядер при работе в приложениях, не (полностью) использующих многозадачные способности Nehalem, а частота оставшихся — повышается, при этом центральный процессор в целом не выходит за рамки своего TDP. За счет этого достигается прирост производительности в неоптимизированных под многопоточность задачах. В четырехъядерных Core i7 могут быть полностью отключены два либо три ядра, и во втором случае частота оставшегося единственного ядра будет поднята еще больше. Таким образом, речь, по сути, идет о ди-намическом «саморазгоне» процессора, реализованном на аппаратном уровне!

Два основных отличия Core i7 от Core 2 – встроенный в процессор трехканальный контроллер памяти и новая шина Quick Path Interconnect вместо Front Side Bus. Эти нововведения потребовали смены упаковки и, соответственно, разъема: суммарное число контактов в нем достигло 1366. Таким образом, новые CPU не совместимы со старыми материнскими платами, и наоборот. Более того, несовместимым с новой платформой окажется и абсолютное большинство уже выпушенных систем охлаждения: сам процессор по размеру значительно превышает Core 2, процессорный разъем тоже, поэтому и крепежные отверстия на материнских платах не совпадают с таковыми на продуктах предыдущего поколения.
Как уже было сказано, контроллер памяти в Core i7 перемещен из северного моста в кристалл процессора. Благодаря этому удалось устранить сразу несколько проблем: радикально снизить латентность памяти, увеличить ее пропускную способность и избавиться от «бутылочного горлышка» в виде шины FSB, через которую пpoцессору приходилось не только обмениваться данными с ОЗУ, но и взаимодействовать со всем и другими устройствами в системе, начиная с видеокарт и заканчивая периферийными разъемами вроде USB. Именно FSB была сдерживающим фактором при наращивании производительности для многопроцессорных систем: ширины шины просто не хватало дли обмена данными между процессорами. Теперь эта проблема устранена, а замена FSB на Quick Palh Interconnect – отвечает сугубо за взаимодействие с устройствами на шинах РС1 и PCI Express посредством северного и южного мостов.
Таким образом, северный мост чипсета больше не отвечает за работу с оперативной памятью, а является просто контроллером ввода-вывода. В его обязанности входят управление и обмен данными с устройствами на шине PCI Express 2.0. в основном видеокарт. Разработчики материнских плат имеют в своем распоряжении до 32 линий этой шины, чего вполне хватит для конфигураций 2x16 или 4x8. Учитывая удвоенную пропускную способность второй версии PCI Express, недостатка в ширине шины для современных видеокарт не будет ни в одном из вариантов.
С процессором контроллер общается по шине QPI с частотой 6,4 ГТ (млрд транзакций) в секунду (25,6 ГБ/с) для модели Core i7 965 Ex-treme. Как видим, пропускная способность QP1 удвоилась по сравнению с FSB на частоте 400 МГц, при этом шина не используется для работы с ОЗУ, что освобождает значительную часть канала.
К северному мосту посредством четырех линий PCI Express 2.0 подключен второй контроллер ввода-вывода – уже известный нам по 4-й серии чипсетов Intel 1CH10. На него возложена работа со всеми периферийными устройствами.

5.7.2  Процессоры  AMD   Phenom II

Фактически архитектуру Phenom II нельзя назвать новой, даже во внутренней номенклатуре AMD она значится как К10.5. Процессоры с кодовым именем Deneb основаны на предыдущем поколении – тех самых неудачных Phenom (Agena), однако производство по 45-нанометровому техпроцессу и несколько ключевых улучшений позволили устранить большинство недостатков.
Новинки сохранили сильные места предшественников. Встроенный контроллер памяти дает возможность радикально снизить задержки при обращении к RAM и увеличить пропускную способность. «Нативная четырехъядерность», называющаяся у АМО Direct Connect Architecture, представляющая собой расположение всех ядер процессора в одном кристалле, способствует снижению потерь при обращении ядер в чужой кэш L2. 
Остановимся на контроллере памяти. В Deneb он был разработан заново, что позволило реализовать поддержку как привычной памяти DDR2-1066, так и более современной DDR3-1333. Кроме очевидной выгоды в виде совместимости с уже существующими платформами, это дало возможность добиться уменьшения задержек при доступе к памяти примерно на 10% (со 107 нс для первых Phenom до 95 нс для Phenom II). 
Как и ранее, контроллер работает в двухканальном режиме с возможностью переключения между режимами обращения к RAM (unganged и ganged, т.е. по половине доступного объема памяти на каждый канал или двухканальный доступ во все адресное пространство). Напомним, что у Intel Core i7 контроллер памяти трехканальный, что обеспечит ему большую производительность при установке трех модулей памяти.
В целом, поддержка обоих стандартов памяти – не такая уж сверх-сложная задача, поскольку DDR2 и DDR3 на стороне контроллера отличаются только напряжениями, а основные различия в расположении контактов и терминации находятся на стороне материнской платы и модулей. 
Иерархия кэшей в новых процессорах осталась прежней: на каждое ядро приходится 128 КБ кэш L1 (по 64 КБ для инструкций и данных) и 512 КБ эксклюзивного кэша L2. Значительное изменение претерпел только кэш L3, размер которого увеличился с 2 до 6 МБ, а латентность уменьшилась на два такта по сравнению с Agena. Если сравнивать архитектуру AMD с Intel Core i7, то иерархия кэшей у них одинакова, отличаются лишь объемы и скорость. У AMD K10.5 задержки L1 составляют три такта против четырех у Nehalem. При этом у Core i7 в два раза меньше кэша второго уровня на ядро (всего 256 КБ), однако у него гораздо меньшая латентность — 11 тактов против 15 у Phenom II. В целом, оба разработчика сходятся во мнении, что размер кэша L2 играет меньшую роль, нежели его производительность, если процессор оборудован достаточно быстрым и емким общим L3. Именно малый объем кэша был одной из основных причин низкой производительности первых Phenom во многих приложениях: для постоянной полной загрузки вычислениями всех четырех ядер нужно быстро передавать значительные объемы данных, которые просто не могут уместиться в 2 МБ. В результате процессору приходилось часто обращаться к оперативной памяти, теряя такты на ожидание. Шести мегабайт L3 должно хватать для большинства ситуаций. Если ядра обрабатывают независимые потоки с разными данными, то раздельный L2 для каждого из них не будет помехой, так как ядрам не нужно обмениваться содержимым кэшей, а если идет многопотоковая обработка одного набора данных, то общий быстрый L3 выгоднее объемного, но раздельного L2 в случае Core 2.
Сами ядра процессора не претерпели изменений, а просто были подвергнуты уменьшению для 45-нанометрового техпроцесса. Это позволило увеличить тактовые частоты до 3 ГГц у топовой модели Phenom II Х4 940, при этом результаты тестирований демонстрируют, что запас частоты еще есть. Тепловой пакет CPU остался на уровне 125 Вт (85 Вт для младших моделей), в основном это объясняется наличием большого объема кэша L3. 
Несмотря на переход на более миниатюрный техпроцесс и использование технологии SOI, напряжения питания процессоров практически не уменьшились, а верхний порог даже достиг 1,5 В при 1,3 В для AMD Phenom X4 9950. Тем не менее потребляемая мощность заметно снизилась по сравнению с предыдущим поколением: на частоте 3 ГГц Phenom II Х4 940 потребляет около 190 Вт против 210 Вт у Phenom X4 9950 на 2,6 ГГц. 
Кроме того, AMD устранила проблему с технологией Cool 'n' Quiet. Напомним, что архитектура Phenom позволяет задавать множители ядер динамически и независимо друг от друга. AMD воспользовалась этим для реализации системы энергосбережения, однако особенности диспетчера потоков в Windows привели к резкому снижению производительности при активации этой функции. Если какое-то ядро простаивало, процессор переводил его в экономный режим, снижая частоту вдвое. В какой-то момент Windows могла перевести по-ток с работающего на полной скорости ядра на замедленное, потеряв в быстродействии до 15%. В Phenom II AMD заблокировала возможность автоматического снижения частоты для отдельных ядер. Теперь, если хоть одно ядро сильно загружено, все четыре будут работать на максимальной частоте, а если уровень загрузки позволяет переключиться в экономный режим — весь CPU снижает частоты. Кроме того, для Phenom II количество состояний процессора (p-states) расширено с двух до четырех, и минимальная частота составляет всего 800 МГц. 
Также в новом поколении Phenom «научился» выгружать данные из кэшей L1 и L2 полностью простаивающих ядер в кэш L3, частоты которого задаются отдельным генератором, и переводить их в режим сна. Таким образом, они потребляют только токи утечки. Тем не менее новинки AMD значительно уступают по экономичности Intel Core i7, поскольку не умеют совсем отключать ядра от питания. Core 2 Quad также выглядят немного выигрышнее, поскольку Intel использует сплав high-k на основе гафния для металлических затворов транзисторов, демонстрирующий заметно меньшие токи утечки, чем применяемые AMD материалы.
Процессоры AMD Phenom IІ выпускаются в двух вариантах с разъемами Socket AM2+ и Socket АМЗ. Первый поддерживает установку только в материнские платы с разъемом АМ2+, работающие с памятью DDR2. 
CPU с Socket АМЗ обратно совместимы с Socket AM2+, т. е. их можно устанавливать как в материнские платы с новым разъемом и DDR3, так и в платформы предыдущего поколения. Для обеспечения работоспособности достаточно просто обновить прошивку BIOS. В принципе, ничего не мешает производителям материнских плат реализовать поддержку Phenom II и в платах с разъемом Socket AM2, однако официальной валидации такой комбинации со стороны AMD нет. Что касается АМЗ, то процессоры с этим разъемом имеют на две контактные ножки меньше, а в гнезде на соответствующем месте нет отверстия, потому Phenom ІІ Socket АМ2+ установить в новую материнскую плату попросту невозможно. Вероятнее всего, это сделано сугубо из маркетинговых побуждений, так как архитектурно модели с разными разъемами идентичны. Единственная разница между моделями одного класса – частота северного моста и кэша L3, которая для CPU с Socket AM2+ составляет 1,8 ГГц, а для АМЗ – 2 ГГц. Впрочем, на производительности это практически не сказывается.
Материнские платы для Phenom II с обоими разъемами в данный момент основываются на чипсетах AMD 790FX, 790GX, 790Х, 780G с южными мостами SB600 и SB750. Механизм Load Line Calibration, впервые введенный AMD SB750 и заметно улучшающий стабильность задающей частоты, теперь интегрирован в процессор. Это позволяет рассчитывать на то, что частотный потенциал, демонстрируемый новинками, будет сохраняться и при установке их в сравнительно давно выпущенные материнские платы с южным мостом SB600. В этом году будут представлены новые наборы логики 800-й серии для Socket АМЗ и серверной платформы Socket F+, которые, кроме внутренних усовершенствований, направленных на повышение быстродействия чипсета, привнесут поддержку SATA 6 Гб/с и 14 портов U S В 2.0. 
Подводя итог, отметим, что AMD Phenom II – это, очевидно, эволюционное развитие уже существующей архитектуры. Разработчики сконцентрировались на основных недостатках предыдущего поколения: низкую экономичность устранили с помощью нового техпроцесса и улучшенной технологии Cool 'n' Quiet, недостаточную производительность – повышенными частотами и расширенным кэшем. Кроме того, не встречавшаяся ранее поддержка работы встроенного контроллера с двумя стандартами памяти должна обеспечить заждавшихся потребителей возможностью как мо-дернизировать существующие ПК, так и собрать новые из современных комплектующих. 
Фирма AMD абсолютно рационально выходит из ситуации с бракованными кристаллами: 9 февраля 2009 г. компания представила пять новых моделей процессоров с разъемом Socket AM3, четыре из которых содержат либо отключенные части кэша, либо одно неактивное ядро. Две из них – Phenom II Х4 810 и 805 – оснащены сокращенным до 4 МБ кэшем L3 и работают на частотах 2,6 и 2,5 ГГц соответственно. Две другие, с индексами 720 и 710, относятся к семейству среднего класса Phenom II ХЗ, работают на частотах 2,8 и 2,6 ГГц и снабжены полным объемом L3 – 6 МБ. Наконец, пятый процессор – AMD Phenom II X4 910 – является первым представителем топовой линейки компании для Socket AM3. Он характеризуется тактовой частотой 2,6 ГГц. Во всех этих CPU контроллер памяти и кэш L3 работают на частоте 2 ГГц против 1,8 ГГц у моделей для Socket АМ2+.
Архитектурные улучшения в Phenom II Х4 позволяют этим продуктам составить серьезную конкуренцию нынешнему поколению CPU среднего и высокого классов производства Intel. Они фактически не уступают Core 2 по быстродействию и стоимости платформы. При этом значительно более быстрые Core i7 потребуют для построения платформы заметно больших затрат, потому прямой конкуренции между этими продуктами нет.


5.7.3   Процессор Intel Sandy Bridge:

В процессорах Sandy Bridge впервые на одном кристалле объединены вычислительные блоки, графическое решение и системный агент, включающий контроллеры памяти и PCI Express. При этом монолитный чип производится по наиболее совершенному на текущий момент 32-нанометровому техпроцессу. Плотная интеграция всех блоков позволила на одном кристалле площадью порядка 216 мм2 разместить почти миллиард транзисторов (995 млн).
Одно из важнейших нововведений в архитектуре Sandy Bridge – Кэш инструкций L0, или кэш декодированных микроопераций (МОП), позволяющий увеличить производительность и энергоэффективность. Достигается это за счет буферизации всех МОП, полученных после преобразования инструкций х86. И если входной поток команд содержит совпадения с ранее декодированным, то результаты работы декодера загружаются сразу из Кэша L0. При этом цепи декодеров, которые являются сложной и «прожорливой» частью х86 процессоров, выключаются. Емкость L0 – 1536 МОП, что эквивалентно 6 КБ Кэша инструкций (L1). По оценкам Intel, степень попадания в L0 составляет примерно 80 %. (Что-то похожее было в процессорах PENTIUM-4 – Кэш декодированных инструкций L1 вместо Кэша команд).
Объем Кэша L1 для команд и данных не изменился и равен 32 + 32 Кб соответственно. Но его пропускная способность, а также размеры буферов записи и чтения, разделенных между исполнительными блоками ядра, были увеличены.
Рост интеграции, а в будущем и количества ядер привел к отказу Intel от обычной перекрестной топологии, когда каждое ядро имело свое собственное подключение к общей кеш-памяти (L3), в пользу кольцевой межкомпонентной шины. Также она заменит и QPI, которая применялась в Arrandale/Clarkdale для связи с контроллером памяти и графикой и являлась ограничителем производительности. Теперь для сообщения всех ключевых компонентов Sandy Bridge (графического и процессорных ядер, Кэша L3 и системного агента) используется высокоскоростная кольцевая шина. Это упрощает разводку и значительно улучшает возможности масштабирования. При частоте 3 ГГц производительность кольцевой шины оценивается на уровне 96 ГБ/с на соединение. Благодаря тому, что при пересылке данных всегда выбирается кратчайший маршрут, в некоторых случаях у кольцевой шины будет и меньшая латентность.
Важные изменения претерпел Кэш L3, получивший в интерпретации Intel название Last Level Cache (LLC). Теперь он не является частью блока Uncore (именуемого в Sandy Bridge как системный агент) и работает на частоте процессорных ядер. При этом Кэш разбит на равноправные сегменты объемом 2 МБ, закрепленные за своим ядром, которое может обращаться к нему не только через кольцевую шину, но и напрямую. В случае необходимости банки могут отключаться. Так, в моделях Core i5, где общий объем L3 составляет 6 МБ, одно ядро лишено своего сегмента, но благодаря кольцевой шине целостность Кэша не нарушается. Подобное деление на банки позволяет увеличить скорость Кеша L3, масштабируемую с ростом их количества, и на примере четырехъядерного процессора с частотой 3 ГГц обеспечивает совокупную пропускную способность в 384 ГБ/с.
Блок под названием «системный агент» (System Agent) является, по сути, северным мостом и содержит двухканальный контроллер памяти DDR3, PCl-Express 2.0, DMI, дисплейные интерфейсы, модуль аппаратного декодирования видео и модуль управления питанием (Power Control Unit, PCU). Как и все элементы архитектуры, он подключен к кольцевой шине. Благодаря этому, а также доработке контроллера памяти латентность после регресса в процессорах Clarkdale вернулась на уровень Lynnfield, а пропускная способность стала еще выше. 
Формально поддерживается DDR3-1067 или DDR3-1333, но на практике есть множители даже для DDR3-2133 (только с чипсетом Intel P67). Системный агент, а также остальные два домена (первый – процессорные ядра и Кэш L3, второй – графическое ядро) имеют собственную схему тактирования и питающее напряжение. Модуль управления питанием собирает данные о загрузке, потребляемом токе и нагреве различных узлов процессора и в соответствии с ними может переводить их как в режим экономии энергии, так и в режим повы-шенного быстродействия. За последнее отвечает обновленная технология Intel Turbo Boost, главная особенность которой – возможность разгона на непродолжительное время (до 25 с) ядер процессора и GPU до уровня, превышающего TDP, если до этого CPU какое-то время простаивал. Это логично, ведь система охлаждения не нагревается моментально, и потому может отводить больше тепла после периода невысокой нагрузки. Подобная работа Turbo Boost позволит повысить отзывчивость и производительность в задачах, требующих высокого быстродействия на короткое время.
Важным нововведением процессоров Sandy Bridge можно считать набор инструкций AVX (Advanced Vector Extensions), которые являются дальнейшим усовершенствованием SSE. AVX позволяет работать с 256-битовыми векторными инструкциями и потенциально способен заметно ускорить работу с мультимедийными данными, однако в этом случае необходима поддержка со стороны разработчиков программного обеспечения. 
Intel сделала серьезные архитектурные оптимизации с тем, чтобы AVX функционировал очень быстро, а программисты были заинтересованы активнее использовать новые возможности.

Интегрированная графика

Встроенное видеоядро стало неотъемлемой частью второй генерации процессоров Intrel Core. Новые графические решения были названы Intel HD Graphics 3000/2000. Первое содержит 12 вычислительных блоков, а упрощенная модификация – 6. Благодаря более тесной интеграции встроенное графическое ядро получило массу преимуществ. Быстрая кольцевая шина позволяет GPU задействовать для своих нужд процессорную Кэш-память последнего уровня, что в какой-то степени компенсирует сравнительно невысокую скорость си-стемной ОЗУ, которую видеоядро использует в качестве кадрового буфера.
Из нововведений также отметим поддержку DirectX 10.1, OpenGL 3.0, аппаратное транскодирование видео различных форматов, улучшенные функции постобработки, появление возможности передачи посредством HDMI 1.4 на устройство отображения стереокартинки для просмотра Blu-Ray 3D.
Функция авторазгона графического ядра, которая ранее присутствовала только в мобильных чипах Arrandale, теперь используется и для десктопных CPU. В ряде моделей частота ядра под нагрузкой увеличивается до 1350 МГц. И это приносит свои плоды. Согласно результатам проведенного экспресс-теста, Core i5-2500K, оснащенный интегрированным Intel HD Graphics 3000, набирает порядка 4120 баллов в ЗDМагк 06, а это уровень наиболее доступных дискретных видеокарт. 

Разгон процессоров

Разгон процессоров с архитектурой Sandy Bridge предполагает ряд нюансов. Особенность новой платформы состоит в том, что генератор базовой частоты теперь находится непосредственно в чипсете, а не в отдельной микросхеме на материнской плате. При этом используется единая тактовка для всех частот различных узлов системы. Потому для разгона CPU привычный метод увеличения BCLK уже не работает. После повышение базовой частоты всего лишь до 104-105 МГц система утрачивает стабильность. Так что экспериментировать с частотами можно лишь увеличивая процессорный множитель. Соответственно, для опытов необходимы чипы с разблокированным коэффициентом умножения (имеющие в названии суффикс К), стоимость которых вряд ли опустится ниже $200. Впрочем, модели процессоров, не имеющие свободного множителя, также поддаются разгону, но только на 4 ступени (400 МГц). Что самое любопытное, Turbo Boost в данной ситуации продолжит свою работу по заданному алгоритму, считая базовой уже увеличенную частоту чипа, безусловно, в обоих случаях понадобится материнская плата с чипсетом Intel P67.
Однозначно говорить об упрощении процесса разгона можно лишь в том случае, если довольствоваться сравнительно скромными достижениями на этом поприще. А вот выжимать предельные МегаГерцы по-прежнему нелегко. Параметров, влияющих на результат, достаточно много. Да и BIOS/EFI материнских плат в данном отношении на начальном этапе еще далеко не идеальны. Так, совсем недавно производители массово обновляли прошивки, вводя параметр Internal PLL Overvoltage, который заметно увеличивает порог разгона. Наш тестовый экземпляр процессора Core i7-2600K после повышения напряжения питания до 1,4 В стабильно проходил тесты на 4,9 ГГц, но на 5 ГГц загрузить ОС уже не удавалось.

Продуктовая линейка

Intel сразу анонсировала почти три десятка мобильных процессоров и чипов для настольных систем. Однако на рынке они появятся не одновременно. Говоря о десктопных моделях, отметим, что первыми в продажу поступили четырехъядерные чипы средней ценовой категории, чуть позже будут представлены более доступные двухъядерные СРU.
Intel сохранила уже хорошо известные названия семейств процессоров – Core i7/i5/i3. Однако для обозначения модели теперь применяется четырехсимвольный номер. Также в некоторых случаях используется дополнительный буквенный суффикс, который указывает на принадлежность CPU к специальной категории: К – процессоры с разблокированным коэффициентом умножения, S – экономичные устройства (TDP 65 Вт), Т – ультраэкономичные чипы (TDP 35-45 Вт).
Анонсированная на начало 2011 года линейка выглядит вполне сбалансированной. Традиционно старшие в серии Core i7 имеют максимальную тактовую частоту (3,4 ГГц), 8 МБ Кэш-памяти LLC и обладают Hyper-Threading. Чипы Core i5 работают на более низкой частоте (2,8-3,3 ГГц), содержат 6 МБ Кэш-памяти последнего уровня и не поддерживают технологии логической многопоточности. Вскоре в продажу поступят двухъядерные процессоры из новой линейки Core i3, у которых меньшая емкость буфера, отсутствует технология динамиче-ского разгона Turbo Boost, зато и стоимость будет заметно ниже уже представленных чипов.

Чипсеты

Еще со времен появления Clarkdale, когда контроллер памяти и графическое ядро переехали под крышку процессора, чипсет фактически выполняет представительские функции, держа на связи CPU и периферийные устройства. Для работы с Sandy Bridge инженеры подготовили целый набор микросхем, однако базовыми для настольных платформ будут Intel P67 и Н67. Во многом новые чипсеты схожи с предшественниками пятой серии, хотя отличий тоже предостаточно. Прежде всего отметим поддержку SATA 6 Гб/с. Два из шести портов теперь могут передавать данные на скоростях до 600 МБ/с. Для жестких дисков, линейные трансферы которых лишь недавно превысили 150 ГБ/с, это не так важно, однако лучшие модели твердотельных накопите-лей уже сейчас получат преимущества при подключении с помощью более производительного интерфейса. Новые чипсеты позволяют организовать RAID-массивы уровней 0, 1, 0+1 и 5, а также гибридную конфигурацию Matrix RAID.
Процессор с чипсетом связаны по шине DMI, причем ее пропускная способность увеличилась до 2 ГБ/с в каждом направлении. Отдельного внимания заслуживает поддержка до восьми полноскоростных портов PCI Express xl версии 2.0 (у Intel x5 скорость передачи чипсетных линий соответствовала стандарту 1.1). Обеспечивается работа до 14 портов USB 2.0. А вот долгожданного USB 3.0 так и не появилось, хотя устройств, в которых он уже есть, на рынке сейчас достаточно много, и их количество будет только увеличиваться. Отсутствие поддержки компания аргументирует неготовностью экосистемы и небольшим спросом. Однако мы целиком не отбрасывали бы предположение о том, что Intel не хочет укреплять позиции USB 3.0 перед запуском собственного многообещающего интерфейса Light Peak, который формально не должен конкурировать с USB 3.0 и, по словам разработчиков, уже практически готов к внедрению и началу коммерческой эксплуатации. Так или иначе, но подавляющее большинство плат с L6A1155, за исключением самых доступных моделей, будут оснащаться дополнительными контроллерами USB 3.0 от сторонних производителей. Нативную же поддержку прогрессивного стандарта USB в чипсетах Intel обещают реализовать лишь в 2012 году.
Волевым решением Intel отказалась от поддержки шины PCI в новых наборах логики. Производителям материнских плат, которые захотят сохранить соответствующие порты, понадобится устанавливать дополнительные контроллеры, представляющие собой мост PCI Express - PCI.
Что касается функциональных отличий Intel P67 и Н67, то на этот раз Intel существенно разграничила область применения каждого из них. Intel P67 отведена роль чипсета для платформ с дискретной графикой и возможностью устанавливать в системе несколько видеокарт (CrossFire и SLI). Кроме того, он позволяет разгонять процессоры путем увеличения множителя частоты и имеет повышающие коэффициенты для моделей памяти вплоть до режима DDR3-2133. А вот Intel H67 в первую очередь подойдет тем, кто планирует использовать интегрированную графику и их не смутит тот факт, что данный чипсет не предназначен для разгона CPU, а поддержка ОЗУ ограничена DDR3-1333. В то же время он позволяет увеличивать частоту графического ядра.
Что касается практической стороны работы чипсетов, то сами микросхемы нагреваются достаточно слабо, их заявленный уровень энергопотребления составляет порядка 6 Вт. 

Особенности архитектуры  AMD  FX-815O – Bulldozer

В основе чипов AMD Bulldozer лежат модули с двумя вычислительными ядрами х86. При этом последние не являются полностью автономными – некоторые ресурсы общие для обоих ядер. В частности, блок предварительной выборки, декодер инструкций, FPU и КЕШ-память второго уровня (L2). 
Монолитный двухъядерный модуль обеспечивает одновременное выполнение двух потоков, но с определенными оговорками. По расчетам производителя, такой подход вполне оправдан и позволяет получить порядка 80% эффективности полноценных физических ядер. Однако при этом значительно уменьшается количество транзисторов, а соответственно, площадь кристалла и его энергопотребление.
С учетом новой структуры внутренняя архитектура была очень серьезно переработана, что фактически затронуло все исполнительные блоки. Сходства с К10, которая использовалась для чипов Phenom II и Athlon II, практически нет. AMD внедрила поддержку инструкций AVX, SSE 4.2 и AES-NI и добавила собственные наборы FMA4 и ХОР.
Как и топовые процессоры Phenom, чипы FX получили трехуровневую систему кеширования. Однако ее организация также заметно отличается о той, что была у предшественников. Кеш-данных L1 уменьшился с 64 КБ до 16 КБ, в то же время существенно возросла его пропускная способность. L2 объемом 2 МБ является общим для обоих ядер каждого модуля. В зависимости от количества последних суммарная емкость КЕШ-памяти второго уровня в процессоре AMD FX может составлять от 4 до 8 МБ. Латентность его несколько увеличена – плата за оптимизацию для работы на повышенных частотах. Чипы с архитектурой Bulldozer также оснащены L3-кешем объемом 8 МБ. Учитывая эксклюзивную схему работы, суммарный объем буфера довольно впечатляющий как для десктопных моделей. 
Усовершенствованный алгоритм предвыборки данных позволяет надеяться, что скорость подсистемы памяти будет увеличена. Что касается непосредственно ОЗУ, то CPU FX поддерживают модули DDR3-1866 в двухканальном режиме.
Для производства AMD FX используется 32-нанометровый техпроцесс с технологией SOI, аналогичный применяемому при изготовлении APU Llano. Чипы выпускаются на мощностях родственной компании GlobalFoundries. В основе CPU лежит восьмиядерный кристалл площадью 315 мм2. Согласно топологии, большая его часть отводится под КЕШ-память, потому неудивительно, что суммарное количество транзисторов в данном случае составляет впечатляющие 2 млрд. 
Для сравнения: шестиядерные Phenom II Х6 (Thuban) включают «всего» 904 млн транзисторов, но из-за 45-нанометрового техпроцесса площадь кристалла равна 346 мм2. Учитывая разницу в площади, можно предположить, что себестоимость чипов FX ниже, чем у предшественников.
Для четырех- и шестиядерных моделей AMD FX будет использоваться тот же кристалл, что позволит эффективнее распорядиться чипами, имеющими определенные дефекты.

Turbo Core

Технология динамического увеличения частоты Turbo Core ранее использовалась компанией AMD для шестиядерных Thuban и APU Llano. Процессоры FX имеют новый механизм и алгоритм работы данной функции. В случае, когда под нагрузкой энергопотребление чипа укладывается в рамки его TDP, а температура не превышает заданного значения, частота может автоматически увеличиваться (100-300 МГц) даже в ситуации, когда активны все ядра (All Core Boost). Если же как минимум половина модулей простаивают, то AMD FX может переходить в режим Max Turbo Boost, повысив напряжение питания и весьма значительно тактовую частоту работающих блоков (до 900 МГц).
AMD также озаботилась улучшением экономичности новых чипов. Учитывая рост количества вычислительных ядер, полагаться только на эффект от использования более тонкого техпроцесса нельзя. При отсутствии нагрузки на оба процессорных ядра в рамках одного модуля и переходе их в состояние энергосбережения силовые транзисторы позволяют отключать питание от данного узла, снижая общее потребление CPU.

Логическая поддержка

Как и у предыдущей десктопной платформы AMD, контроллер шины PCI Express 2.0 остался прерогативой северного моста чипсета, а не перебрался под крышку процессора. Именно количество поддерживаемых линий данного интерфейса, а вследствие и способность построения конфигураций с несколькими видеокартами стали определяющими отличиями новых наборов логики для чипов Zambezi. 
В распоряжении топового AMD 990FX находятся 42 линка с возможностью компоновки на графические нужды как 2х16х или 4х8х. AMD 990X имеет 26 линий и позволяет подружить только две видеокарты в режиме CrossFireX или SLI в конфигурации 2х8х. Ну а AMD 970 при таком же числе линков PCI-E предлагает довольствоваться одним адаптером. 
Во всех случаях периферию обслуживает южный мост SB950, который не несет каких-либо интересных новшеств: шесть портов SATA 6 Гб/с с возможностью создания RAID (0,1,5,10), до 14 разъемов USB 2.0, работа с PCI. Увы, в отличие от чипсета AMD A75 для платформы FM1 поддержки скоростной шины USB 3.0 здесь нет.

Разгон

Возможность беспрепятственного разгона процессоров является одним из ключевых параметров чипов FX. На этой особенности компания AMD делает отдельный акцент. Свободный множитель доступен всем моделям линейки, а возможность его изменения будет присутствовать на любой плате с АМЗ+.
Архитектура FX изначально создавалась с учетом функционирования на высоких тактовых частотах. Умельцы, вооруженные сосудами с жидким азотом, смогли получить скриншот CPU-Z в ситуации, когда процессор работал почти на 8,5 ГГц. При этом, правда, понадобилось оставить активным лишь один модуль из четырех. Все восемь ядер удалось заставить функционировать на 8,1 ГГц. Ранее подобных частот достигали разве что максимально облегченные версии Intel Celeron для LGA775. Теперь же у энтузиастов появится куда более интересный объект для оверклокерских экспериментов.
В случае с воздушной системой охлаждения придется довольствоваться более скромными результатами. При повышении напряжения питания до 1,45 В CPU стабильно работал на 4,6 ГГц. Может и не столь впечатляюще, но потенциал очевидно лучше, чем у 45-нанометровых чипов Phenom II.
 
6    64-х  РАЗРЯДНЫЕ  RISC-ПРОЦЕССОРЫ  ФИРМЫ  INTEL

История ITANIUM начинается с 1993 г., когда было принято решение о совместной разработке фирмами INTEL и HEWLETT-PACKARD нового 64-х разрядного RISC процессора под именем MERCED.  Itanium (более позднее название этого процессора) стал первым продуктом,  основанным на новой  64-х разрядной архитектуре  IA-64 (Intel Architecture 64-bit). Он создавался для использования в высокопроизводительных рабочих станциях и серверах следующих поколений.
Первые образцы Itanium (конец 2000 г.), выполненные по 0,18-мкм технологии, имели тактовую частоту 800МГц. Новый набор инструкций класса VLIW (Very Long Instruction Word), называемый также IA-64, кодирует до 4-х инструкций в 128-ми битовое слово. При этом избыточные биты позволяют адресовать большое количество регистров, которых в новом чипе 128, а не 32, как у большинства современных RISC-процессоров. Кроме того, некоторые из бит, формируемые компилятором, укажут процессору, какие инструкции могут выполняться параллельно.
Этот набор инструкций позволит разработать улучшенную RISC-архитектуру, которая при более высоком уровне распараллеливания будет проще и обеспечит значительный рост производительности.
Процессор может выполнять программы, написанные для архитектуры H-P  PA-RISC, однако с помощью транслятора, и имеет режим для выполнения инструкций х86 (IA-32). Однако, непосредственное выполнение кода х86 – невозможно. Необходимы программы перекомпилирования инструкций   х86  в коды процессоров IA-64.
Увеличенная разрядность данных и адресов позволяет не только поднять скорость и точность вычислений, но и адресовать сверхбольшие объемы памяти. Новая технология EPIC (Explicitly Parallel Instruction Computing) дает возможность реализовать параллельную обработку нескольких инструкций. Эти возможности могут быть задействованы как явно программистом, так и оптимизирующим компилятором, определяющим группы независимых команд, которые могут выполняться параллельно.

Следующий процессор архитектуры IA-64 – ITANIUM-2 (старое название – McKinley (мак-кинли) – разрабатывался с прицелом на использование в течение 15-20 лет. В отличие от ITANIUM, содержащего 40 млн транзисторов, McKinley будет включать более 220 млн элементов (добавлено 4 Мбайта КЭШ-памяти третьего уровня). Системы на базе McKinley (коммерческое название ITANIUM-2) в 1,5-2 раза производительнее первого поколения ITANIUM. Расширен набор арифметически-логических блоков и портов памяти, обеспечивающих подачу данных в регистровый стек. Значительно возросло количество случаев, в которых за один такт может выполняться до 6 инструкций. Гарантируется полная совместимость программного обеспечения между  ITANIUM  и  ITANIUM-2.
Новые процессоры семейства ITANIUM (кодовое название MADISON) имеют стартовую тактовую частоту 1,5 ГГц, содержат 410 миллионов транзисторов на кристалле (КЭШ-память третьего уровня – 6 МБ) и изготовляться по 0,13 микронной технологии. Прирост быстродействия по сравнению с ITANIUM-2 достигнет примерно 50%.


6.1   Процессоры   ALPHA
Процессор ALPHA создан компанией Digital Equipment Corporation (DEC), стоявшей у истоков многих инноваций в IT-индустрии и разработавшей легендарные компьютеры  PDP-11 и VAX.
Первой в семействе ALPHA появилась модель 21064, выпущенная в 1992 г. При максимальной тактовой частоте 200 МГц это был 64-х разрядный RISC-процессор с кэш-памятью 64 Кбайта и очень производительным FPU, имел конвейерную архитектуру и эффективные средства организации SMP (Symmetric Multy-Processing).

В 1994 г. фирмой DEC был представлен новый процессор – ALPHA-21164, выполненный по технологии 0,5 мк и работающий частоте 266 МГц.


Это процессор с суперскалярной архитектурой, способный обрабатывать до 4-х инструкций за цикл. Он объединяет в себе КЭШ данных и КЭШ команд первого уровня, а также высокопроизводительную и объемную КЭШ-память второго уровня. Процессор использует 128-ми битовый интерфейс для доступа к памяти, а также имеет возможность подключения КЭША третьего уровня (рис. 6.1).
ALPHA-21164 состоит из пяти независимых функциональных блоков:
	блок выборки, декодирования инструкций и предсказания ветвлений;
	блок обработки целочисленных данных;
	блок управления памятью;
	блок шинного интерфейса и управления КЭШ-памятью;
	блок обработки чисел с плавающей точкой (FPU).

Модификация этого процессора – ALPHA 21164РС – спроектирован для приложений WINDOWS NT как альтернатива высокопроизво-дительным РС. Это первый чип, который содержит набор инструкций Digital Semiconductor MVI (Monitor Video Instructions – предшественник ММХ).

Новый процессор ALPHA-21264 750 МГЦ (1997 г.) имеет несколько усовершенствований, которые делают его вдвое производительней своего предшественника. 
Процессор содержит 6 конвейеров для обработки данных и поддерживает 256-ти битовый интерфейс с памятью, что дает ему возможность осуществлять выборку до 4-х команд за один машинный такт. Модель 21264 обладает усовершенствованными средствами предсказания ветвлений (вероятность правильного  предсказания 95%), а также свойством Out-of-Order, что предполагает способность процессора выполнять команды вне их очередности. ALPHA-21264 использует 160 целочисленных регистров и 72 – с плавающей точкой и способен работать с 80-тью командами одновременно. Наличие инструкций MVI (впервые реализованных в процессоре 21164) позволяет в реальном времени не только декодировать динамичные изображения (MPEG-2) но и кодировать без внешних специали-зированных устройств.

Компания DEC уже несколько лет является составной частью более крупной Compaq, усилиями которой процессор ALPHA удерживал лидерство по производительности более 10 лет в конце прошлого века. После слияния компаний Hewlett-Packard и Compaq основные лицензии на процессор ALPHA стали интеллектуальной собственностью совместного проекта Intel - Hewlett-Packard по разработке новых поколений процессоров семейства ITANIUM.



6.2  Процессоры   POWER PC
Проект по разработке RISC-процессоров POWER PC был разработан альянсом трех компаний: APPLE, IBM и MOTOROLA. В 2001 году анонсирован самый быстрый процессор POWER PC 750FX, который работает на частоте 1ГГц.
Что касается генерации чипов с частотой 2 ГГц и выше, то здесь IBM говорит об ультраскалярной улучшенной архитектуре, расширяющей возможности множественного ядра на систему в целом, где компоненты работают параллельно и взаимодействуют с внешним миром с помощью нового высокоскоростного интерфейса.
64-х разрядные процессоры этого поколения будут поддерживать 32-х разрядные приложения, чтобы обеспечить совместимость с существующим ПО.

6.3   Процессоры  SUN SPARC
Семейство 64-х разрядных процессоров UltraSPARC появилось на рынке более 5-ти лет назад. Процессоры SPARC (Scalable Processor ARChitecture) развиваются по трем линиям (сериям).
Серия S (scalable) предназначена для мощных рабочих станций и серверов, имеет тактовые частоты от 1 до 2,1 ГГц.
Серия I (integrated) характеризуется тем, что с процессором интегрируется много системных функций, обеспечивая наиболее оптимальные с точки зрения цены решения для однопроцессорных систем.
Встраиваемые процессоры маркируются буквой Е.


6.4  Процессоры  от  HEWLETT-PACKARD 
Первый RISC-процессор серии PA (Precise Architecture) фирма Hewlett-Packard выпустила в 1985 году.
Современные процессоры этой серии РА-8800 и РА-8900, выпол-ненные по технологии 0,18 мкм, работают на частотах 1ГГц. 
Однако постепенно выпуск этих процессоров прекращается вследствие неминуемого перехода к процессорам ITANIUM, которые являются наследниками PA-RISC. В новых процессорах реализовано большинство инструкций РА, поэтому программы на процессорах ITANIUM будут выполняться на уровне двоичных кодов без перекомпиляции.